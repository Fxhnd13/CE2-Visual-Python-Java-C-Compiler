package com.analisis;

import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import com.analisis.objetos.nodos.*;
import com.analisis.objetos.analisis.*;
import com.analisis.objetos.basicos.Dato;
import com.analisis.objetos.basicos.Llamadas.*;
import com.analisis.objetos.estructuras.ColeccionInstr;
import com.analisis.objetos.basicos.lugaresAsignacion.*;
import com.analisis.objetos.basicos.accionesAsignacion.*;
import com.analisis.objetos.instrucciones.instruccionesmlg.*;

action code{: :}
parser code{:

    private ErrorManager errores;
    private ColeccionInstr coleccionInstr; 

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
        coleccionInstr = new ColeccionInstr();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
    }

    public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        errores.getErrores().remove(errores.getErrores().size()-1);
        errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }

    public ColeccionInstr getColeccionInstr(){ return coleccionInstr; }
    public ErrorManager getErrores(){ return errores; }

:}

//declaracion de terminales

terminal String NEWLINE, ENTERO, FLOTANTE, CARACTER,DEF, ID, PAR_A, ELIF, PASS, PAR_C, DOS_PUNTOS, IDENT, DEDENT;
terminal String CADENA, COMA, ELSEIF, INTINPUT, CHARINPUT, FLOATINPUT, ELSE, IF, WHILE, RANGE, IN, FOR, MAS, MENOS;
terminal String POR, DIV, MOD, DISTINTO, COMPARADOR, IGUAL, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, AND, NOT, OR;
terminal String RETURN, BYVAL;

terminal String LLAVE_C, LLAVE_A, PR_ENTERO, PR_FLOTANTE, PR_CARACTER, COR_A, COR_C, PRINTF, SCANF, FIN_LINEA, AMPERSON;
terminal String HASHTAG, PUNTO, AS, DO, TO, AUMENTO, DISMINUCION, PY, VB, COMODIN_ENTERO, COMODIN_CARACTER, COMODIN_FLOTANTE;
terminal String DIM, END, SUB, SEPARADOR_VB, SEPARADOR_PY, SEPARADOR_JAVA, CASE, LOOP, NEXT, STEP, THEN, VOID;
terminal String JAVA, MAIN, BREAK, CLASS, THIS, MENSAJE, CONST, ESPERAR_TECLA, PUBLIC, SELECT, SWITCH, LIMPIAR_PANTALLA;
terminal String DEFAULT, MENSAJELN, INCLUDE, FUNCTION, SEPARADOR_PROGRAMA;

//declaracion de no terminales
//objetos simples
non terminal Instruccion                funcionVb, procedimientoVb, sentenciaIfVb, sentenciaForVb, sentenciaWhileVb;
non terminal Instruccion                sentenciaDoWhileVb, sentenciaSwitchVb, sentenciaAsignacionVb, sentenciaEscribirVb;
non terminal Instruccion                sentenciaReturnVb, dclMetodoJv, sentenciaIfJv, sentenciaForJv, sentenciaWhileJv;
non terminal Instruccion                sentenciaSwitchJv, sentenciaDoWhileJv, sentenciaAsignacionJv, sentenciaEscribirJv;
non terminal Instruccion                sentenciaReturnJv, sentenciaBreakJv, escribirPy, sentenciaIfPy; 
non terminal Instruccion                sentenciaWhilePy, sentenciaForPy, dclLibreria, libreria, sentenciaAsignacion;
non terminal Instruccion                sentenciaEscribir, sentenciaIngresoDatos, sentenciaLimpiarPantalla, sentenciaEsperarTecla;
non terminal Instruccion                sentenciaBreak, sentenciaIf, sentenciaFor, sentenciaWhile, sentenciaDoWhile;
non terminal Instruccion                sentenciaSwitch, sentenciaReturnPy;
non terminal InstruccionSino            sino, sinoVb, sinoJv, elsePy, elseIfPy;
non terminal NodoAritmetico             aumentoForVb, mensajeVb, expresionArVb, modificadorForJv, cadenaExpresionJv, expresionArJv; 
non terminal NodoAritmetico             mensajePy, expresionArPy, modificadorFor, expresionAr;
non terminal NodoBooleano               condicionVb, expresionBoolVb, expresionBoolJv, condicionPy, expresionBoolPy, expresionBool;
non terminal String                     tipoForVb, idNextVb, valorTextoLibreriaJv, valorTexto, ingreso, tiposDeDato, tiposDeMetodo;
non terminal String                     cadenita, cadenitas;
non terminal Dato                       valorCaseVb, parametroVb, valorSwitchJv, valorCadena, comodin, valorSwitch, valorAtomico;
non terminal Accion                     accionAsignacionVb, accionAsignacionJv;
non terminal AccionExpresion            asignacionValor;
non terminal AccionIngreso              expresionCadenaEntrada, ingresoDatos;
non terminal Concat                     mensajesVb, expresionMensajeJv, mensajesPy;
non terminal Llamada                    llamadaMetodoVb, llamadaMetodoJv, llamadaMetodoPy, llamadaMetodo;
non terminal RangePy                    rangePy;
non terminal LugarArreglo               arreglo;
non terminal Lugar                      lugarAsignacion;

//listados
non terminal List<LugarArreglo>         arreglos;
non terminal List<Instruccion>          bloqueVb, sentenciasVb, sentenciaVb, sentenciaSimpleVb, sentenciaDeclaracionVb;
non terminal List<Instruccion>          declaracionVariableVb, masDeclaracionVariableVb, contenidoClaseJv, sentenciasDeClaseJv;
non terminal List<Instruccion>          sentenciaDeClaseJv, bloqueJv, sentenciasJv, sentenciaJv, sentenciaSimpleJv, bloqueSwitchJv;
non terminal List<Instruccion>          sentenciaDeclaracionJv, listadoAsignacionesJv, asignacionJv, sentenciasPy, sentenciaPy; 
non terminal List<Instruccion>          bloquePy, sentenciaSimplePy, asignacionVarPy, secLibrerias, dclLibrerias, secConstantes;
non terminal List<Instruccion>          dclConstantes, dclConstante, secVariables, dclVariables, sentenciaDeclaracionInicial;
non terminal List<Instruccion>          sentenciaDeclaracion, listadoDeclaraciones, listadoDeclaracionesClases, bloque, sentencias;
non terminal List<Instruccion>          sentencia, sentenciaSimple, bloqueSwitch, codigoMain;
non terminal List<CaseInstr>            contenidoSwitchVb, contenidoSwitchJv, contenidoSwitch;
non terminal List<Dato>                 dclParametrosVb, listadoParametrosVb, dclParametrosJv, listadoParametrosJv, dclParametrosPy;
non terminal List<Dato>                 expresionCadena;
non terminal List<NodoAritmetico>       listadoParametrosEnviadosVb, listadoParametrosEnviadosJv, listadoExpresionesArPy; 
non terminal List<NodoAritmetico>       listadoParametrosEnviadosPy, asignacionConstructor, accionConstructor;
non terminal List<NodoAritmetico>       listadoExpresiones, listadoParametrosEnviados, parametrosEnviados, listDimensiones;
non terminal List<String>               listadoId, libreriaC;

//producciones que no retornan nada
non terminal Object                     codigo, visual, metodosVb, dclMetodosVb, dclMetodoVb, caseVb, espaciosVb, java, clasesJv, dclClasesJv, dclClaseJv, python, metodosPy, dclMetodosPy, dclMetodoPy, principal, publicOpcional;

//declaracion de precedencia
precedence left PR_ENTERO, PR_FLOTANTE, PR_CARACTER, COMA, ID, CADENA, PUNTO;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL;
precedence left COMPARADOR, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;

//Reglas gramaticales para el parser de python, las dem√°s no cambiaran tanto
start with codigo;

codigo::=                               visual java python principal
                                        |error java python principal
                                        |visual error python principal
                                        |visual java python error
                                        ;

//producciones de visual vasic
visual::=                               SEPARADOR_VB espaciosVb metodosVb;

metodosVb::=                            dclMetodosVb
                                        |
                                        ;

dclMetodosVb::=                         dclMetodosVb dclMetodoVb
                                        |dclMetodoVb
                                        ;

dclMetodoVb::=                          funcionVb:metodoInstr {: coleccionInstr.getInstruccionesVb().add(metodoInstr); :}
                                        |procedimientoVb:metodoInstr {: coleccionInstr.getInstruccionesVb().add(metodoInstr); :}
                                        ;

funcionVb::=                            publicOpcional FUNCTION:pos ID:id dclParametrosVb:parametros AS tiposDeDato:tipo espaciosVb bloqueVb:instrucciones END FUNCTION espaciosVb {:
                                            if(id!=null&&tipo!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |publicOpcional FUNCTION ID dclParametrosVb error:e espaciosVb bloqueVb END FUNCTION espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico el tipo para la funcion declarada, se esperaba un tipo.", eleft, eright); :}
                                        |publicOpcional FUNCTION error:e dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico un identificador para la funcion declarada, se esperaba un identificador.", eleft, eright); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada FUNCTION.", eleft, eright); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada END.", eleft, eright); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato error:e bloqueVb END FUNCTION {: agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.", eleft, eright); :}
                                        ;

procedimientoVb::=                      publicOpcional SUB:pos ID:id dclParametrosVb:parametros espaciosVb bloqueVb:instrucciones END SUB espaciosVb {:
                                            if(id!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.VOID,id,parametros,instrucciones,new Pos(posleft,posright));
                                            }
                                        :}
                                        |publicOpcional SUB error:e dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico un identificador para el procedimiento declarado, se esperaba un identificador.", eleft, eright); :}
                                        |publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END error:e {: agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada SUB.", eleft, eright); :}
                                        |publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb error:e {: agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada END.", eleft, eright); :}
                                        |publicOpcional SUB ID dclParametrosVb error:e bloqueVb END SUB {: agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.", eleft, eright); :}
                                        ;

bloqueVb::=                             sentenciasVb:instrucciones {:
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        :}
                                        | {:
                                            RESULT = new ArrayList();
                                        :}
                                        ;

sentenciasVb::=                         sentenciasVb:instruccionesRetorno sentenciaVb:instrucciones {:
                                            if(instruccionesRetorno==null)instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaVb:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaVb::=                          sentenciaIfVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhileVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaDoWhileVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSwitchVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimpleVb:instrucciones espaciosVb {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

sentenciaSimpleVb::=                    sentenciaDeclaracionVb:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |sentenciaAsignacionVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:accionIngreso {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accionIngreso!=null) instrucciones.add(new IngresoInstr(accionIngreso, new Pos(accionIngresoleft, accionIngresoright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaEscribirVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoVb:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaReturnVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaIfVb::=                        IF:pos condicionVb:condicion THEN sentenciaSimpleVb:instrucciones {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion THEN sentenciaSimpleVb:instrucciones ELSE sentenciaSimpleVb:instruccionesSino END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccionesSino!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,new SinoInstr(instruccionesSino,new Pos(instruccionesSinoleft,instruccionesSinoright)), new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion THEN espaciosVb bloqueVb:instrucciones sinoVb:instruccion END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones sinoVb:instruccion END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF condicionVb espaciosVb bloqueVb sinoVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.", eleft, eright); :}
                                        |IF condicionVb THEN espaciosVb sentenciaSimpleVb ELSE sentenciaSimpleVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada IF.", eleft, eright); :}
                                        |IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.", eleft, eright); :}
                                        |IF error:e THEN sentenciaSimpleVb ELSE sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF condicionVb error:e sentenciaSimpleVb ELSE sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); :}
                                        |IF error:e THEN espaciosVb bloqueVb sinoVb END IF {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF error:e THEN sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF condicionVb error:e sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); :}
                                        ;

sinoVb::=                               ELSEIF:pos condicionVb:condicion THEN espaciosVb bloqueVb:instrucciones sinoVb:instruccion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSEIF:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones sinoVb:instruccion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE:pos espaciosVb bloqueVb:instrucciones {:
                                            if(pos!=null&&instrucciones!=null){
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSEIF error:e espaciosVb bloqueVb sinoVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |ELSEIF error:e THEN espaciosVb bloqueVb sinoVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |
                                        ;

sentenciaForVb::=                       FOR:pos ID:id tipoForVb:tipo IGUAL expresionArVb:expInicial TO expresionArVb:expFinal aumentoForVb:expAumento espaciosVb bloqueVb:instrucciones NEXT idNextVb:id2 {:
                                            if(pos!=null&&id!=null&&expInicial!=null&&expFinal!=null&&instrucciones!=null){
                                                RESULT = new ForInstr(
                                                    new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expInicial, new Pos(expInicialleft,expInicialright)), new Pos(idleft,idright)),
                                                    new MenorIgual(new Hoja(new Dato(CONST.ID, id), new Pos(idleft, idright)), expFinal, new Pos(idleft,idright)),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(new Mas(new Hoja(new Dato(), new Pos()), (expAumento!=null)?expAumento:new Hoja(new Dato(), new Pos()),new Pos()),new Pos()),new Pos()),
                                                    new Pos(posleft,posright),
                                                    instrucciones
                                                );
                                            }
                                        :}
                                        |FOR:pos ID:id IGUAL expresionArVb:expInicial TO expresionArVb:expFinal aumentoForVb:expAumento espaciosVb bloqueVb:instrucciones NEXT idNextVb:id2 {:
                                            if(pos!=null&&id!=null&&expInicial!=null&&expFinal!=null&&instrucciones!=null){
                                                RESULT = new ForInstr(
                                                    null,
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expInicial, new Pos(expInicialleft,expInicialright)), new Pos(idleft,idright)),
                                                    new MenorIgual(new Hoja(new Dato(CONST.ID, id), new Pos(idleft, idright)), expFinal, new Pos(idleft,idright)),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(new Mas(new Hoja(new Dato(), new Pos()), (expAumento!=null)?expAumento:new Hoja(new Dato(), new Pos()),new Pos()),new Pos()),new Pos()),
                                                    new Pos(posleft,posright),
                                                    instrucciones
                                                );
                                            }
                                        :}
                                        |FOR error:e tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); :}
                                        |FOR ID tipoForVb error:e TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"No se declaro un valor de inicio.", eleft, eright); :}//error no hay valor de inicio
                                        |FOR ID tipoForVb IGUAL expresionArVb error:e aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"No se declaro un valor de finalizacion.", eleft, eright); :} //error no hay valor de fin
                                        |FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb error:e espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"Se esperaba un valor de aumento para cada ciclo del for.", eleft, eright); :} //error se esperaba en todo caso un paso de aumento
                                        ;

tipoForVb::=                            tiposDeDato:tipo {:
                                            RESULT = tipo;
                                        :}
                                        | 
                                        ;

aumentoForVb::=                         STEP expresionArVb:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |
                                        ;

idNextVb::=                             ID:id {:
                                            RESULT = id;
                                        :}
                                        |
                                        ;

sentenciaWhileVb::=                     WHILE:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones END WHILE {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |WHILE error:e espaciosVb bloqueVb END WHILE {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |WHILE condicionVb espaciosVb bloqueVb END error:e  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        ;

sentenciaDoWhileVb::=                   DO:pos espaciosVb bloqueVb:instrucciones LOOP WHILE condicionVb:condicion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new DoWhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |DO espaciosVb bloqueVb LOOP error:e condicionVb  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        |DO espaciosVb bloqueVb LOOP WHILE error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        ;

sentenciaSwitchVb::=                    SELECT:pos caseVb expresionArVb:expresion espaciosVb contenidoSwitchVb:casos END SELECT {:
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        :}
                                        |SELECT caseVb error:e espaciosVb contenidoSwitch END SELECT  {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |SELECT caseVb expresionArVb espaciosVb contenidoSwitch END error:e  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada SELECT.", eleft, eright); :}
                                        ;

caseVb::=                               CASE
                                        |
                                        ;

contenidoSwitchVb::=                    contenidoSwitchVb:casos valorCaseVb:dato espaciosVb bloqueVb:instrucciones {:
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |contenidoSwitchVb error:e espaciosVb bloqueVb  {: agregarError("Sintactico",(String) e,"Se esperaba un caso.", eleft, eright); :}
                                        |valorCaseVb:dato espaciosVb bloqueVb:instrucciones {:
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |error:e espaciosVb bloqueVb  {: agregarError("Sintactico",(String) e,"Se esperaba un caso .", eleft, eright); :}
                                        ;

valorCaseVb::=                          CASE ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, valor); :}
                                        |CASE FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, valor); :}
                                        |CASE CARACTER:valor {: RESULT = new Dato(CONST.CARACTER, valor); :}
                                        |CASE MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, "-"+valor); :}
                                        |CASE MENOS FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, "-"+valor); :}
                                        |CASE error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un valor primitivo constante.", eleft, eright); :}
                                        |ELSE {: RESULT = new Dato(CONST.VOID, null); :}
                                        ;

sentenciaDeclaracionVb::=               declaracionVariableVb:instrucciones masDeclaracionVariableVb:masInstrucciones {:
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(masInstrucciones!=null){
                                                for(Instruccion instruccion : masInstrucciones){
                                                    instrucciones.add(instruccion);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        ;

declaracionVariableVb::=                DIM:pos listadoId:listadoIds AS tiposDeDato:tipo IGUAL expresionArVb:expresion masDeclaracionVariableVb:listadoVariables{:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |DIM:pos listadoId:listadoIds AS tiposDeDato:tipo masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null) listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |DIM listadoId error:e  {: agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) declarada(s).", eleft, eright); :}
                                        ;

masDeclaracionVariableVb::=             COMA:pos listadoId:listadoIds AS tiposDeDato:tipo IGUAL expresionArVb:expresion masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |COMA:pos listadoId:listadoIds AS tiposDeDato:tipo masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |COMA listadoId error:e masDeclaracionVariableVb  {: agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) delcarada(s).", eleft, eright); :}
                                        |
                                        ;

sentenciaAsignacionVb::=                ID:id IGUAL accionAsignacionVb:accionAsignacion {:
                                            if(id!=null && accionAsignacion!=null){
                                                RESULT = new AsignacionInstr(
                                                    new LugarVariable(id, new Pos(idleft,idright)),
                                                    accionAsignacion,
                                                    new Pos(idleft,idright)
                                                );
                                            }
                                        :}
                                        |ID error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una asignacion ( = expresion).", eleft, eright); :}
                                        |ID IGUAL error:e {: agregarError("Sintactico",(String)e, "Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        ;

accionAsignacionVb::=                   ingresoDatos:accion {: RESULT = accion; :}
                                        |expresionArVb:expresion {: RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); :}
                                        ;

sentenciaEscribirVb::=                  MENSAJE:pos PAR_A mensajesVb:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        :}
                                        |MENSAJELN:pos PAR_A mensajesVb:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        :}
                                        |MENSAJE:e PAR_A PAR_C  {: agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); :}
                                        |MENSAJELN:pos PAR_A:par PAR_C {:
                                            if(pos!=null){
                                                MensajeInstr instruccion = new MensajeInstr(new Concat(new Pos(parleft,parright)), new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        :}
                                        ;

mensajesVb::=                           mensajesVb:concat AMPERSON mensajeVb:mensaje {:
                                            if(concat==null) new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        |mensajeVb:mensaje {:
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        ;

mensajeVb::=                            CADENA:cadena {:
                                            if(cadena!=null) RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos());
                                        :}
                                        |expresionArVb:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); :}
                                        ;

sentenciaReturnVb::=                    RETURN:pos expresionArVb:expresion {:
                                            if(pos!=null&&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        :}
                                        |RETURN error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

dclParametrosVb::=                      PAR_A listadoParametrosVb:parametros PAR_C {: RESULT = (parametros!=null)? parametros : new ArrayList(); :}
                                        |PAR_A PAR_C {: RESULT = new ArrayList(); :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

listadoParametrosVb::=                  listadoParametrosVb:parametros COMA parametroVb:parametro {:
                                            if(parametros==null) parametros = new ArrayList();
                                            if(parametro!=null) parametros.add(parametro);
                                            RESULT = parametros;
                                        :}
                                        |parametroVb:parametro {:
                                            List<Dato> datos = new ArrayList();
                                            if(parametro!=null) datos.add(parametro);
                                            RESULT = datos;
                                        :}
                                        ;

parametroVb::=                          BYVAL ID:id AS tiposDeDato:tipo {: RESULT = new Dato(tipo, id); :}
                                        |ID:id AS tiposDeDato:tipo {: RESULT = new Dato(tipo, id); :}
                                        |ID error:e {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |BYVAL ID error:e {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una declaracion de variable.", eleft, eright); :}
                                        ;

expresionArVb::=                        expresionArVb:expresionI MAS:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENOS:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI DIV:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI POR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MOD:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArVb:expresion PAR_C {:
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoVb:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        :}
                                        ;

condicionVb::=                          PAR_A expresionBoolVb:condicion PAR_C {: RESULT = condicion; :}
                                        |expresionBoolVb:condicion {: RESULT = condicion; :}
                                        ;

expresionBoolVb::=                      expresionArVb:expresionI DISTINTO:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI IGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENOR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENORIGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MAYOR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MAYORIGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolVb:expresionI AND:pos expresionBoolVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolVb:expresionI OR:pos expresionBoolVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolVb:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodoVb::=                      ID:id PAR_A listadoParametrosEnviadosVb:parametros PAR_C {: if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id,parametros, new Pos(idleft,idright)); :}
                                        |ID:id PAR_A PAR_C {: RESULT = new LlamadaDeAmbito(id,new ArrayList(),new Pos(idleft,idright)); :}
                                        ;

listadoParametrosEnviadosVb::=          listadoParametrosEnviadosVb:expresiones COMA expresionArVb:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoParametrosEnviadosVb COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |expresionArVb:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

espaciosVb::=                            espaciosVb FIN_LINEA
                                        |FIN_LINEA
                                        ;

//producciones de java 
java::=                                 SEPARADOR_JAVA clasesJv;

clasesJv::=                             dclClasesJv
                                        |
                                        ;

dclClasesJv::=                          dclClasesJv dclClaseJv
                                        |dclClaseJv
                                        ;

dclClaseJv::=                           publicOpcional CLASS:pos ID:id LLAVE_A contenidoClaseJv:instrucciones LLAVE_C {:
                                            if(id!=null&&pos!=null){
                                                coleccionInstr.getInstruccionesJv().add(new ClaseInstr(id,(instrucciones!=null)?instrucciones:new ArrayList(),new Pos(posleft,posright)));
                                            }
                                        :}
                                        |publicOpcional error:e ID LLAVE_A contenidoClaseJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba la palabra clave Class", eleft, eright); :}
                                        |publicOpcional CLASS error:e LLAVE_A contenidoClaseJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se especifico el identificador para la clase, se esperaba un identificador.", eleft, eright); :}
                                        ;

contenidoClaseJv::=                     sentenciasDeClaseJv:instrucciones {: RESULT = instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

sentenciasDeClaseJv::=                  sentenciasDeClaseJv:instruccionesRetorno sentenciaDeClaseJv:instrucciones {:
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaDeClaseJv:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaDeClaseJv::=                   publicOpcional sentenciaDeclaracionJv:instrucciones FIN_LINEA {:
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones){
                                                    if(instruccion instanceof AsignacionInstr){
                                                        AsignacionInstr instr = (AsignacionInstr) instruccion;
                                                        instr.setLugar(new LugarVariableGlobal(instr.getLugar().getId(), instr.getLugar().getPosicion()));
                                                    }
                                                }
                                            }else{
                                                instrucciones = new ArrayList();
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |dclMetodoJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

dclMetodoJv::=                          publicOpcional tiposDeMetodo:tipo ID:id PAR_A dclParametrosJv:parametros PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(tipo!=null&&id!=null&&instrucciones!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(idleft,idright));
                                            }
                                        :}
                                        |publicOpcional ID:id PAR_A dclParametrosJv:parametros PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(id!=null&&instrucciones!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.CONSTRUCTOR,id,parametros,instrucciones, new Pos(idleft,idright));
                                            }
                                        :}
                                        |publicOpcional tiposDeMetodo error:e PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se especifico un identificador para el metodo, se esperaba un identificador", eleft, eright); :}
                                        |publicOpcional tiposDeMetodo ID error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un listado de parametros (lleno o vacio) dentro de parentesis.", eleft, eright); :}
                                        ;

dclParametrosJv::=                      listadoParametrosJv:parametros {: RESULT = (parametros==null)? new ArrayList() : parametros; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

listadoParametrosJv::=                  listadoParametrosJv:parametros COMA tiposDeDato:tipo ID:id {:
                                            if(parametros==null)parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        :}
                                        |tiposDeDato:tipo ID:id {:
                                            List<Dato> parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        :}
                                        |listadoParametrosJv COMA error:e ID {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |listadoParametrosJv COMA tiposDeDato error:e {: agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); :}
                                        |tiposDeDato error:e {: agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); :}
                                        ;

bloqueJv::=                             sentenciasJv:instrucciones {: RESULT = instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

sentenciasJv::=                         sentenciasJv:instruccionesRetorno sentenciaJv:instrucciones {:
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaJv:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaJv::=                          sentenciaIfJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhileJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSwitchJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaDoWhileJv:instruccion FIN_LINEA {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimpleJv:instrucciones FIN_LINEA {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

sentenciaSimpleJv::=                    sentenciaDeclaracionJv:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |sentenciaAsignacionJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:ingreso {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(ingreso!=null)instrucciones.add(new IngresoInstr(ingreso, new Pos(ingresoleft,ingresoright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaEscribirJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoJv:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null)instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaReturnJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaBreakJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaIfJv::=                        IF:pos PAR_A expresionBoolJv:condicion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C sinoJv:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos PAR_A expresionBoolJv:condicion PAR_C sentenciaSimpleJv:instrucciones FIN_LINEA {:
                                            if(pos!=null&&condicion!=null){
                                                List<Instruccion> instruccionesRetorno = new ArrayList();
                                                if(instrucciones!=null){
                                                    for(Instruccion instruccion : instrucciones) instrucciones.add(instruccion);
                                                }
                                                RESULT = new SiInstr(condicion,instruccionesRetorno,null,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); :}
                                        |IF error:e LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |IF PAR_A expresionBoolJv PAR_C error:e sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo o una sentencia simple", eleft, eright); :}
                                        ;

sinoJv::=                               ELSE:pos IF PAR_A expresionBoolJv:condicion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C sinoJv:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones,instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE:pos LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE IF PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); :}
                                        |ELSE IF error:e LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto", eleft, eright); :}
                                        |ELSE IF PAR_A expresionBoolJv PAR_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); :}
                                        |ELSE error:e {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); :}
                                        |
                                        ;

sentenciaForJv::=                       FOR:pos PAR_A tiposDeDato:tipo ID:id IGUAL expresionArJv:expresion FIN_LINEA expresionBoolJv:condicion FIN_LINEA ID:id2 modificadorForJv:instruccionFor PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }else{
                                                    accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        new DeclaracionInstr(
                                                            tipo,
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new Pos(posleft,posright),
                                                            false
                                                        ),
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecuci√≥n del for.", new Pos(id2left, id2right));
                                            }
                                        :}
                                        |FOR:pos PAR_A ID:id IGUAL expresionArJv:expresion FIN_LINEA expresionBoolJv:condicion FIN_LINEA ID:id2 modificadorForJv:instruccionFor PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }else{
                                                    accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        null,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecuci√≥n del for.", new Pos(id2left, id2right));
                                            }
                                        :}
                                        |FOR PAR_A tiposDeDato ID error:e FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se asign√≥ un valor de inicio para el ciclo.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato error:e FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se declaro el identificador a evaluar con cada iteracion.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA error:e FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |FOR error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        ;

modificadorForJv::=                     IGUAL expresionArJv:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |AUMENTO:val {:
                                            RESULT = new Hoja(new Dato("AUMENTO",null),new Pos(valleft,valright));
                                        :}
                                        |DISMINUCION:val {:
                                            RESULT = new Hoja(new Dato("DISMINUCION",null), new Pos(valleft,valright));
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una asignaci√≥n o un modificador (++, --).", eleft, eright); :}
                                        ;

sentenciaWhileJv::=                     WHILE:pos PAR_A expresionBoolJv:expresion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                RESULT = new WhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                );
                                            }
                                        :}   
                                        |WHILE error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |WHILE PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |WHILE PAR_A expresionBoolJv error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        ;

sentenciaSwitchJv::=                    SWITCH:pos PAR_A expresionArJv:expresion PAR_C LLAVE_A contenidoSwitchJv:casos LLAVE_C {:
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        :}
                                        |SWITCH error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |SWITCH PAR_A error:e PAR_C LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |SWITCH PAR_A expresionArJv error:e LLAVE_A contenidoSwitchJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        ;

contenidoSwitchJv::=                    contenidoSwitchJv:casos valorSwitchJv:dato DOS_PUNTOS bloqueSwitchJv:instrucciones {:
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)?instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |valorSwitchJv:dato DOS_PUNTOS bloqueSwitchJv:instrucciones {:
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)?instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |contenidoSwitchJv error:e DOS_PUNTOS bloqueSwitchJv {: agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); :}
                                        |error:e DOS_PUNTOS bloqueSwitchJv {: agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); :}                                        
                                        ;

valorSwitchJv::=                        CASE ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, valor); :}
                                        |CASE FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, valor); :}
                                        |CASE CARACTER:valor {: RESULT = new Dato(CONST.CARACTER, valor); :}
                                        |CASE MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, "-"+valor); :}
                                        |CASE MENOS FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, "-"+valor); :}
                                        |DEFAULT {: RESULT = new Dato(CONST.VOID,null); :}
                                        ;

bloqueSwitchJv::=                        LLAVE_A bloqueJv:instrucciones LLAVE_C {: RESULT = (instrucciones==null)? new ArrayList() : instrucciones; :}
                                        |bloqueJv:instrucciones {: RESULT = (instrucciones==null)? new ArrayList() : instrucciones; :}
                                        ;

sentenciaDoWhileJv::=                   DO:pos LLAVE_A bloqueJv:instrucciones LLAVE_C WHILE PAR_A expresionBoolJv:expresion PAR_C {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                RESULT = new DoWhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                );
                                            }
                                        :}   
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        ;

sentenciaDeclaracionJv::=               tiposDeDato:tipo listadoAsignacionesJv:instrucciones {:
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                    ((DeclaracionInstr)instruccion).setPosicion(new Pos(tipoleft,tiporight));
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        ;

listadoAsignacionesJv::=                listadoAsignacionesJv:instruccionesRetorno asignacionJv:instrucciones {:
                                            if(instruccionesRetorno==null)instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion: instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |asignacionJv:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

asignacionJv::=                         ID:id IGUAL accionAsignacionJv:accion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null,new LugarVariable(id, new Pos(idleft,idright)),null,false));
                                            instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),accion,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        :}
                                        |ID:id {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null,new LugarVariable(id, new Pos(idleft,idright)),null,false));
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaAsignacionJv::=                ID:id IGUAL accionAsignacionJv:accion {:
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        :}
                                        |THIS ID:id IGUAL accionAsignacionJv:accion {:
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariableGlobal(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        :}
                                        ;

accionAsignacionJv::=                   expresionArJv:expresion {: RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); :}
                                        |ingresoDatos:ingreso {: RESULT = ingreso; :}
                                        ;

sentenciaEscribirJv::=                  MENSAJE:pos PAR_A expresionMensajeJv:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        :}
                                        |MENSAJELN:pos PAR_A expresionMensajeJv:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;                                                
                                            }
                                        :}
                                        |MENSAJELN:pos PAR_A:par PAR_C {:
                                            if(pos!=null){
                                                MensajeInstr instruccion = new MensajeInstr(new Concat(new Pos(parleft,parright)), new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        :}
                                        |MENSAJE PAR_A expresionMensajeJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |MENSAJE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); :}
                                        |MENSAJE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |MENSAJELN PAR_A expresionMensajeJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |MENSAJELN error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}                                        
                                        ;

expresionMensajeJv::=                   expresionMensajeJv:concat MAS cadenaExpresionJv:expresion {:
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(expresion!=null)concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        :}
                                        |cadenaExpresionJv:expresion {:
                                            Concat concat = new Concat(new Pos(expresionleft,expresionright));
                                            if(expresion!=null) concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); :}
                                        ;

cadenaExpresionJv::=                     CADENA:cadena {:
                                            RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright));
                                        :}
                                        |expresionArJv:expresion {:
                                            RESULT = expresion;
                                        :}
                                        ;

sentenciaReturnJv::=                    RETURN:pos expresionArJv:expresion {:
                                            if(pos!=null&&expresion!=null) RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                        :}
                                        |RETURN error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

sentenciaBreakJv::=                     BREAK:pos {: RESULT = new BreakInstr(); :};

expresionArJv::=                        expresionArJv:expresionI MAS:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENOS:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI DIV:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI POR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MOD:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArJv:expresion PAR_C {:
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoJv:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        :}
                                        |THIS ID:id {:
                                            if(id!=null){
                                                RESULT = new Hoja(new Dato(CONST.ID_GLOBAL,id), new Pos(idleft,idright));
                                            }
                                        :}
                                        ;

expresionBoolJv::=                      expresionArJv:expresionI DISTINTO:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI COMPARADOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENORIGUAL:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MAYOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MAYORIGUAL:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolJv:expresionI AND:pos expresionBoolJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolJv:expresionI OR:pos expresionBoolJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolJv:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodoJv::=                      ID:id PAR_A listadoParametrosEnviadosJv:expresiones PAR_C {: if(expresiones!=null&&id!=null) RESULT = new LlamadaDeAmbito(id,expresiones, new Pos(idleft,idright)); :}
                                        |ID:id PAR_A PAR_C {: RESULT = new LlamadaDeAmbito(id,new ArrayList(), new Pos(idleft,idright)); :}
                                        ;

listadoParametrosEnviadosJv::=          listadoParametrosEnviadosJv:expresiones COMA expresionArJv:expresion {:
                                            if(expresiones==null)expresiones = new ArrayList();
                                            if(expresion!=null)expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionArJv:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoParametrosEnviadosJv COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;


//producciones de python
python::=                               SEPARADOR_PY NEWLINE metodosPy
                                        |SEPARADOR_PY metodosPy;

metodosPy::=                            dclMetodosPy
                                        |
                                        ;

dclMetodosPy::=                         dclMetodosPy dclMetodoPy
                                        |dclMetodoPy
                                        ;

dclMetodoPy::=                          DEF:pos ID:id PAR_A dclParametrosPy:parametros PAR_C DOS_PUNTOS bloquePy:instrucciones {:
                                            coleccionInstr.getInstruccionesPy().add(new MetodoInstr(CONST.INDEFINIDO,id,parametros,instrucciones, new Pos(posleft,posright)));
                                        :}
                                        |DEF error:e DOS_PUNTOS bloquePy {: agregarError("Sintactico",(String) e,"Se esperaba un identificador para la declaracion del metodo.", eleft, eright); :}
                                        |DEF ID error:e  DOS_PUNTOS bloquePy {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |DEF ID PAR_A dclParametrosPy error:e DOS_PUNTOS bloquePy {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |DEF ID PAR_A dclParametrosPy PAR_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); :}            
                                        ;

dclParametrosPy::=                      listadoId:parametros {: 
                                            List<Dato> param = new ArrayList();
                                            if(parametros!=null){
                                                for(String id : parametros){
                                                    param.add(new Dato(CONST.INDEFINIDO, id));
                                                }
                                            }
                                            RESULT = param;
                                        :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

listadoId::=                            listadoId:parametros COMA ID:id {:
                                            if(parametros==null) parametros = new ArrayList();
                                            if(id!=null) parametros.add(id);
                                            RESULT = parametros; 
                                        :}
                                        |listadoId COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); :}
                                        |ID:id {:
                                            List<String> parametros = new ArrayList();
                                            if(id!=null) parametros.add(id);
                                            RESULT = parametros;
                                        :}
                                        ;

sentenciasPy::=                         sentenciasPy:instruccionesRetorno sentenciaPy:instrucciones {:
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaPy:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaPy::=                          sentenciaIfPy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForPy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhilePy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimplePy:instrucciones NEWLINE {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

bloquePy::=                             NEWLINE IDENT sentenciasPy:instrucciones DEDENT {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |sentenciaSimplePy:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaSimplePy::=                    asignacionVarPy:instrucciones {:
                                            RESULT = instrucciones;
                                        :}
                                        |escribirPy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:accion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accion!=null) instrucciones.add(new IngresoInstr(accion, new Pos(accionleft,accionright)));
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoPy:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaReturnPy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |PASS {:
                                            RESULT = new ArrayList();
                                        :}
                                        ;

sentenciaReturnPy::=                    RETURN:pos expresionArPy:expresion {:
                                            if(pos!=null&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        :}
                                        ;

escribirPy::=                           MENSAJE:pos PAR_A mensajesPy:concat PAR_C {:
                                            if(pos!=null&&concat!=null) RESULT = new MensajeInstr(concat, new Pos(posleft,posright));
                                        :}
                                        |MENSAJE PAR_A error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un mensaje para mostrar en pantalla.", eleft, eright); :}
                                        |MENSAJE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |MENSAJE PAR_A mensajesPy error:e {: agregarError("Sintactico",(String) e,".", eleft, eright); :}
                                        ;

mensajesPy::=                            mensajesPy:concat COMA mensajePy:mensaje {:
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        |mensajePy:mensaje {:
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        ;

mensajePy::=                            CADENA:cadena {: RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)); :}
                                        |expresionArPy:expresion {: RESULT = expresion; :}
                                        ;

listadoExpresionesArPy::=               listadoExpresionesArPy:expresiones COMA expresionArPy:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionArPy:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        ;

sentenciaIfPy::=                        IF:pos condicionPy:condicion DOS_PUNTOS bloquePy:instrucciones elseIfPy:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF condicionPy error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); :}
                                        |IF error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        ;

elseIfPy::=                             ELIF:pos condicionPy:condicion DOS_PUNTOS bloquePy:instrucciones elseIfPy:instruccion {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccion, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELIF error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |elsePy:instruccion {: RESULT = instruccion; :}
                                        |
                                        ;

elsePy::=                               ELSE:pos DOS_PUNTOS bloquePy:instrucciones {:
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        ;

sentenciaWhilePy::=                     WHILE:pos condicionPy:condicion bloquePy:instrucciones {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        ;

sentenciaForPy::=                       FOR:pos ID:id IN rangePy:rango DOS_PUNTOS bloquePy:instrucciones {:
                                            if(pos!=null&&id!=null&&rango!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new ForInstr(id,idleft,idright,rango,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |FOR ID IN error:e {: agregarError("Sintactico",(String) e,"Se esperaba la funcion range.", eleft, eright); :}
                                        |FOR ID error:e {: agregarError("Sintactico",(String) e,"Se esperaba el token 'in'.", eleft, eright); :}
                                        |FOR error:e {: agregarError("Sintactico",(String) e,"Se esperaba un identificador para el ciclo for.", eleft, eright); :}
                                        ;

rangePy::=                              RANGE PAR_A expresionArPy:e1 PAR_C {:
                                            if(e1!=null) RESULT = new RangePy(e1);
                                        :}
                                        |RANGE PAR_A expresionArPy:e1 COMA expresionArPy:e2 PAR_C {:
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2);
                                        :}
                                        |RANGE PAR_A expresionArPy:e1 COMA expresionArPy:e2 COMA expresionArPy:e3 PAR_C {:
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2,e3);
                                        :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); :}
                                        |RANGE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        ;

condicionPy::=                          PAR_A expresionBoolPy:condicion PAR_C {: RESULT = condicion; :}
                                        |PAR_A expresionBoolPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |PAR_A error:e {: agregarError("Sintactico",(String) e,"Se espraba una expresion booleana.", eleft, eright); :}
                                        |expresionBoolPy:condicion {: RESULT = condicion; :}
                                        ;

expresionArPy::=                        expresionArPy:expresionI MAS:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENOS:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI DIV:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI POR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MOD:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArPy:expresion PAR_C {:
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoPy:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        :}
                                        ;

llamadaMetodoPy::=                      ID:id PAR_A listadoParametrosEnviadosPy:parametros PAR_C {:
                                            if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id, parametros, new Pos(idleft,idright));
                                        :}
                                        |ID PAR_A listadoParametrosEnviadosPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |ID:id PAR_A PAR_C {:
                                            if(id!=null) RESULT = new LlamadaDeAmbito(id, new ArrayList(), new Pos(idleft,idright));
                                        :}
                                        ;

asignacionVarPy::=                      listadoId:listadoI IGUAL listadoExpresionesArPy:listadoE {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(listadoE!=null && listadoI!=null){
                                                if(listadoI.size() < listadoE.size()){
                                                    errores.agregarError("Semantico","En la expresion No."+(listadoI.size()+1),"Hay m√°s expresiones de las esperadas, se esperaba un listado de ("+listadoI.size()+") expresiones.", new Pos(listadoEleft,listadoEright));
                                                }else{
                                                    for(int i=0; i < listadoE.size(); i++){
                                                        instrucciones.add(new AsignacionInstr(
                                                            new LugarVariable(listadoI.get(i), new Pos(listadoIleft,listadoIright)),
                                                            new AccionExpresion(listadoE.get(i), new Pos(listadoEleft,listadoEright)),
                                                            new Pos(listadoIleft,listadoIright)
                                                        ));
                                                    }
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |listadoId error:e {: agregarError("Sintactico",(String) e,"Se esperaba un token igual (=).", eleft, eright); :}
                                        |ID:id IGUAL ingresoDatos:ingreso {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&ingreso!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),ingreso,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        :}
                                        |ID:id IGUAL expresionArPy:expresion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&expresion!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        :}
                                        ;

listadoParametrosEnviadosPy::=          listadoParametrosEnviadosPy:expresiones COMA expresionArPy:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionArPy:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        ;

expresionBoolPy::=                      expresionArPy:expresionI DISTINTO:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI IGUAL:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENOR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENORIGUAL:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MAYOR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MAYORIGUAL:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolPy:expresionI AND:pos expresionBoolPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolPy:expresionI OR:pos expresionBoolPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolPy:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;
//producciones principal
principal::=                            SEPARADOR_PROGRAMA secLibrerias:instrLibrerias secConstantes:instrConstantes secVariables:instrVariables codigoMain:instrMain {:
                                            if(instrLibrerias==null) instrLibrerias = new ArrayList();
                                            if(instrConstantes==null) instrConstantes = new ArrayList();
                                            if(instrVariables==null) instrVariables = new ArrayList();
                                            if(instrMain==null) instrMain = new ArrayList();
                                            for(Instruccion instruccion : instrLibrerias) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrConstantes) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrVariables) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrMain) coleccionInstr.getInstruccionesPr().add(instruccion);
                                        :};

secLibrerias::=                         dclLibrerias:instrucciones {: RESULT = (instrucciones==null)? new ArrayList() : instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

dclLibrerias::=                         dclLibrerias:instruccionesRetorno dclLibreria:instruccion {:
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instruccion!=null) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |dclLibreria:instruccion {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instruccion!=null) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

dclLibreria::=                          HASHTAG:pos INCLUDE libreria:libreriaInstr {:
                                            if(libreriaInstr!=null){
                                                libreriaInstr.setPosicion(new Pos(posleft,posright));
                                                RESULT = libreriaInstr;
                                            }
                                        :}
                                        |HASHTAG INCLUDE error:e {: agregarError("Sintactico",(String) e,"Se esperaba una libreria", eleft, eright); :}
                                        |HASHTAG error:e {: agregarError("Sintactico",(String) e,"Se esperaba una palabra reservada include.", eleft, eright); :}
                                        ;

libreria::=                             JAVA PUNTO valorTextoLibreriaJv:valor {:
                                            List<String> valores = new ArrayList();
                                            valores.add(valor);
                                            RESULT = new LibreriaInstr(CONST.SEC_JV, valores, null);
                                        :}
                                        |JAVA error:e {: agregarError("Sintactico",(String)e,"Se esperaba las clases a importar.",eleft,eright); :}
                                        |PY {: RESULT = new LibreriaInstr(CONST.SEC_PY, new ArrayList(), null); :}
                                        |VB {: RESULT = new LibreriaInstr(CONST.SEC_VB,new ArrayList(), null); :}
                                        |MENOR libreriaC:ids MAYOR {: RESULT = new LibreriaInstr(CONST.SEC_C, ids, null);  :}
                                        |MENOR libreriaC error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '>'",eleft,eright); :}
                                        |MENOR error:e {: agregarError("Sintactico",(String)e,"Se esperaba el formato de una libreria de C.",eleft,eright); :}
                                        ;

libreriaC::=                            libreriaC:ids PUNTO ID:id {:
                                            if(ids==null) ids = new ArrayList();
                                            if(id!=null) ids.add(id);
                                            RESULT = ids;
                                        :}
                                        |ID:id {:
                                            List<String> ids = new ArrayList();
                                            if(id!=null) ids.add(id);
                                            RESULT = ids;
                                        :}
                                        ;

valorTextoLibreriaJv::=                 CADENA:valor {: RESULT = valor; :}
                                        |CARACTER:valor {: RESULT = valor; :}
                                        ;

secConstantes::=                        dclConstantes:instrucciones {: RESULT = (instrucciones==null)? new ArrayList(): instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

dclConstantes::=                        dclConstantes:instruccionesRetorno dclConstante:instrucciones {:
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones != null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |dclConstante:instrucciones {:
                                            RESULT = (instrucciones == null)? new ArrayList() : instrucciones; 
                                        :}
                                        ;

dclConstante::=                         CONST:pos tiposDeDato:tipo ID:id IGUAL expresionAr:expresion FIN_LINEA {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(posleft,posright), true));
                                            instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expresion, new Pos(expresionleft,expresionright)), new Pos(posleft,posright)));
                                            RESULT = instrucciones; 
                                        :}
                                        |CONST tiposDeDato ID IGUAL expresionAr error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'",eleft,eright); :}
                                        |CONST tiposDeDato ID IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion para asignar a la variable.",eleft,eright); :}
                                        |CONST tiposDeDato ID error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '='",eleft,eright); :}
                                        |CONST tiposDeDato error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); :}
                                        |CONST error:e {: agregarError("Sintactico",(String)e,"Se esperaba un tipo de dato para la variable declarada.",eleft,eright); :}
                                        ;

secVariables::=                         dclVariables:instrucciones  {: RESULT = (instrucciones==null)? new ArrayList(): instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

dclVariables::=                         dclVariables:instruccionesRetorno sentenciaDeclaracionInicial:instrucciones {:
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones != null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaDeclaracionInicial:instrucciones {:
                                            RESULT = (instrucciones == null)? new ArrayList() : instrucciones; 
                                        :}
                                        ;

sentenciaDeclaracionInicial::=          sentenciaDeclaracion:instrucciones FIN_LINEA {:
                                            RESULT = instrucciones; 
                                        :}
                                        ;

sentenciaDeclaracion::=                 tiposDeDato:tipo listadoDeclaraciones:instrucciones {:
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |JAVA PUNTO ID:tipo listadoDeclaracionesClases:instrucciones {:
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                }else if(instruccion instanceof AsignacionInstr){
                                                    ((AccionConstructor)((AsignacionInstr)instruccion).getAccion()).getConstructor().setIdMetodo(tipo);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |tiposDeDato:tipo arreglos:arreglos {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            for(LugarArreglo lugar : arreglos){
                                                instrucciones.add(new DeclaracionInstr(tipo,lugar, new Pos(tipoleft,tiporight), false));
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |tiposDeDato error:e {: agregarError("Sintactico",(String)e,"Se esperaba un listado de identificadores o la estructura de un arreglo.",eleft,eright); :}
                                        |JAVA PUNTO error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador referente a una clase declarada en la seccion de java.",eleft,eright); :}
                                        |JAVA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token punto '.'.",eleft,eright); :}
                                        ;

arreglos::=                             arreglos:arreglos arreglo:arreglo {:
                                            if(arreglos==null) arreglos = new ArrayList();
                                            if(arreglo!=null) arreglos.add(arreglo);
                                            RESULT = arreglos;
                                        :}
                                        |arreglo:arreglo {:
                                            List<LugarArreglo> arreglos = new ArrayList();
                                            if(arreglo!=null) arreglos.add(arreglo);
                                            RESULT = arreglos;
                                        :}
                                        ;

arreglo::=                              ID:id listDimensiones:expresiones {:
                                            RESULT = new LugarArreglo(id, expresiones, new Pos(idleft,idright));
                                        :}
                                        ;

listDimensiones::=                      listDimensiones:expresiones COR_A expresionAr:expresion COR_C {:
                                            if(expresiones == null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |COR_A expresionAr:expresion COR_C {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones; 
                                        :}
                                        |COR_A error:e COR_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        |listDimensiones COR_A error:e COR_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        ;

listadoDeclaraciones::=                 listadoDeclaraciones:instrucciones COMA ID:id asignacionValor:accion {:
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(accion!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), accion, new Pos(accionleft,accionright)));
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |ID:id asignacionValor:accion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(accion!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), accion, new Pos(accionleft,accionright)));
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |listadoDeclaraciones COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); :}
                                        ;
 
asignacionValor::=                      IGUAL expresionAr:expresion {: RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); :}
                                        |IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        | {: RESULT = null; :}
                                        ;

listadoDeclaracionesClases::=           listadoDeclaracionesClases:instrucciones COMA ID:id asignacionConstructor:constructor {:
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarClase(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(constructor!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarClase(id, new Pos(idleft,idright)), new AccionConstructor(new LlamadaJava(id,null,constructor,new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)));
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |ID:id asignacionConstructor:constructor {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarClase(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(constructor!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarClase(id, new Pos(idleft,idright)), new AccionConstructor(new LlamadaJava(id,null,constructor,new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)));
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |listadoDeclaracionesClases COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador",eleft,eright); :}
                                        ;

asignacionConstructor::=                accionConstructor:expresiones {: RESULT = (expresiones==null)? new ArrayList() : expresiones; :}
                                        | {: RESULT = null; :}
                                        ;

accionConstructor::=                    PAR_A listadoParametrosEnviados:expresiones PAR_C {:
                                            RESULT = expresiones;
                                        :}
                                        |PAR_A listadoParametrosEnviados error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        ;

codigoMain::=                           VOID:pos MAIN:id PAR_A PAR_C LLAVE_A bloque:instrucciones LLAVE_C {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |VOID MAIN PAR_A PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |VOID MAIN PAR_A PAR_C error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta",eleft,eright); :}
                                        |VOID MAIN PAR_A error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |VOID MAIN error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |VOID error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada 'main'.",eleft,eright); :}
                                        ;

bloque::=                               sentencias:instrucciones {: RESULT = (instrucciones == null)? new ArrayList() : instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

sentencias::=                           sentencias:instruccionesRetorno sentencia:instrucciones {:
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentencia:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

sentencia::=                            sentenciaIf:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaFor:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaWhile:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaDoWhile:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaSwitch:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaSimple:instrucciones FIN_LINEA {:
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaSimple::=                      sentenciaDeclaracion:instrucciones {:
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaAsignacion:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaEscribir:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaIngresoDatos:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaLimpiarPantalla:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaEsperarTecla:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        |llamadaMetodo:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones; 
                                        :}
                                        |sentenciaBreak:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        :}
                                        ;

sentenciaAsignacion::=                  lugarAsignacion:lugar IGUAL expresionAr:expresion {:
                                            RESULT = new AsignacionInstr(lugar, new AccionExpresion(expresion, new Pos(expresionleft,expresionright)), new Pos(lugarleft,lugarright));
                                        :}
                                        |lugarAsignacion IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion arimetica.",eleft,eright); :}
                                        |lugarAsignacion error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '='.",eleft,eright); :}
                                        ;

lugarAsignacion::=                      ID:id {: RESULT = new LugarVariable(id, new Pos(idleft, idright)); :}
                                        |arreglo:lugarArreglo {: RESULT = lugarArreglo; :}
                                        |JAVA:pos PUNTO ID:id {: RESULT = new LugarClase(id, new Pos(idleft, idright)); :}
                                        ;

sentenciaEscribir::=                    PRINTF:pos PAR_A expresionCadena:datos PAR_C {:
                                            RESULT = new MensajeInstr(new Scanf(datos, new ArrayList(), new Pos(datosleft, datosright)), new Pos(posleft,posright));
                                        :}
                                        |PRINTF:pos PAR_A expresionCadena:datos COMA listadoExpresiones:expresiones PAR_C {:
                                            RESULT = new MensajeInstr(new Scanf(datos, expresiones, new Pos(datosleft,datosright)), new Pos(posleft,posright));
                                        :}
                                        |PRINTF:e PAR_A PAR_C {: agregarError("Sintactico",(String)e,"Se esperaba como minimo una cadena.",eleft,eright); :}
                                        |PRINTF error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |PRINTF PAR_A expresionCadena error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |PRINTF PAR_A expresionCadena COMA listadoExpresiones error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |PRINTF PAR_A expresionCadena COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un listado de expresiones.",eleft,eright); :}
                                        ;

expresionCadena::=                      expresionCadena:expresiones valorCadena:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :} 
                                        |valorCadena:expresion {:
                                            List<Dato> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        ;

listadoExpresiones::=                   listadoExpresiones:expresiones COMA expresionAr:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :} 
                                        |expresionAr:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoExpresiones:expresiones COMA AMPERSON expresionAr:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :} 
                                        |AMPERSON expresionAr:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresiona aritmetica.",eleft,eright); :}
                                        |listadoExpresiones COMA AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        |listadoExpresiones COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        ;

expresionCadenaEntrada::=               valorTexto:cadena comodin:tipo {:
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        :}
                                        |comodin:tipo valorTexto:cadena {:
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        :}
                                        |valorTexto:cadena comodin:tipo valorTexto:cadena2 {:
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena2), new Pos(cadena2left,cadena2right)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        :}
                                        |comodin:tipo {:
                                            RESULT = new AccionIngreso(null, tipo.getTipo(), new Pos(tipoleft,tiporight));
                                        :}
                                        |valorTexto error:e {: agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); :}
                                        |valorTexto error:e valorTexto {: agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); :}
                                        ;

valorCadena::=                          valorTexto:valor {: RESULT = new Dato(CONST.CADENA, valor); :}
                                        |comodin:comodin {: RESULT = comodin; :}
                                        ;

valorTexto::=                           cadenitas:valor {: RESULT = valor; :}
                                        |CARACTER:valor {: RESULT = valor; :}
                                        ;

cadenitas::=                            cadenitas:valores cadenita:valor {:
                                            RESULT = valores + valor;
                                        :}
                                        |cadenita:valor {:
                                            RESULT = valor;
                                        :}
                                        ;

cadenita::=                             CADENA:valor  {: RESULT = valor; :}
                                        |PUNTO:valor {: RESULT = valor; :}
                                        ;

comodin::=                              COMODIN_CARACTER:valor {: RESULT = new Dato(CONST.COMODIN_CARACTER,null); :}
                                        |COMODIN_ENTERO:valor {: RESULT = new Dato(CONST.COMODIN_ENTERO,null); :}
                                        |COMODIN_FLOTANTE:valor {: RESULT = new Dato(CONST.COMODIN_FLOTANTE,null); :}
                                        ;

sentenciaIngresoDatos::=                SCANF:pos PAR_A expresionCadenaEntrada:accion COMA AMPERSON lugarAsignacion:lugar PAR_C {:
                                            RESULT = new AsignacionInstr(lugar,accion, new Pos(posleft,posright));
                                        :}
                                        |SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada COMA AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba un lugar para asignar el valor leido.",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '&'",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada error:e {: agregarError("Sintactico",(String)e,"Se esperaba una coma.",eleft,eright); :}
                                        |SCANF PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una cadena para ingresar texto.",eleft,eright); :}
                                        |SCANF error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaLimpiarPantalla::=             LIMPIAR_PANTALLA:pos PAR_A PAR_C {: RESULT = new LimpiarInstr(new Pos(posleft,posright)); :}
                                        |LIMPIAR_PANTALLA PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |LIMPIAR_PANTALLA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaEsperarTecla::=                ESPERAR_TECLA:pos PAR_A PAR_C {: RESULT = new IngresoInstr(new AccionIngreso(null,CONST.CARACTER, new Pos(posleft,posright)), new Pos(posleft,posright)); :}
                                        |ESPERAR_TECLA PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ESPERAR_TECLA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaBreak::=                       BREAK {: RESULT = new BreakInstr(); :};

sentenciaIf::=                          IF:pos PAR_A expresionBool:condicion PAR_C LLAVE_A bloque:instrucciones LLAVE_C sino:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos PAR_A expresionBool:condicion PAR_C sentenciaSimple:instrucciones {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, null, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |IF PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |IF PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |IF PAR_A error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |IF error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sino::=                                 ELSE:pos IF PAR_A expresionBool:condicion PAR_C LLAVE_A bloque:instrucciones LLAVE_C sino:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE:pos LLAVE_A bloque:instrucciones LLAVE_C {:
                                            if(pos!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |
                                        |ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |ELSE IF PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |ELSE IF PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ELSE IF PAR_A error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |ELSE IF error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |ELSE LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |ELSE error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        ;

sentenciaFor::=                         FOR:pos PAR_A tiposDeDato:tipo ID:id IGUAL expresionAr:expresion FIN_LINEA expresionBool:condicion FIN_LINEA ID:id2 modificadorFor:instruccionFor PAR_C LLAVE_A bloque:instrucciones LLAVE_C {:
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }else{
                                                    accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        new DeclaracionInstr(
                                                            tipo,
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new Pos(posleft,posright),
                                                            false
                                                        ),
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecuci√≥n del for.", new Pos(id2left, id2right));
                                            }
                                        :}
                                        |FOR:pos PAR_A ID:id IGUAL expresionAr:expresion FIN_LINEA expresionBool:condicion FIN_LINEA ID:id2 modificadorFor:instruccionFor PAR_C LLAVE_A bloque:instrucciones LLAVE_C {:
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }else{
                                                    accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        null,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecuci√≥n del for.", new Pos(id2left, id2right));
                                            }
                                        :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esparaba una llave cerrada.",eleft,eright); :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        ; 

modificadorFor::=                       IGUAL expresionAr:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |AUMENTO:val {:
                                            RESULT = new Hoja(new Dato("AUMENTO",null),new Pos(valleft,valright));
                                        :}
                                        |DISMINUCION:val {:
                                            RESULT = new Hoja(new Dato("DISMINUCION",null), new Pos(valleft,valright));
                                        :}
                                        |IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica",eleft,eright); :}
                                        |error:e {: agregarError("Sintactico",(String)e,"Se esperaba un modificador para la variable.",eleft,eright); :}
                                        ;

sentenciaWhile::=                       WHILE:pos PAR_A expresionBool:condicion PAR_C LLAVE_A bloque:instrucciones LLAVE_C {:
                                            if(pos!=null && condicion!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new WhileInstr(condicion,instrucciones,new Pos(posleft,posright));
                                            }
                                        :}
                                        |WHILE PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |WHILE PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |WHILE PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |WHILE PAR_A error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana",eleft,eright); :}
                                        |WHILE error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaDoWhile::=                     DO:pos LLAVE_A bloque:instrucciones LLAVE_C WHILE PAR_A expresionBool:condicion PAR_C FIN_LINEA {:
                                            if(pos!=null && condicion!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new DoWhileInstr(condicion,instrucciones,new Pos(posleft,posright));
                                            }
                                        :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba un fin de linea.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada while.",eleft,eright); :}
                                        |DO LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        ;

sentenciaSwitch::=                      SWITCH:pos PAR_A expresionAr:expresion PAR_C LLAVE_A contenidoSwitch:casos LLAVE_C {:
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        :}
                                        |SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |SWITCH PAR_A expresionAr PAR_C LLAVE_A error:e {: agregarError("Sintactico",(String)e,"Se esperaban casos.",eleft,eright); :}
                                        |SWITCH PAR_A expresionAr error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |SWITCH PAR_A error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion.",eleft,eright); :}
                                        |SWITCH error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

contenidoSwitch::=                      contenidoSwitch:casos valorSwitch:dato DOS_PUNTOS bloqueSwitch:instrucciones {:
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                casos.add(new CaseInstr(dato, instrucciones, new Pos(datoleft,datoright)));
                                            }
                                            RESULT = casos;
                                        :}
                                        |valorSwitch:dato DOS_PUNTOS bloqueSwitch:instrucciones {:
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                casos.add(new CaseInstr(dato, instrucciones, new Pos(datoleft,datoright)));
                                            }
                                            RESULT = casos;
                                        :}
                                        ;

valorSwitch::=                          CASE ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, valor); :}
                                        |CASE FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, valor); :}
                                        |CASE CARACTER:valor {: RESULT = new Dato(CONST.CARACTER, valor); :}
                                        |CASE MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, "-"+valor); :}
                                        |CASE MENOS FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, "-"+valor); :}
                                        |DEFAULT {: RESULT = new Dato(CONST.VOID, null); :}
                                        |error:e {: agregarError("Sintactico",(String)e,"Se esperaba un valor para un caso de un switch.",eleft,eright); :}
                                        ;

bloqueSwitch::=                          LLAVE_A bloque:instrucciones LLAVE_C {: RESULT = (instrucciones==null)? new ArrayList() : instrucciones; :}
                                        |bloque:instrucciones {: RESULT = (instrucciones==null)? new ArrayList() : instrucciones; :}
                                        ;

expresionAr::=                          expresionAr:expresionI MAS:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENOS:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI DIV:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI POR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MOD:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionAr:expresion PAR_C {:
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodo:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |arreglo:arreglo {:
                                            if(arreglo!=null){
                                                RESULT = new Hoja(new Dato(CONST.ARREGLO, arreglo), new Pos(arregloleft,arregloright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        :}
                                        ;

expresionBool::=                        expresionAr:expresionI DISTINTO:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI COMPARADOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENORIGUAL:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MAYOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MAYORIGUAL:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBool:expresionI AND:pos expresionBool:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBool:expresionI OR:pos expresionBool:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBool:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodo::=                        JAVA:pos PUNTO ID:idVariable PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaJava(idVariable,id,parametros,new Pos(posleft,posright));
                                        :}
                                        |PY:pos PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaPython(id,parametros,new Pos(posleft,posright));
                                        :}
                                        |VB:pos PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaVisual(id,parametros,new Pos(posleft,posright));
                                        :}
                                        ;

listadoParametrosEnviados::=            parametrosEnviados:parametros {: RESULT = (parametros==null)? new ArrayList(): parametros; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

parametrosEnviados::=                   parametrosEnviados:expresiones COMA expresionAr:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionAr:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        ;

//produccionesGenerales

ingresoDatos::=                         ingreso:ingreso PAR_A CADENA:cadena PAR_C {:
                                            Mensaje mensaje = new Concat(new Pos(cadenaleft,cadenaright));
                                            mensaje.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(mensaje,ingreso,new Pos(ingresoleft,ingresoright));
                                        :}
                                        |ingreso:ingreso PAR_A PAR_C {:
                                            RESULT = new AccionIngreso(null,ingreso, new Pos(ingresoleft,ingresoright));
                                        :}
                                        |ingreso PAR_A CADENA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ingreso PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una cadena, o que estuviese vacio.",eleft,eright); :}
                                        |ingreso error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

ingreso::=                              INTINPUT:valor {: RESULT = CONST.ENTERO; :}
                                        |CHARINPUT:valor {: RESULT = CONST.CARACTER; :}
                                        |FLOATINPUT:valor {: RESULT = CONST.FLOTANTE; :}
                                        ;

tiposDeDato::=                          PR_ENTERO:valor {: RESULT = CONST.ENTERO; :}
                                        |PR_FLOTANTE:valor {: RESULT = CONST.FLOTANTE; :}
                                        |PR_CARACTER:valor {: RESULT = CONST.CARACTER; :}
                                        ;

valorAtomico::=                         ENTERO:valor {: RESULT = new Dato(CONST.ENTERO,valor); :}
                                        |FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE,valor); :}
                                        |CARACTER:valor {: RESULT = new Dato(CONST.CARACTER,valor); :}
                                        |MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO,valor); :}
                                        |ID:valor {: RESULT = new Dato(CONST.ID,valor); :}
                                        ;

tiposDeMetodo::=                        VOID:valor {: RESULT = CONST.VOID; :}
                                        |tiposDeDato:valor {: RESULT = valor; :}
                                        ;

publicOpcional::=                       PUBLIC
                                        |
                                        ;