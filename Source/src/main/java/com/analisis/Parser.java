
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.analisis;

import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import com.analisis.objetos.nodos.*;
import com.analisis.objetos.analisis.*;
import com.analisis.objetos.basicos.Dato;
import com.analisis.objetos.basicos.Llamadas.*;
import com.analisis.objetos.estructuras.ColeccionInstr;
import com.analisis.objetos.basicos.lugaresAsignacion.*;
import com.analisis.objetos.basicos.accionesAsignacion.*;
import com.analisis.objetos.instrucciones.instruccionesmlg.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0273\000\002\002\004\000\002\230\006\000\002\231" +
    "\005\000\002\232\003\000\002\232\002\000\002\233\004" +
    "\000\002\233\003\000\002\234\003\000\002\234\003\000" +
    "\002\002\015\000\002\002\014\000\002\002\015\000\002" +
    "\002\014\000\002\002\013\000\002\002\014\000\002\003" +
    "\013\000\002\003\013\000\002\003\012\000\002\003\011" +
    "\000\002\003\012\000\002\133\003\000\002\133\002\000" +
    "\002\134\004\000\002\134\003\000\002\135\004\000\002" +
    "\135\004\000\002\135\004\000\002\135\004\000\002\135" +
    "\004\000\002\135\004\000\002\136\003\000\002\136\003" +
    "\000\002\136\003\000\002\136\003\000\002\136\003\000" +
    "\002\136\003\000\002\004\006\000\002\004\012\000\002" +
    "\004\012\000\002\004\011\000\002\004\011\000\002\004" +
    "\013\000\002\004\012\000\002\004\010\000\002\004\010" +
    "\000\002\004\012\000\002\004\006\000\002\004\006\000" +
    "\002\051\010\000\002\051\007\000\002\051\005\000\002" +
    "\051\007\000\002\051\010\000\002\051\002\000\002\005" +
    "\016\000\002\005\016\000\002\005\015\000\002\005\015" +
    "\000\002\005\016\000\002\075\003\000\002\075\002\000" +
    "\002\055\004\000\002\055\002\000\002\076\003\000\002" +
    "\076\002\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\235\003\000\002\235\002\000\002\203\006\000\002" +
    "\203\006\000\002\203\005\000\002\203\005\000\002\104" +
    "\004\000\002\104\004\000\002\104\004\000\002\104\005" +
    "\000\002\104\005\000\002\104\004\000\002\104\003\000" +
    "\002\137\004\000\002\140\011\000\002\140\007\000\002" +
    "\140\005\000\002\141\011\000\002\141\007\000\002\141" +
    "\006\000\002\141\002\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\113\003\000\002\113\003\000" +
    "\002\012\006\000\002\012\006\000\002\012\005\000\002" +
    "\012\005\000\002\120\005\000\002\120\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\013\004" +
    "\000\002\013\004\000\002\206\005\000\002\206\004\000" +
    "\002\206\002\000\002\207\005\000\002\207\003\000\002" +
    "\105\006\000\002\105\005\000\002\105\004\000\002\105" +
    "\005\000\002\105\003\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\003\000\002\057\003\000\002" +
    "\067\005\000\002\067\003\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\004\000\002\123\006\000\002\123\005\000\002" +
    "\214\005\000\002\214\005\000\002\214\003\000\002\214" +
    "\003\000\002\236\004\000\002\236\003\000\002\237\004" +
    "\000\002\240\003\000\002\240\002\000\002\241\004\000" +
    "\002\241\003\000\002\242\010\000\002\242\010\000\002" +
    "\242\010\000\002\142\003\000\002\142\002\000\002\143" +
    "\004\000\002\143\003\000\002\144\004\000\002\144\003" +
    "\000\002\014\013\000\002\014\012\000\002\014\013\000" +
    "\002\014\011\000\002\210\003\000\002\210\002\000\002" +
    "\211\006\000\002\211\004\000\002\211\006\000\002\211" +
    "\006\000\002\211\004\000\002\145\003\000\002\145\002" +
    "\000\002\146\004\000\002\146\003\000\002\147\003\000" +
    "\002\147\003\000\002\147\003\000\002\147\003\000\002" +
    "\147\004\000\002\147\004\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\150\003\000\002\150\003" +
    "\000\002\150\003\000\002\150\003\000\002\015\012\000" +
    "\002\015\010\000\002\015\012\000\002\015\010\000\002" +
    "\015\010\000\002\052\013\000\002\052\006\000\002\052" +
    "\013\000\002\052\011\000\002\052\010\000\002\052\004" +
    "\000\002\052\002\000\002\016\021\000\002\016\020\000" +
    "\002\016\017\000\002\016\021\000\002\016\007\000\002" +
    "\016\021\000\002\060\004\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\017\011\000\002\017\007" +
    "\000\002\017\011\000\002\017\011\000\002\020\011\000" +
    "\002\020\007\000\002\020\011\000\002\020\011\000\002" +
    "\204\006\000\002\204\005\000\002\204\006\000\002\204" +
    "\005\000\002\106\004\000\002\106\004\000\002\106\004" +
    "\000\002\106\005\000\002\106\005\000\002\106\003\000" +
    "\002\151\005\000\002\151\003\000\002\021\012\000\002" +
    "\021\012\000\002\021\011\000\002\021\010\000\002\021" +
    "\007\000\002\152\004\000\002\153\004\000\002\153\003" +
    "\000\002\154\005\000\002\154\003\000\002\022\005\000" +
    "\002\022\006\000\002\114\003\000\002\114\003\000\002" +
    "\023\006\000\002\023\006\000\002\023\005\000\002\023" +
    "\006\000\002\023\005\000\002\023\004\000\002\023\006" +
    "\000\002\023\004\000\002\121\005\000\002\121\003\000" +
    "\002\121\003\000\002\061\003\000\002\061\003\000\002" +
    "\024\004\000\002\024\004\000\002\025\003\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\003\000" +
    "\002\062\003\000\002\062\004\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\004\000\002\124\006\000\002\124\005\000" +
    "\002\215\005\000\002\215\003\000\002\215\005\000\002" +
    "\215\003\000\002\243\005\000\002\244\003\000\002\244" +
    "\002\000\002\245\004\000\002\245\003\000\002\246\011" +
    "\000\002\246\004\000\002\246\005\000\002\246\007\000" +
    "\002\246\010\000\002\246\011\000\002\212\003\000\002" +
    "\212\002\000\002\226\005\000\002\226\005\000\002\226" +
    "\003\000\002\155\004\000\002\155\003\000\002\156\004" +
    "\000\002\156\004\000\002\156\004\000\002\156\004\000" +
    "\002\156\003\000\002\157\006\000\002\157\003\000\002" +
    "\160\003\000\002\160\003\000\002\160\003\000\002\160" +
    "\003\000\002\160\003\000\002\047\004\000\002\026\006" +
    "\000\002\026\005\000\002\026\004\000\002\026\006\000" +
    "\002\122\005\000\002\122\003\000\002\063\003\000\002" +
    "\063\003\000\002\216\005\000\002\216\005\000\002\216" +
    "\003\000\002\216\003\000\002\027\007\000\002\027\007" +
    "\000\002\027\006\000\002\027\005\000\002\054\007\000" +
    "\002\054\007\000\002\054\006\000\002\054\005\000\002" +
    "\054\003\000\002\054\002\000\002\053\005\000\002\053" +
    "\005\000\002\053\004\000\002\030\005\000\002\030\005" +
    "\000\002\031\010\000\002\031\010\000\002\031\007\000" +
    "\002\031\006\000\002\031\005\000\002\031\004\000\002" +
    "\127\006\000\002\127\010\000\002\127\012\000\002\127" +
    "\012\000\002\127\011\000\002\127\010\000\002\127\007" +
    "\000\002\127\006\000\002\127\005\000\002\127\004\000" +
    "\002\072\005\000\002\072\005\000\002\072\004\000\002" +
    "\072\003\000\002\072\003\000\002\064\005\000\002\064" +
    "\005\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\003\000\002\064\003\000" +
    "\002\125\006\000\002\125\006\000\002\125\005\000\002" +
    "\161\005\000\002\161\004\000\002\161\005\000\002\161" +
    "\005\000\002\217\005\000\002\217\003\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\004\000\002\247\007\000\002\162" +
    "\003\000\002\162\002\000\002\163\004\000\002\163\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\004\000" +
    "\002\033\005\000\002\033\004\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\004\000\002\227\005\000\002\227\003\000\002\077\003" +
    "\000\002\077\003\000\002\164\003\000\002\164\002\000" +
    "\002\165\004\000\002\165\003\000\002\166\010\000\002" +
    "\166\010\000\002\166\007\000\002\166\006\000\002\166" +
    "\005\000\002\166\004\000\002\167\003\000\002\167\002" +
    "\000\002\170\004\000\002\170\003\000\002\171\004\000" +
    "\002\171\004\000\002\172\004\000\002\172\006\000\002" +
    "\172\004\000\002\172\004\000\002\172\005\000\002\172" +
    "\004\000\002\132\004\000\002\132\003\000\002\130\004" +
    "\000\002\225\006\000\002\225\005\000\002\225\005\000" +
    "\002\225\006\000\002\173\006\000\002\173\004\000\002" +
    "\173\005\000\002\115\004\000\002\115\004\000\002\115" +
    "\002\000\002\174\006\000\002\174\004\000\002\174\005" +
    "\000\002\220\003\000\002\220\002\000\002\221\005\000" +
    "\002\221\005\000\002\202\011\000\002\202\011\000\002" +
    "\202\010\000\002\202\007\000\002\202\006\000\002\202" +
    "\005\000\002\175\003\000\002\175\002\000\002\176\004" +
    "\000\002\176\003\000\002\177\003\000\002\177\003\000" +
    "\002\177\003\000\002\177\003\000\002\177\003\000\002" +
    "\177\004\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\034\005\000" +
    "\002\034\005\000\002\034\004\000\002\131\003\000\002" +
    "\131\003\000\002\131\005\000\002\035\006\000\002\035" +
    "\010\000\002\035\006\000\002\035\005\000\002\035\004" +
    "\000\002\035\010\000\002\035\007\000\002\213\004\000" +
    "\002\213\003\000\002\222\005\000\002\222\003\000\002" +
    "\222\006\000\002\222\004\000\002\222\004\000\002\222" +
    "\006\000\002\222\005\000\002\116\004\000\002\116\004" +
    "\000\002\116\005\000\002\116\003\000\002\116\004\000" +
    "\002\116\004\000\002\116\005\000\002\116\003\000\002" +
    "\107\003\000\002\107\003\000\002\100\003\000\002\100" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\036\011\000\002\036\011\000\002\036\010\000" +
    "\002\036\007\000\002\036\006\000\002\036\005\000\002" +
    "\036\004\000\002\037\005\000\002\037\005\000\002\037" +
    "\004\000\002\040\005\000\002\040\005\000\002\040\004" +
    "\000\002\041\003\000\002\042\012\000\002\042\011\000" +
    "\002\042\007\000\002\042\011\000\002\042\010\000\002" +
    "\042\007\000\002\050\013\000\002\050\006\000\002\050" +
    "\002\000\002\050\012\000\002\050\010\000\002\050\012" +
    "\000\002\050\011\000\002\050\010\000\002\050\006\000" +
    "\002\050\004\000\002\043\021\000\002\043\020\000\002" +
    "\043\016\000\002\043\020\000\002\043\017\000\002\065" +
    "\004\000\002\065\003\000\002\065\003\000\002\065\004" +
    "\000\002\065\003\000\002\044\011\000\002\044\011\000" +
    "\002\044\007\000\002\044\011\000\002\044\010\000\002" +
    "\044\007\000\002\045\013\000\002\045\013\000\002\045" +
    "\012\000\002\045\011\000\002\045\010\000\002\045\007" +
    "\000\002\045\006\000\002\046\011\000\002\046\011\000" +
    "\002\046\010\000\002\046\011\000\002\046\010\000\002" +
    "\046\007\000\002\205\006\000\002\205\005\000\002\111" +
    "\004\000\002\111\004\000\002\111\004\000\002\111\005" +
    "\000\002\111\005\000\002\111\003\000\002\111\003\000" +
    "\002\201\005\000\002\201\003\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\066\003\000\002\066\003" +
    "\000\002\074\005\000\002\074\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\005\000\002\074\004\000\002\126" +
    "\012\000\002\126\010\000\002\126\010\000\002\223\003" +
    "\000\002\223\002\000\002\224\005\000\002\224\003\000" +
    "\002\117\006\000\002\117\005\000\002\117\006\000\002" +
    "\117\005\000\002\117\004\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\004\000\002\112\003\000\002" +
    "\103\003\000\002\103\003\000\002\250\003\000\002\250" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0549\000\004\110\004\001\002\000\004\067\u03de\001" +
    "\002\000\004\112\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\111\u02e2\001\002\000" +
    "\012\003\ufd8f\111\uff6b\124\ufd8f\131\014\001\002\000\012" +
    "\003\ufd8f\111\uff6c\124\ufd8f\131\014\001\002\000\012\003" +
    "\uff69\111\uff69\124\uff69\131\uff69\001\002\000\024\003\ufd90" +
    "\011\ufd90\060\ufd90\061\ufd90\062\ufd90\107\ufd90\120\ufd90\124" +
    "\ufd90\140\ufd90\001\002\000\004\111\uff6d\001\002\000\006" +
    "\003\017\124\020\001\002\000\004\011\u02dd\001\002\000" +
    "\006\003\022\011\021\001\002\000\004\057\u02da\001\002" +
    "\000\004\057\023\001\002\000\020\011\ufd8f\056\uff64\060" +
    "\035\061\024\062\032\120\ufd8f\131\014\001\002\000\022" +
    "\003\ufd99\011\ufd99\015\ufd99\022\ufd99\027\ufd99\044\ufd99\067" +
    "\ufd99\106\ufd99\001\002\000\020\011\uff62\056\uff62\060\uff62" +
    "\061\uff62\062\uff62\120\uff62\131\uff62\001\002\000\020\011" +
    "\uff60\056\uff60\060\uff60\061\uff60\062\uff60\120\uff60\131\uff60" +
    "\001\002\000\004\056\u02d9\001\002\000\020\011\ufd8f\056" +
    "\uff65\060\035\061\024\062\032\120\ufd8f\131\014\001\002" +
    "\000\014\011\123\060\035\061\024\062\032\120\125\001" +
    "\002\000\022\003\ufd98\011\ufd98\015\ufd98\022\ufd98\027\ufd98" +
    "\044\ufd98\067\ufd98\106\ufd98\001\002\000\004\011\037\001" +
    "\002\000\004\067\036\001\002\000\022\003\ufd9a\011\ufd9a" +
    "\015\ufd9a\022\ufd9a\027\ufd9a\044\ufd9a\067\ufd9a\106\ufd9a\001" +
    "\002\000\020\011\uff61\056\uff61\060\uff61\061\uff61\062\uff61" +
    "\120\uff61\131\uff61\001\002\000\010\011\uff10\044\043\067" +
    "\uff10\001\002\000\006\011\037\067\uff14\001\002\000\006" +
    "\011\uff12\067\uff12\001\002\000\006\011\uff13\067\uff13\001" +
    "\002\000\026\005\051\006\053\007\063\011\056\012\044" +
    "\024\052\025\045\026\060\036\047\125\057\001\002\000" +
    "\020\005\051\006\053\007\063\011\056\012\044\036\047" +
    "\125\057\001\002\000\006\003\ufd9c\012\ufd9c\001\002\000" +
    "\006\003\111\012\112\001\002\000\004\005\110\001\002" +
    "\000\046\003\ufef4\011\ufef4\015\ufef4\022\ufef4\035\ufef4\036" +
    "\ufef4\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4\045\ufef4" +
    "\046\ufef4\047\ufef4\050\ufef4\051\ufef4\053\ufef4\067\ufef4\001" +
    "\002\000\112\003\ufd97\004\ufd97\010\ufd97\011\ufd97\015\ufd97" +
    "\016\ufd97\022\ufd97\023\ufd97\024\ufd97\025\ufd97\026\ufd97\027" +
    "\ufd97\035\ufd97\036\ufd97\037\ufd97\040\ufd97\041\ufd97\042\ufd97" +
    "\043\ufd97\044\ufd97\045\ufd97\046\ufd97\047\ufd97\050\ufd97\051" +
    "\ufd97\053\ufd97\054\ufd97\064\ufd97\067\ufd97\070\ufd97\075\ufd97" +
    "\106\ufd97\116\ufd97\117\ufd97\126\ufd97\141\ufd97\001\002\000" +
    "\006\003\ufd9d\012\ufd9d\001\002\000\112\003\ufd96\004\ufd96" +
    "\010\ufd96\011\ufd96\015\ufd96\016\ufd96\022\ufd96\023\ufd96\024" +
    "\ufd96\025\ufd96\026\ufd96\027\ufd96\035\ufd96\036\ufd96\037\ufd96" +
    "\040\ufd96\041\ufd96\042\ufd96\043\ufd96\044\ufd96\045\ufd96\046" +
    "\ufd96\047\ufd96\050\ufd96\051\ufd96\053\ufd96\054\ufd96\064\ufd96" +
    "\067\ufd96\070\ufd96\075\ufd96\106\ufd96\116\ufd96\117\ufd96\126" +
    "\ufd96\141\ufd96\001\002\000\006\011\uff0c\067\uff0c\001\002" +
    "\000\046\003\ufef5\011\ufef5\015\ufef5\022\ufef5\035\ufef5\036" +
    "\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\045\ufef5" +
    "\046\ufef5\047\ufef5\050\ufef5\051\ufef5\053\ufef5\067\ufef5\001" +
    "\002\000\050\003\ufd93\011\ufd93\012\077\015\ufd93\022\ufd93" +
    "\035\ufd93\036\ufd93\037\ufd93\040\ufd93\041\ufd93\042\ufd93\043" +
    "\ufd93\045\ufd93\046\ufd93\047\ufd93\050\ufd93\051\ufd93\053\ufd93" +
    "\067\ufd93\001\002\000\004\011\076\001\002\000\006\003" +
    "\ufd9b\012\ufd9b\001\002\000\006\011\uff11\067\uff11\001\002" +
    "\000\020\011\uff0d\035\065\036\066\037\070\040\067\041" +
    "\064\067\uff0d\001\002\000\112\003\ufd95\004\ufd95\010\ufd95" +
    "\011\ufd95\015\ufd95\016\ufd95\022\ufd95\023\ufd95\024\ufd95\025" +
    "\ufd95\026\ufd95\027\ufd95\035\ufd95\036\ufd95\037\ufd95\040\ufd95" +
    "\041\ufd95\042\ufd95\043\ufd95\044\ufd95\045\ufd95\046\ufd95\047" +
    "\ufd95\050\ufd95\051\ufd95\053\ufd95\054\ufd95\064\ufd95\067\ufd95" +
    "\070\ufd95\075\ufd95\106\ufd95\116\ufd95\117\ufd95\126\ufd95\141" +
    "\ufd95\001\002\000\020\005\051\006\053\007\063\011\056" +
    "\012\044\036\047\125\057\001\002\000\020\005\051\006" +
    "\053\007\063\011\056\012\044\036\047\125\057\001\002" +
    "\000\020\005\051\006\053\007\063\011\056\012\044\036" +
    "\047\125\057\001\002\000\020\005\051\006\053\007\063" +
    "\011\056\012\044\036\047\125\057\001\002\000\020\005" +
    "\051\006\053\007\063\011\056\012\044\036\047\125\057" +
    "\001\002\000\046\003\ufef8\011\ufef8\015\ufef8\022\ufef8\035" +
    "\ufef8\036\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8\043\ufef8" +
    "\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051\ufef8\053\ufef8\067" +
    "\ufef8\001\002\000\046\003\ufef9\011\ufef9\015\ufef9\022\ufef9" +
    "\035\ufef9\036\ufef9\037\ufef9\040\ufef9\041\ufef9\042\ufef9\043" +
    "\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9\051\ufef9\053\ufef9" +
    "\067\ufef9\001\002\000\046\003\ufefa\011\ufefa\015\ufefa\022" +
    "\ufefa\035\ufefa\036\ufefa\037\070\040\067\041\064\042\ufefa" +
    "\043\ufefa\045\ufefa\046\ufefa\047\ufefa\050\ufefa\051\ufefa\053" +
    "\ufefa\067\ufefa\001\002\000\046\003\ufefb\011\ufefb\015\ufefb" +
    "\022\ufefb\035\ufefb\036\ufefb\037\070\040\067\041\064\042" +
    "\ufefb\043\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\051\ufefb" +
    "\053\ufefb\067\ufefb\001\002\000\046\003\ufef7\011\ufef7\015" +
    "\ufef7\022\ufef7\035\ufef7\036\ufef7\037\ufef7\040\ufef7\041\ufef7" +
    "\042\ufef7\043\ufef7\045\ufef7\046\ufef7\047\ufef7\050\ufef7\051" +
    "\ufef7\053\ufef7\067\ufef7\001\002\000\046\003\ufef3\011\ufef3" +
    "\015\ufef3\022\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\041" +
    "\ufef3\042\ufef3\043\ufef3\045\ufef3\046\ufef3\047\ufef3\050\ufef3" +
    "\051\ufef3\053\ufef3\067\ufef3\001\002\000\024\003\101\005" +
    "\051\006\053\007\063\011\056\012\044\015\103\036\047" +
    "\125\057\001\002\000\006\015\105\022\104\001\002\000" +
    "\006\015\ufee4\022\ufee4\001\002\000\020\015\ufee6\022\ufee6" +
    "\035\065\036\066\037\070\040\067\041\064\001\002\000" +
    "\046\003\ufee8\011\ufee8\015\ufee8\022\ufee8\035\ufee8\036\ufee8" +
    "\037\ufee8\040\ufee8\041\ufee8\042\ufee8\043\ufee8\045\ufee8\046" +
    "\ufee8\047\ufee8\050\ufee8\051\ufee8\053\ufee8\067\ufee8\001\002" +
    "\000\022\003\106\005\051\006\053\007\063\011\056\012" +
    "\044\036\047\125\057\001\002\000\046\003\ufee9\011\ufee9" +
    "\015\ufee9\022\ufee9\035\ufee9\036\ufee9\037\ufee9\040\ufee9\041" +
    "\ufee9\042\ufee9\043\ufee9\045\ufee9\046\ufee9\047\ufee9\050\ufee9" +
    "\051\ufee9\053\ufee9\067\ufee9\001\002\000\006\015\ufee5\022" +
    "\ufee5\001\002\000\020\015\ufee7\022\ufee7\035\065\036\066" +
    "\037\070\040\067\041\064\001\002\000\112\003\ufd94\004" +
    "\ufd94\010\ufd94\011\ufd94\015\ufd94\016\ufd94\022\ufd94\023\ufd94" +
    "\024\ufd94\025\ufd94\026\ufd94\027\ufd94\035\ufd94\036\ufd94\037" +
    "\ufd94\040\ufd94\041\ufd94\042\ufd94\043\ufd94\044\ufd94\045\ufd94" +
    "\046\ufd94\047\ufd94\050\ufd94\051\ufd94\053\ufd94\054\ufd94\064" +
    "\ufd94\067\ufd94\070\ufd94\075\ufd94\106\ufd94\116\ufd94\117\ufd94" +
    "\126\ufd94\141\ufd94\001\002\000\022\004\ufd9e\010\ufd9e\011" +
    "\ufd9e\023\ufd9e\027\ufd9e\067\ufd9e\106\ufd9e\141\ufd9e\001\002" +
    "\000\010\003\114\015\113\021\115\001\002\000\022\004" +
    "\ufda1\010\ufda1\011\ufda1\023\ufda1\027\ufda1\067\ufda1\106\ufda1" +
    "\141\ufda1\001\002\000\022\004\ufd9f\010\ufd9f\011\ufd9f\023" +
    "\ufd9f\027\ufd9f\067\ufd9f\106\ufd9f\141\ufd9f\001\002\000\006" +
    "\003\117\015\116\001\002\000\022\004\ufda2\010\ufda2\011" +
    "\ufda2\023\ufda2\027\ufda2\067\ufda2\106\ufda2\141\ufda2\001\002" +
    "\000\022\004\ufda0\010\ufda0\011\ufda0\023\ufda0\027\ufda0\067" +
    "\ufda0\106\ufda0\141\ufda0\001\002\000\016\015\121\035\065" +
    "\036\066\037\070\040\067\041\064\001\002\000\046\003" +
    "\ufef6\011\ufef6\015\ufef6\022\ufef6\035\ufef6\036\ufef6\037\ufef6" +
    "\040\ufef6\041\ufef6\042\ufef6\043\ufef6\045\ufef6\046\ufef6\047" +
    "\ufef6\050\ufef6\051\ufef6\053\ufef6\067\ufef6\001\002\000\006" +
    "\003\u02c7\011\u02c6\001\002\000\004\012\126\001\002\000" +
    "\006\003\ufd91\011\ufd91\001\002\000\006\003\ufd92\011\ufd92" +
    "\001\002\000\012\015\uff5a\060\035\061\024\062\032\001" +
    "\002\000\004\015\142\001\002\000\006\003\141\011\140" +
    "\001\002\000\006\015\uff5b\022\132\001\002\000\012\003" +
    "\133\060\035\061\024\062\032\001\002\000\004\011\137" +
    "\001\002\000\006\003\136\011\135\001\002\000\006\015" +
    "\uff59\022\uff59\001\002\000\006\015\uff56\022\uff56\001\002" +
    "\000\006\015\uff57\022\uff57\001\002\000\006\015\uff58\022" +
    "\uff58\001\002\000\006\015\uff55\022\uff55\001\002\000\004" +
    "\057\143\001\002\000\046\011\156\024\052\025\045\026" +
    "\060\030\154\031\145\034\173\054\147\056\uff53\060\035" +
    "\061\024\062\032\074\161\123\164\125\157\126\176\133" +
    "\152\136\162\001\002\000\004\067\uff47\001\002\000\006" +
    "\003\u02b3\012\u02b4\001\002\000\004\067\uff4a\001\002\000" +
    "\022\003\u02b1\005\051\006\053\007\063\011\056\012\044" +
    "\036\047\125\057\001\002\000\004\067\u02b0\001\002\000" +
    "\004\056\u02af\001\002\000\006\003\u011c\012\u011d\001\002" +
    "\000\054\003\uff4e\011\uff4e\024\uff4e\025\uff4e\026\uff4e\030" +
    "\uff4e\031\uff4e\034\uff4e\054\uff4e\056\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\074\uff4e\113\uff4e\123\uff4e\125\uff4e\126\uff4e\133" +
    "\uff4e\135\uff4e\136\uff4e\001\002\000\006\003\355\012\356" +
    "\001\002\000\004\067\uff46\001\002\000\006\012\077\044" +
    "\353\001\002\000\004\011\350\001\002\000\054\003\uff54" +
    "\011\156\024\052\025\045\026\060\030\154\031\145\034" +
    "\173\054\147\056\uff54\060\035\061\024\062\032\074\161" +
    "\113\uff54\123\164\125\157\126\176\133\152\135\uff54\136" +
    "\162\001\002\000\004\057\334\001\002\000\006\003\325" +
    "\012\326\001\002\000\054\003\uff4d\011\uff4d\024\uff4d\025" +
    "\uff4d\026\uff4d\030\uff4d\031\uff4d\034\uff4d\054\uff4d\056\uff4d" +
    "\060\uff4d\061\uff4d\062\uff4d\074\uff4d\113\uff4d\123\uff4d\125" +
    "\uff4d\126\uff4d\133\uff4d\135\uff4d\136\uff4d\001\002\000\004" +
    "\067\ufefc\001\002\000\004\067\uff49\001\002\000\054\003" +
    "\uff50\011\uff50\024\uff50\025\uff50\026\uff50\030\uff50\031\uff50" +
    "\034\uff50\054\uff50\056\uff50\060\uff50\061\uff50\062\uff50\074" +
    "\uff50\113\uff50\123\uff50\125\uff50\126\uff50\133\uff50\135\uff50" +
    "\136\uff50\001\002\000\004\067\uff48\001\002\000\054\003" +
    "\uff51\011\uff51\024\uff51\025\uff51\026\uff51\030\uff51\031\uff51" +
    "\034\uff51\054\uff51\056\uff51\060\uff51\061\uff51\062\uff51\074" +
    "\uff51\113\uff51\123\uff51\125\uff51\126\uff51\133\uff51\135\uff51" +
    "\136\uff51\001\002\000\004\067\uff44\001\002\000\004\067" +
    "\324\001\002\000\006\003\212\012\213\001\002\000\004" +
    "\067\uff45\001\002\000\054\003\uff4f\011\uff4f\024\uff4f\025" +
    "\uff4f\026\uff4f\030\uff4f\031\uff4f\034\uff4f\054\uff4f\056\uff4f" +
    "\060\uff4f\061\uff4f\062\uff4f\074\uff4f\113\uff4f\123\uff4f\125" +
    "\uff4f\126\uff4f\133\uff4f\135\uff4f\136\uff4f\001\002\000\006" +
    "\003\177\012\200\001\002\000\004\067\uff06\001\002\000" +
    "\024\003\203\005\051\006\053\007\063\011\056\012\044" +
    "\021\201\036\047\125\057\001\002\000\010\003\uff00\015" +
    "\uff00\035\uff00\001\002\000\010\003\210\015\207\035\206" +
    "\001\002\000\012\003\uff01\015\uff01\035\uff01\067\uff07\001" +
    "\002\000\020\003\ufeff\015\ufeff\035\065\036\066\037\070" +
    "\040\067\041\064\001\002\000\010\003\uff02\015\uff02\035" +
    "\uff02\001\002\000\022\005\051\006\053\007\063\011\056" +
    "\012\044\021\201\036\047\125\057\001\002\000\004\067" +
    "\uff0b\001\002\000\004\067\uff08\001\002\000\010\003\uff03" +
    "\015\uff03\035\uff03\001\002\000\004\057\321\001\002\000" +
    "\010\060\035\061\024\062\032\001\002\000\006\003\216" +
    "\011\215\001\002\000\006\003\260\044\261\001\002\000" +
    "\004\067\217\001\002\000\022\005\051\006\053\007\063" +
    "\011\056\012\044\036\047\052\221\125\057\001\002\000" +
    "\010\051\240\053\241\067\244\001\002\000\022\005\051" +
    "\006\053\007\063\011\056\012\044\036\047\052\221\125" +
    "\057\001\002\000\030\035\065\036\066\037\070\040\067" +
    "\041\064\042\230\043\227\045\224\046\223\047\226\050" +
    "\225\001\002\000\020\005\051\006\053\007\063\011\056" +
    "\012\044\036\047\125\057\001\002\000\020\005\051\006" +
    "\053\007\063\011\056\012\044\036\047\125\057\001\002" +
    "\000\020\005\051\006\053\007\063\011\056\012\044\036" +
    "\047\125\057\001\002\000\020\005\051\006\053\007\063" +
    "\011\056\012\044\036\047\125\057\001\002\000\020\005" +
    "\051\006\053\007\063\011\056\012\044\036\047\125\057" +
    "\001\002\000\020\005\051\006\053\007\063\011\056\012" +
    "\044\036\047\125\057\001\002\000\026\003\ufef2\015\ufef2" +
    "\035\065\036\066\037\070\040\067\041\064\051\ufef2\053" +
    "\ufef2\067\ufef2\001\002\000\026\003\ufef1\015\ufef1\035\065" +
    "\036\066\037\070\040\067\041\064\051\ufef1\053\ufef1\067" +
    "\ufef1\001\002\000\026\003\ufeee\015\ufeee\035\065\036\066" +
    "\037\070\040\067\041\064\051\ufeee\053\ufeee\067\ufeee\001" +
    "\002\000\026\003\ufeed\015\ufeed\035\065\036\066\037\070" +
    "\040\067\041\064\051\ufeed\053\ufeed\067\ufeed\001\002\000" +
    "\026\003\ufef0\015\ufef0\035\065\036\066\037\070\040\067" +
    "\041\064\051\ufef0\053\ufef0\067\ufef0\001\002\000\026\003" +
    "\ufeef\015\ufeef\035\065\036\066\037\070\040\067\041\064" +
    "\051\ufeef\053\ufeef\067\ufeef\001\002\000\014\003\ufeea\015" +
    "\ufeea\051\ufeea\053\ufeea\067\ufeea\001\002\000\022\005\051" +
    "\006\053\007\063\011\056\012\044\036\047\052\221\125" +
    "\057\001\002\000\022\005\051\006\053\007\063\011\056" +
    "\012\044\036\047\052\221\125\057\001\002\000\014\003" +
    "\ufeeb\015\ufeeb\051\240\053\ufeeb\067\ufeeb\001\002\000\014" +
    "\003\ufeec\015\ufeec\051\ufeec\053\ufeec\067\ufeec\001\002\000" +
    "\004\011\245\001\002\000\012\003\247\044\250\076\246" +
    "\077\252\001\002\000\006\003\uff30\015\uff30\001\002\000" +
    "\006\003\uff2e\015\uff2e\001\002\000\020\005\051\006\053" +
    "\007\063\011\056\012\044\036\047\125\057\001\002\000" +
    "\004\015\253\001\002\000\006\003\uff2f\015\uff2f\001\002" +
    "\000\004\057\254\001\002\000\046\011\156\024\052\025" +
    "\045\026\060\030\154\031\145\034\173\054\147\056\uff53" +
    "\060\035\061\024\062\032\074\161\123\164\125\157\126" +
    "\176\133\152\136\162\001\002\000\004\056\256\001\002" +
    "\000\054\003\uff35\011\uff35\024\uff35\025\uff35\026\uff35\030" +
    "\uff35\031\uff35\034\uff35\054\uff35\056\uff35\060\uff35\061\uff35" +
    "\062\uff35\074\uff35\113\uff35\123\uff35\125\uff35\126\uff35\133" +
    "\uff35\135\uff35\136\uff35\001\002\000\020\003\uff31\015\uff31" +
    "\035\065\036\066\037\070\040\067\041\064\001\002\000" +
    "\004\067\310\001\002\000\020\005\051\006\053\007\063" +
    "\011\056\012\044\036\047\125\057\001\002\000\016\035" +
    "\065\036\066\037\070\040\067\041\064\067\263\001\002" +
    "\000\024\003\265\005\051\006\053\007\063\011\056\012" +
    "\044\036\047\052\221\125\057\001\002\000\010\051\240" +
    "\053\241\067\275\001\002\000\004\067\266\001\002\000" +
    "\004\011\267\001\002\000\012\003\247\044\250\076\246" +
    "\077\252\001\002\000\004\015\271\001\002\000\004\057" +
    "\272\001\002\000\046\011\156\024\052\025\045\026\060" +
    "\030\154\031\145\034\173\054\147\056\uff53\060\035\061" +
    "\024\062\032\074\161\123\164\125\157\126\176\133\152" +
    "\136\162\001\002\000\004\056\274\001\002\000\054\003" +
    "\uff34\011\uff34\024\uff34\025\uff34\026\uff34\030\uff34\031\uff34" +
    "\034\uff34\054\uff34\056\uff34\060\uff34\061\uff34\062\uff34\074" +
    "\uff34\113\uff34\123\uff34\125\uff34\126\uff34\133\uff34\135\uff34" +
    "\136\uff34\001\002\000\004\011\276\001\002\000\012\003" +
    "\247\044\250\076\246\077\252\001\002\000\006\003\301" +
    "\015\300\001\002\000\004\057\305\001\002\000\004\057" +
    "\302\001\002\000\046\011\156\024\052\025\045\026\060" +
    "\030\154\031\145\034\173\054\147\056\uff53\060\035\061" +
    "\024\062\032\074\161\123\164\125\157\126\176\133\152" +
    "\136\162\001\002\000\004\056\304\001\002\000\054\003" +
    "\uff32\011\uff32\024\uff32\025\uff32\026\uff32\030\uff32\031\uff32" +
    "\034\uff32\054\uff32\056\uff32\060\uff32\061\uff32\062\uff32\074" +
    "\uff32\113\uff32\123\uff32\125\uff32\126\uff32\133\uff32\135\uff32" +
    "\136\uff32\001\002\000\046\011\156\024\052\025\045\026" +
    "\060\030\154\031\145\034\173\054\147\056\uff53\060\035" +
    "\061\024\062\032\074\161\123\164\125\157\126\176\133" +
    "\152\136\162\001\002\000\004\056\307\001\002\000\054" +
    "\003\uff37\011\uff37\024\uff37\025\uff37\026\uff37\030\uff37\031" +
    "\uff37\034\uff37\054\uff37\056\uff37\060\uff37\061\uff37\062\uff37" +
    "\074\uff37\113\uff37\123\uff37\125\uff37\126\uff37\133\uff37\135" +
    "\uff37\136\uff37\001\002\000\022\005\051\006\053\007\063" +
    "\011\056\012\044\036\047\052\221\125\057\001\002\000" +
    "\010\051\240\053\241\067\312\001\002\000\004\011\313" +
    "\001\002\000\012\003\247\044\250\076\246\077\252\001" +
    "\002\000\004\015\315\001\002\000\004\057\316\001\002" +
    "\000\046\011\156\024\052\025\045\026\060\030\154\031" +
    "\145\034\173\054\147\056\uff53\060\035\061\024\062\032" +
    "\074\161\123\164\125\157\126\176\133\152\136\162\001" +
    "\002\000\004\056\320\001\002\000\054\003\uff36\011\uff36" +
    "\024\uff36\025\uff36\026\uff36\030\uff36\031\uff36\034\uff36\054" +
    "\uff36\056\uff36\060\uff36\061\uff36\062\uff36\074\uff36\113\uff36" +
    "\123\uff36\125\uff36\126\uff36\133\uff36\135\uff36\136\uff36\001" +
    "\002\000\046\011\156\024\052\025\045\026\060\030\154" +
    "\031\145\034\173\054\147\056\uff53\060\035\061\024\062" +
    "\032\074\161\123\164\125\157\126\176\133\152\136\162" +
    "\001\002\000\004\056\323\001\002\000\054\003\uff33\011" +
    "\uff33\024\uff33\025\uff33\026\uff33\030\uff33\031\uff33\034\uff33" +
    "\054\uff33\056\uff33\060\uff33\061\uff33\062\uff33\074\uff33\113" +
    "\uff33\123\uff33\125\uff33\126\uff33\133\uff33\135\uff33\136\uff33" +
    "\001\002\000\054\003\uff4c\011\uff4c\024\uff4c\025\uff4c\026" +
    "\uff4c\030\uff4c\031\uff4c\034\uff4c\054\uff4c\056\uff4c\060\uff4c" +
    "\061\uff4c\062\uff4c\074\uff4c\113\uff4c\123\uff4c\125\uff4c\126" +
    "\uff4c\133\uff4c\135\uff4c\136\uff4c\001\002\000\004\067\uff04" +
    "\001\002\000\026\003\330\005\051\006\053\007\063\011" +
    "\056\012\044\015\331\021\201\036\047\125\057\001\002" +
    "\000\010\003\333\015\332\035\206\001\002\000\010\003" +
    "\uff01\015\uff01\035\uff01\001\002\000\004\067\uff09\001\002" +
    "\000\004\067\uff0a\001\002\000\004\067\uff05\001\002\000" +
    "\046\011\156\024\052\025\045\026\060\030\154\031\145" +
    "\034\173\054\147\056\uff53\060\035\061\024\062\032\074" +
    "\161\123\164\125\157\126\176\133\152\136\162\001\002" +
    "\000\004\056\336\001\002\000\006\003\337\031\340\001" +
    "\002\000\004\067\uff15\001\002\000\006\003\341\012\342" +
    "\001\002\000\004\067\uff16\001\002\000\024\003\344\005" +
    "\051\006\053\007\063\011\056\012\044\036\047\052\221" +
    "\125\057\001\002\000\012\003\346\015\345\051\240\053" +
    "\241\001\002\000\004\067\uff17\001\002\000\004\067\uff19" +
    "\001\002\000\004\067\uff18\001\002\000\054\003\uff52\011" +
    "\uff52\024\uff52\025\uff52\026\uff52\030\uff52\031\uff52\034\uff52" +
    "\054\uff52\056\uff52\060\uff52\061\uff52\062\uff52\074\uff52\113" +
    "\uff52\123\uff52\125\uff52\126\uff52\133\uff52\135\uff52\136\uff52" +
    "\001\002\000\004\044\351\001\002\000\026\005\051\006" +
    "\053\007\063\011\056\012\044\024\052\025\045\026\060" +
    "\036\047\125\057\001\002\000\004\067\uff0e\001\002\000" +
    "\026\005\051\006\053\007\063\011\056\012\044\024\052" +
    "\025\045\026\060\036\047\125\057\001\002\000\004\067" +
    "\uff0f\001\002\000\004\057\u0118\001\002\000\024\003\360" +
    "\005\051\006\053\007\063\011\056\012\044\036\047\052" +
    "\221\125\057\001\002\000\010\015\u010f\051\240\053\241" +
    "\001\002\000\004\015\361\001\002\000\004\057\362\001" +
    "\002\000\046\011\156\024\052\025\045\026\060\030\154" +
    "\031\145\034\173\054\147\056\uff53\060\035\061\024\062" +
    "\032\074\161\123\164\125\157\126\176\133\152\136\162" +
    "\001\002\000\004\056\364\001\002\000\056\003\uff38\011" +
    "\uff38\024\uff38\025\uff38\026\uff38\027\366\030\uff38\031\uff38" +
    "\034\uff38\054\uff38\056\uff38\060\uff38\061\uff38\062\uff38\074" +
    "\uff38\113\uff38\123\uff38\125\uff38\126\uff38\133\uff38\135\uff38" +
    "\136\uff38\001\002\000\054\003\uff41\011\uff41\024\uff41\025" +
    "\uff41\026\uff41\030\uff41\031\uff41\034\uff41\054\uff41\056\uff41" +
    "\060\uff41\061\uff41\062\uff41\074\uff41\113\uff41\123\uff41\125" +
    "\uff41\126\uff41\133\uff41\135\uff41\136\uff41\001\002\000\010" +
    "\003\367\030\370\057\371\001\002\000\054\003\uff39\011" +
    "\uff39\024\uff39\025\uff39\026\uff39\030\uff39\031\uff39\034\uff39" +
    "\054\uff39\056\uff39\060\uff39\061\uff39\062\uff39\074\uff39\113" +
    "\uff39\123\uff39\125\uff39\126\uff39\133\uff39\135\uff39\136\uff39" +
    "\001\002\000\006\003\374\012\375\001\002\000\046\011" +
    "\156\024\052\025\045\026\060\030\154\031\145\034\173" +
    "\054\147\056\uff53\060\035\061\024\062\032\074\161\123" +
    "\164\125\157\126\176\133\152\136\162\001\002\000\004" +
    "\056\373\001\002\000\054\003\uff3d\011\uff3d\024\uff3d\025" +
    "\uff3d\026\uff3d\030\uff3d\031\uff3d\034\uff3d\054\uff3d\056\uff3d" +
    "\060\uff3d\061\uff3d\062\uff3d\074\uff3d\113\uff3d\123\uff3d\125" +
    "\uff3d\126\uff3d\133\uff3d\135\uff3d\136\uff3d\001\002\000\004" +
    "\057\u010b\001\002\000\024\003\377\005\051\006\053\007" +
    "\063\011\056\012\044\036\047\052\221\125\057\001\002" +
    "\000\010\015\u0105\051\240\053\241\001\002\000\004\015" +
    "\u0100\001\002\000\004\057\u0101\001\002\000\046\011\156" +
    "\024\052\025\045\026\060\030\154\031\145\034\173\054" +
    "\147\056\uff53\060\035\061\024\062\032\074\161\123\164" +
    "\125\157\126\176\133\152\136\162\001\002\000\004\056" +
    "\u0103\001\002\000\056\003\uff38\011\uff38\024\uff38\025\uff38" +
    "\026\uff38\027\366\030\uff38\031\uff38\034\uff38\054\uff38\056" +
    "\uff38\060\uff38\061\uff38\062\uff38\074\uff38\113\uff38\123\uff38" +
    "\125\uff38\126\uff38\133\uff38\135\uff38\136\uff38\001\002\000" +
    "\054\003\uff3c\011\uff3c\024\uff3c\025\uff3c\026\uff3c\030\uff3c" +
    "\031\uff3c\034\uff3c\054\uff3c\056\uff3c\060\uff3c\061\uff3c\062" +
    "\uff3c\074\uff3c\113\uff3c\123\uff3c\125\uff3c\126\uff3c\133\uff3c" +
    "\135\uff3c\136\uff3c\001\002\000\006\003\u0106\057\u0107\001" +
    "\002\000\054\003\uff3a\011\uff3a\024\uff3a\025\uff3a\026\uff3a" +
    "\030\uff3a\031\uff3a\034\uff3a\054\uff3a\056\uff3a\060\uff3a\061" +
    "\uff3a\062\uff3a\074\uff3a\113\uff3a\123\uff3a\125\uff3a\126\uff3a" +
    "\133\uff3a\135\uff3a\136\uff3a\001\002\000\046\011\156\024" +
    "\052\025\045\026\060\030\154\031\145\034\173\054\147" +
    "\056\uff53\060\035\061\024\062\032\074\161\123\164\125" +
    "\157\126\176\133\152\136\162\001\002\000\004\056\u0109" +
    "\001\002\000\056\003\uff38\011\uff38\024\uff38\025\uff38\026" +
    "\uff38\027\366\030\uff38\031\uff38\034\uff38\054\uff38\056\uff38" +
    "\060\uff38\061\uff38\062\uff38\074\uff38\113\uff38\123\uff38\125" +
    "\uff38\126\uff38\133\uff38\135\uff38\136\uff38\001\002\000\054" +
    "\003\uff3e\011\uff3e\024\uff3e\025\uff3e\026\uff3e\030\uff3e\031" +
    "\uff3e\034\uff3e\054\uff3e\056\uff3e\060\uff3e\061\uff3e\062\uff3e" +
    "\074\uff3e\113\uff3e\123\uff3e\125\uff3e\126\uff3e\133\uff3e\135" +
    "\uff3e\136\uff3e\001\002\000\046\011\156\024\052\025\045" +
    "\026\060\030\154\031\145\034\173\054\147\056\uff53\060" +
    "\035\061\024\062\032\074\161\123\164\125\157\126\176" +
    "\133\152\136\162\001\002\000\004\056\u010d\001\002\000" +
    "\056\003\uff38\011\uff38\024\uff38\025\uff38\026\uff38\027\366" +
    "\030\uff38\031\uff38\034\uff38\054\uff38\056\uff38\060\uff38\061" +
    "\uff38\062\uff38\074\uff38\113\uff38\123\uff38\125\uff38\126\uff38" +
    "\133\uff38\135\uff38\136\uff38\001\002\000\054\003\uff3b\011" +
    "\uff3b\024\uff3b\025\uff3b\026\uff3b\030\uff3b\031\uff3b\034\uff3b" +
    "\054\uff3b\056\uff3b\060\uff3b\061\uff3b\062\uff3b\074\uff3b\113" +
    "\uff3b\123\uff3b\125\uff3b\126\uff3b\133\uff3b\135\uff3b\136\uff3b" +
    "\001\002\000\036\003\u0111\011\156\024\052\025\045\026" +
    "\060\054\147\057\u0112\060\035\061\024\062\032\123\164" +
    "\125\157\126\176\136\162\001\002\000\004\067\u0117\001" +
    "\002\000\056\003\uff38\011\uff38\024\uff38\025\uff38\026\uff38" +
    "\027\366\030\uff38\031\uff38\034\uff38\054\uff38\056\uff38\060" +
    "\uff38\061\uff38\062\uff38\074\uff38\113\uff38\123\uff38\125\uff38" +
    "\126\uff38\133\uff38\135\uff38\136\uff38\001\002\000\046\011" +
    "\156\024\052\025\045\026\060\030\154\031\145\034\173" +
    "\054\147\056\uff53\060\035\061\024\062\032\074\161\123" +
    "\164\125\157\126\176\133\152\136\162\001\002\000\004" +
    "\056\u0114\001\002\000\056\003\uff38\011\uff38\024\uff38\025" +
    "\uff38\026\uff38\027\366\030\uff38\031\uff38\034\uff38\054\uff38" +
    "\056\uff38\060\uff38\061\uff38\062\uff38\074\uff38\113\uff38\123" +
    "\uff38\125\uff38\126\uff38\133\uff38\135\uff38\136\uff38\001\002" +
    "\000\054\003\uff43\011\uff43\024\uff43\025\uff43\026\uff43\030" +
    "\uff43\031\uff43\034\uff43\054\uff43\056\uff43\060\uff43\061\uff43" +
    "\062\uff43\074\uff43\113\uff43\123\uff43\125\uff43\126\uff43\133" +
    "\uff43\135\uff43\136\uff43\001\002\000\054\003\uff3f\011\uff3f" +
    "\024\uff3f\025\uff3f\026\uff3f\030\uff3f\031\uff3f\034\uff3f\054" +
    "\uff3f\056\uff3f\060\uff3f\061\uff3f\062\uff3f\074\uff3f\113\uff3f" +
    "\123\uff3f\125\uff3f\126\uff3f\133\uff3f\135\uff3f\136\uff3f\001" +
    "\002\000\054\003\uff42\011\uff42\024\uff42\025\uff42\026\uff42" +
    "\030\uff42\031\uff42\034\uff42\054\uff42\056\uff42\060\uff42\061" +
    "\uff42\062\uff42\074\uff42\113\uff42\123\uff42\125\uff42\126\uff42" +
    "\133\uff42\135\uff42\136\uff42\001\002\000\046\011\156\024" +
    "\052\025\045\026\060\030\154\031\145\034\173\054\147" +
    "\056\uff53\060\035\061\024\062\032\074\161\123\164\125" +
    "\157\126\176\133\152\136\162\001\002\000\004\056\u011a" +
    "\001\002\000\056\003\uff38\011\uff38\024\uff38\025\uff38\026" +
    "\uff38\027\366\030\uff38\031\uff38\034\uff38\054\uff38\056\uff38" +
    "\060\uff38\061\uff38\062\uff38\074\uff38\113\uff38\123\uff38\125" +
    "\uff38\126\uff38\133\uff38\135\uff38\136\uff38\001\002\000\054" +
    "\003\uff40\011\uff40\024\uff40\025\uff40\026\uff40\030\uff40\031" +
    "\uff40\034\uff40\054\uff40\056\uff40\060\uff40\061\uff40\062\uff40" +
    "\074\uff40\113\uff40\123\uff40\125\uff40\126\uff40\133\uff40\135" +
    "\uff40\136\uff40\001\002\000\004\057\u02ac\001\002\000\022" +
    "\003\u011e\005\051\006\053\007\063\011\056\012\044\036" +
    "\047\125\057\001\002\000\004\015\u0140\001\002\000\020" +
    "\003\u0121\015\u0120\035\065\036\066\037\070\040\067\041" +
    "\064\001\002\000\004\057\u013d\001\002\000\004\057\u0122" +
    "\001\002\000\010\003\u0125\113\u0127\135\u0123\001\002\000" +
    "\004\016\uff1c\001\002\000\012\003\u0136\056\u0137\113\u0127" +
    "\135\u0123\001\002\000\004\016\u0134\001\002\000\004\016" +
    "\u012e\001\002\000\012\005\u012b\006\u012a\007\u0129\036\u0128" +
    "\001\002\000\006\005\u012d\006\u012c\001\002\000\004\016" +
    "\uff1f\001\002\000\004\016\uff20\001\002\000\004\016\uff21" +
    "\001\002\000\004\016\uff1d\001\002\000\004\016\uff1e\001" +
    "\002\000\056\003\uff53\011\156\024\052\025\045\026\060" +
    "\030\154\031\145\034\173\054\147\056\uff53\057\u0131\060" +
    "\035\061\024\062\032\074\161\113\uff53\123\164\125\157" +
    "\126\176\133\152\135\uff53\136\162\001\002\000\012\003" +
    "\uff24\056\uff24\113\uff24\135\uff24\001\002\000\012\003\uff1a" +
    "\056\uff1a\113\uff1a\135\uff1a\001\002\000\046\011\156\024" +
    "\052\025\045\026\060\030\154\031\145\034\173\054\147" +
    "\056\uff53\060\035\061\024\062\032\074\161\123\164\125" +
    "\157\126\176\133\152\136\162\001\002\000\004\056\u0133" +
    "\001\002\000\012\003\uff1b\056\uff1b\113\uff1b\135\uff1b\001" +
    "\002\000\056\003\uff53\011\156\024\052\025\045\026\060" +
    "\030\154\031\145\034\173\054\147\056\uff53\057\u0131\060" +
    "\035\061\024\062\032\074\161\113\uff53\123\164\125\157" +
    "\126\176\133\152\135\uff53\136\162\001\002\000\012\003" +
    "\uff22\056\uff22\113\uff22\135\uff22\001\002\000\004\016\u013b" +
    "\001\002\000\054\003\uff26\011\uff26\024\uff26\025\uff26\026" +
    "\uff26\030\uff26\031\uff26\034\uff26\054\uff26\056\uff26\060\uff26" +
    "\061\uff26\062\uff26\074\uff26\113\uff26\123\uff26\125\uff26\126" +
    "\uff26\133\uff26\135\uff26\136\uff26\001\002\000\004\016\u0139" +
    "\001\002\000\056\003\uff53\011\156\024\052\025\045\026" +
    "\060\030\154\031\145\034\173\054\147\056\uff53\057\u0131" +
    "\060\035\061\024\062\032\074\161\113\uff53\123\164\125" +
    "\157\126\176\133\152\135\uff53\136\162\001\002\000\012" +
    "\003\uff25\056\uff25\113\uff25\135\uff25\001\002\000\056\003" +
    "\uff53\011\156\024\052\025\045\026\060\030\154\031\145" +
    "\034\173\054\147\056\uff53\057\u0131\060\035\061\024\062" +
    "\032\074\161\113\uff53\123\164\125\157\126\176\133\152" +
    "\135\uff53\136\162\001\002\000\012\003\uff23\056\uff23\113" +
    "\uff23\135\uff23\001\002\000\010\003\u0125\113\u0127\135\u0123" +
    "\001\002\000\012\003\u0136\056\u013f\113\u0127\135\u0123\001" +
    "\002\000\054\003\uff29\011\uff29\024\uff29\025\uff29\026\uff29" +
    "\030\uff29\031\uff29\034\uff29\054\uff29\056\uff29\060\uff29\061" +
    "\uff29\062\uff29\074\uff29\113\uff29\123\uff29\125\uff29\126\uff29" +
    "\133\uff29\135\uff29\136\uff29\001\002\000\004\057\u0141\001" +
    "\002\000\010\003\u0144\113\u0146\135\u0142\001\002\000\004" +
    "\016\ufdbe\001\002\000\012\003\u0144\056\u02ab\113\u0146\135" +
    "\u0142\001\002\000\004\016\ufdbd\001\002\000\004\016\u014d" +
    "\001\002\000\012\005\u014a\006\u0148\007\u0149\036\u0147\001" +
    "\002\000\006\005\u014c\006\u014b\001\002\000\004\016\ufdc2" +
    "\001\002\000\004\016\ufdc1\001\002\000\004\016\ufdc3\001" +
    "\002\000\004\016\ufdbf\001\002\000\004\016\ufdc0\001\002" +
    "\000\060\003\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\056" +
    "\ufe36\057\u0158\060\035\061\024\062\032\065\u0163\066\u0151" +
    "\074\u0170\100\u016f\101\u0157\106\ufe36\113\ufe36\121\u0152\123" +
    "\u0162\130\u0165\133\u0164\134\u0155\135\ufe36\001\002\000\004" +
    "\067\ufe29\001\002\000\060\002\ufe30\003\ufe30\011\ufe30\030" +
    "\ufe30\031\ufe30\034\ufe30\056\ufe30\060\ufe30\061\ufe30\062\ufe30" +
    "\065\ufe30\066\ufe30\074\ufe30\100\ufe30\101\ufe30\106\ufe30\113" +
    "\ufe30\121\ufe30\123\ufe30\130\ufe30\133\ufe30\134\ufe30\135\ufe30" +
    "\001\002\000\060\002\ufe33\003\ufe33\011\ufe33\030\ufe33\031" +
    "\ufe33\034\ufe33\056\ufe33\060\ufe33\061\ufe33\062\ufe33\065\ufe33" +
    "\066\ufe33\074\ufe33\100\ufe33\101\ufe33\106\ufe33\113\ufe33\121" +
    "\ufe33\123\ufe33\130\ufe33\133\ufe33\134\ufe33\135\ufe33\001\002" +
    "\000\006\003\u0294\012\u0295\001\002\000\006\003\u0285\072" +
    "\u0284\001\002\000\014\003\ufdc4\056\ufdc4\106\ufdc4\113\ufdc4" +
    "\135\ufdc4\001\002\000\060\002\ufe32\003\ufe32\011\ufe32\030" +
    "\ufe32\031\ufe32\034\ufe32\056\ufe32\060\ufe32\061\ufe32\062\ufe32" +
    "\065\ufe32\066\ufe32\074\ufe32\100\ufe32\101\ufe32\106\ufe32\113" +
    "\ufe32\121\ufe32\123\ufe32\130\ufe32\133\ufe32\134\ufe32\135\ufe32" +
    "\001\002\000\006\003\u0280\012\u0281\001\002\000\004\067" +
    "\ufe28\001\002\000\004\072\u027b\001\002\000\046\011\u0160" +
    "\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061\024\062" +
    "\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152" +
    "\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\004\012" +
    "\u0252\001\002\000\006\003\u0245\011\u0243\001\002\000\014" +
    "\003\ufdbb\056\ufdbb\106\ufdbb\113\ufdbb\135\ufdbb\001\002\000" +
    "\004\067\ufe27\001\002\000\004\067\ufe2c\001\002\000\004" +
    "\067\ufe2d\001\002\000\006\003\u0212\012\u0213\001\002\000" +
    "\012\003\ufe22\015\ufe22\044\ufe22\063\u0208\001\002\000\060" +
    "\002\ufe37\003\ufe37\011\u0160\030\u015f\031\u0169\034\u0159\056" +
    "\ufe37\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170" +
    "\100\u016f\101\u0157\106\ufe37\113\ufe37\121\u0152\123\u0162\130" +
    "\u0165\133\u0164\134\u0155\135\ufe37\001\002\000\004\067\ufdf3" +
    "\001\002\000\006\003\u01e8\012\u01e9\001\002\000\006\003" +
    "\u01d1\012\u01d2\001\002\000\006\003\u01cd\012\u01ce\001\002" +
    "\000\060\002\ufe2f\003\ufe2f\011\ufe2f\030\ufe2f\031\ufe2f\034" +
    "\ufe2f\056\ufe2f\060\ufe2f\061\ufe2f\062\ufe2f\065\ufe2f\066\ufe2f" +
    "\074\ufe2f\100\ufe2f\101\ufe2f\106\ufe2f\113\ufe2f\121\ufe2f\123" +
    "\ufe2f\130\ufe2f\133\ufe2f\134\ufe2f\135\ufe2f\001\002\000\004" +
    "\067\ufe26\001\002\000\004\067\u01cc\001\002\000\006\003" +
    "\u01b8\012\u01b9\001\002\000\060\002\ufe34\003\ufe34\011\ufe34" +
    "\030\ufe34\031\ufe34\034\ufe34\056\ufe34\060\ufe34\061\ufe34\062" +
    "\ufe34\065\ufe34\066\ufe34\074\ufe34\100\ufe34\101\ufe34\106\ufe34" +
    "\113\ufe34\121\ufe34\123\ufe34\130\ufe34\133\ufe34\134\ufe34\135" +
    "\ufe34\001\002\000\004\067\ufe2b\001\002\000\060\002\ufe31" +
    "\003\ufe31\011\ufe31\030\ufe31\031\ufe31\034\ufe31\056\ufe31\060" +
    "\ufe31\061\ufe31\062\ufe31\065\ufe31\066\ufe31\074\ufe31\100\ufe31" +
    "\101\ufe31\106\ufe31\113\ufe31\121\ufe31\123\ufe31\130\ufe31\133" +
    "\ufe31\134\ufe31\135\ufe31\001\002\000\004\067\ufe2a\001\002" +
    "\000\006\003\u01b4\044\u01b5\001\002\000\004\072\u01af\001" +
    "\002\000\004\057\u0172\001\002\000\010\003\ufe21\015\ufe21" +
    "\044\ufe21\001\002\000\050\003\ufe36\011\u0160\030\u015f\031" +
    "\u0169\034\u0159\056\ufe36\060\035\061\024\062\032\065\u0163" +
    "\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162\130" +
    "\u0165\133\u0164\134\u0155\001\002\000\006\003\u0174\056\u0175" +
    "\001\002\000\060\002\ufdcc\003\ufdcc\011\ufdcc\030\ufdcc\031" +
    "\ufdcc\034\ufdcc\056\ufdcc\060\ufdcc\061\ufdcc\062\ufdcc\065\ufdcc" +
    "\066\ufdcc\074\ufdcc\100\ufdcc\101\ufdcc\106\ufdcc\113\ufdcc\121" +
    "\ufdcc\123\ufdcc\130\ufdcc\133\ufdcc\134\ufdcc\135\ufdcc\001\002" +
    "\000\006\003\u0176\031\u0177\001\002\000\060\002\ufdcd\003" +
    "\ufdcd\011\ufdcd\030\ufdcd\031\ufdcd\034\ufdcd\056\ufdcd\060\ufdcd" +
    "\061\ufdcd\062\ufdcd\065\ufdcd\066\ufdcd\074\ufdcd\100\ufdcd\101" +
    "\ufdcd\106\ufdcd\113\ufdcd\121\ufdcd\123\ufdcd\130\ufdcd\133\ufdcd" +
    "\134\ufdcd\135\ufdcd\001\002\000\006\003\u0178\012\u0179\001" +
    "\002\000\060\002\ufdce\003\ufdce\011\ufdce\030\ufdce\031\ufdce" +
    "\034\ufdce\056\ufdce\060\ufdce\061\ufdce\062\ufdce\065\ufdce\066" +
    "\ufdce\074\ufdce\100\ufdce\101\ufdce\106\ufdce\113\ufdce\121\ufdce" +
    "\123\ufdce\130\ufdce\133\ufdce\134\ufdce\135\ufdce\001\002\000" +
    "\030\003\u0181\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\052\u0182\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\024\005\051\006\053\007\063\011\u0180\012\u017a\036\047" +
    "\100\u016f\101\u0157\121\u017b\001\002\000\004\072\u01a2\001" +
    "\002\000\046\003\ufdb3\015\ufdb3\022\ufdb3\035\ufdb3\036\ufdb3" +
    "\037\ufdb3\040\ufdb3\041\ufdb3\042\ufdb3\043\ufdb3\045\ufdb3\046" +
    "\ufdb3\047\ufdb3\050\ufdb3\051\ufdb3\053\ufdb3\064\ufdb3\067\ufdb3" +
    "\001\002\000\030\035\u0191\036\u018d\037\u0190\040\u0194\041" +
    "\u018f\042\u0196\043\u0195\045\u018e\046\u018c\047\u0193\050\u0192" +
    "\001\002\000\012\003\u0189\015\u0188\051\u0184\053\u0185\001" +
    "\002\000\046\003\ufdb4\015\ufdb4\022\ufdb4\035\ufdb4\036\ufdb4" +
    "\037\ufdb4\040\ufdb4\041\ufdb4\042\ufdb4\043\ufdb4\045\ufdb4\046" +
    "\ufdb4\047\ufdb4\050\ufdb4\051\ufdb4\053\ufdb4\064\ufdb4\067\ufdb4" +
    "\001\002\000\046\003\ufd93\015\ufd93\022\ufd93\035\ufd93\036" +
    "\ufd93\037\ufd93\040\ufd93\041\ufd93\042\ufd93\043\ufd93\045\ufd93" +
    "\046\ufd93\047\ufd93\050\ufd93\051\ufd93\053\ufd93\064\ufd93\067" +
    "\ufd93\001\002\000\060\002\ufdcf\003\ufdcf\011\ufdcf\030\ufdcf" +
    "\031\ufdcf\034\ufdcf\056\ufdcf\060\ufdcf\061\ufdcf\062\ufdcf\065" +
    "\ufdcf\066\ufdcf\074\ufdcf\100\ufdcf\101\ufdcf\106\ufdcf\113\ufdcf" +
    "\121\ufdcf\123\ufdcf\130\ufdcf\133\ufdcf\134\ufdcf\135\ufdcf\001" +
    "\002\000\026\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\052\u0182\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\014\003\ufdaa\015\ufdaa\051\ufdaa\053\ufdaa\067\ufdaa\001\002" +
    "\000\026\005\051\006\053\007\063\011\u0180\012\u017a\036" +
    "\047\052\u0182\100\u016f\101\u0157\121\u017b\001\002\000\026" +
    "\005\051\006\053\007\063\011\u0180\012\u017a\036\047\052" +
    "\u0182\100\u016f\101\u0157\121\u017b\001\002\000\014\003\ufdab" +
    "\015\ufdab\051\u0184\053\ufdab\067\ufdab\001\002\000\014\003" +
    "\ufdac\015\ufdac\051\ufdac\053\ufdac\067\ufdac\001\002\000\006" +
    "\003\u018a\067\u018b\001\002\000\060\002\ufdd0\003\ufdd0\011" +
    "\ufdd0\030\ufdd0\031\ufdd0\034\ufdd0\056\ufdd0\060\ufdd0\061\ufdd0" +
    "\062\ufdd0\065\ufdd0\066\ufdd0\074\ufdd0\100\ufdd0\101\ufdd0\106" +
    "\ufdd0\113\ufdd0\121\ufdd0\123\ufdd0\130\ufdd0\133\ufdd0\134\ufdd0" +
    "\135\ufdd0\001\002\000\060\002\ufdd1\003\ufdd1\011\ufdd1\030" +
    "\ufdd1\031\ufdd1\034\ufdd1\056\ufdd1\060\ufdd1\061\ufdd1\062\ufdd1" +
    "\065\ufdd1\066\ufdd1\074\ufdd1\100\ufdd1\101\ufdd1\106\ufdd1\113" +
    "\ufdd1\121\ufdd1\123\ufdd1\130\ufdd1\133\ufdd1\134\ufdd1\135\ufdd1" +
    "\001\002\000\060\002\ufdd2\003\ufdd2\011\ufdd2\030\ufdd2\031" +
    "\ufdd2\034\ufdd2\056\ufdd2\060\ufdd2\061\ufdd2\062\ufdd2\065\ufdd2" +
    "\066\ufdd2\074\ufdd2\100\ufdd2\101\ufdd2\106\ufdd2\113\ufdd2\121" +
    "\ufdd2\123\ufdd2\130\ufdd2\133\ufdd2\134\ufdd2\135\ufdd2\001\002" +
    "\000\024\005\051\006\053\007\063\011\u0180\012\u017a\036" +
    "\047\100\u016f\101\u0157\121\u017b\001\002\000\024\005\051" +
    "\006\053\007\063\011\u0180\012\u017a\036\047\100\u016f\101" +
    "\u0157\121\u017b\001\002\000\024\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\024\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\100\u016f\101\u0157\121\u017b\001\002\000\024\005" +
    "\051\006\053\007\063\011\u0180\012\u017a\036\047\100\u016f" +
    "\101\u0157\121\u017b\001\002\000\024\005\051\006\053\007" +
    "\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b" +
    "\001\002\000\024\005\051\006\053\007\063\011\u0180\012" +
    "\u017a\036\047\100\u016f\101\u0157\121\u017b\001\002\000\024" +
    "\005\051\006\053\007\063\011\u0180\012\u017a\036\047\100" +
    "\u016f\101\u0157\121\u017b\001\002\000\024\005\051\006\053" +
    "\007\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121" +
    "\u017b\001\002\000\024\005\051\006\053\007\063\011\u0180" +
    "\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\024\005\051\006\053\007\063\011\u0180\012\u017a\036\047" +
    "\100\u016f\101\u0157\121\u017b\001\002\000\026\003\ufdb2\015" +
    "\ufdb2\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f\051\ufdb2" +
    "\053\ufdb2\067\ufdb2\001\002\000\026\003\ufdb1\015\ufdb1\035" +
    "\u0191\036\u018d\037\u0190\040\u0194\041\u018f\051\ufdb1\053\ufdb1" +
    "\067\ufdb1\001\002\000\046\003\ufdb8\015\ufdb8\022\ufdb8\035" +
    "\ufdb8\036\ufdb8\037\ufdb8\040\ufdb8\041\ufdb8\042\ufdb8\043\ufdb8" +
    "\045\ufdb8\046\ufdb8\047\ufdb8\050\ufdb8\051\ufdb8\053\ufdb8\064" +
    "\ufdb8\067\ufdb8\001\002\000\026\003\ufdae\015\ufdae\035\u0191" +
    "\036\u018d\037\u0190\040\u0194\041\u018f\051\ufdae\053\ufdae\067" +
    "\ufdae\001\002\000\026\003\ufdad\015\ufdad\035\u0191\036\u018d" +
    "\037\u0190\040\u0194\041\u018f\051\ufdad\053\ufdad\067\ufdad\001" +
    "\002\000\046\003\ufdba\015\ufdba\022\ufdba\035\ufdba\036\ufdba" +
    "\037\u0190\040\u0194\041\u018f\042\ufdba\043\ufdba\045\ufdba\046" +
    "\ufdba\047\ufdba\050\ufdba\051\ufdba\053\ufdba\064\ufdba\067\ufdba" +
    "\001\002\000\046\003\ufdb7\015\ufdb7\022\ufdb7\035\ufdb7\036" +
    "\ufdb7\037\ufdb7\040\ufdb7\041\ufdb7\042\ufdb7\043\ufdb7\045\ufdb7" +
    "\046\ufdb7\047\ufdb7\050\ufdb7\051\ufdb7\053\ufdb7\064\ufdb7\067" +
    "\ufdb7\001\002\000\046\003\ufdb6\015\ufdb6\022\ufdb6\035\ufdb6" +
    "\036\ufdb6\037\ufdb6\040\ufdb6\041\ufdb6\042\ufdb6\043\ufdb6\045" +
    "\ufdb6\046\ufdb6\047\ufdb6\050\ufdb6\051\ufdb6\053\ufdb6\064\ufdb6" +
    "\067\ufdb6\001\002\000\026\003\ufdb0\015\ufdb0\035\u0191\036" +
    "\u018d\037\u0190\040\u0194\041\u018f\051\ufdb0\053\ufdb0\067\ufdb0" +
    "\001\002\000\046\003\ufdb9\015\ufdb9\022\ufdb9\035\ufdb9\036" +
    "\ufdb9\037\u0190\040\u0194\041\u018f\042\ufdb9\043\ufdb9\045\ufdb9" +
    "\046\ufdb9\047\ufdb9\050\ufdb9\051\ufdb9\053\ufdb9\064\ufdb9\067" +
    "\ufdb9\001\002\000\026\003\ufdaf\015\ufdaf\035\u0191\036\u018d" +
    "\037\u0190\040\u0194\041\u018f\051\ufdaf\053\ufdaf\067\ufdaf\001" +
    "\002\000\004\011\u01a3\001\002\000\004\072\u01a4\001\002" +
    "\000\004\011\u01a5\001\002\000\004\012\u01a6\001\002\000" +
    "\026\005\051\006\053\007\063\011\u0180\012\u017a\015\ufda5" +
    "\036\047\100\u016f\101\u0157\121\u017b\001\002\000\004\015" +
    "\u01ac\001\002\000\022\003\ufda3\015\ufda3\022\ufda3\035\u0191" +
    "\036\u018d\037\u0190\040\u0194\041\u018f\001\002\000\010\003" +
    "\ufda6\015\ufda6\022\u01aa\001\002\000\024\005\051\006\053" +
    "\007\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121" +
    "\u017b\001\002\000\022\003\ufda4\015\ufda4\022\ufda4\035\u0191" +
    "\036\u018d\037\u0190\040\u0194\041\u018f\001\002\000\046\003" +
    "\ufda9\015\ufda9\022\ufda9\035\ufda9\036\ufda9\037\ufda9\040\ufda9" +
    "\041\ufda9\042\ufda9\043\ufda9\045\ufda9\046\ufda9\047\ufda9\050" +
    "\ufda9\051\ufda9\053\ufda9\064\ufda9\067\ufda9\001\002\000\016" +
    "\015\u01ae\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f\001" +
    "\002\000\046\003\ufdb5\015\ufdb5\022\ufdb5\035\ufdb5\036\ufdb5" +
    "\037\ufdb5\040\ufdb5\041\ufdb5\042\ufdb5\043\ufdb5\045\ufdb5\046" +
    "\ufdb5\047\ufdb5\050\ufdb5\051\ufdb5\053\ufdb5\064\ufdb5\067\ufdb5" +
    "\001\002\000\004\011\u01b0\001\002\000\004\012\u01b1\001" +
    "\002\000\026\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\015\ufda5\036\047\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\004\015\u01b3\001\002\000\046\003\ufda8\015\ufda8\022\ufda8" +
    "\035\ufda8\036\ufda8\037\ufda8\040\ufda8\041\ufda8\042\ufda8\043" +
    "\ufda8\045\ufda8\046\ufda8\047\ufda8\050\ufda8\051\ufda8\053\ufda8" +
    "\064\ufda8\067\ufda8\001\002\000\004\067\ufe23\001\002\000" +
    "\026\003\u01b7\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\100\u016f\101\u0157\121\u017b\001\002\000\016\035" +
    "\u0191\036\u018d\037\u0190\040\u0194\041\u018f\067\ufe25\001\002" +
    "\000\004\067\ufe24\001\002\000\004\057\u01c9\001\002\000" +
    "\030\003\u01bb\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\052\u0182\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\012\003\u01c0\015\u01bf\051\u0184\053\u0185\001\002\000\004" +
    "\057\u01bc\001\002\000\046\011\u0160\030\u015f\031\u0169\034" +
    "\u0159\056\ufe36\060\035\061\024\062\032\065\u0163\066\u0151" +
    "\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133" +
    "\u0164\134\u0155\001\002\000\004\056\u01be\001\002\000\060" +
    "\002\ufdd4\003\ufdd4\011\ufdd4\030\ufdd4\031\ufdd4\034\ufdd4\056" +
    "\ufdd4\060\ufdd4\061\ufdd4\062\ufdd4\065\ufdd4\066\ufdd4\074\ufdd4" +
    "\100\ufdd4\101\ufdd4\106\ufdd4\113\ufdd4\121\ufdd4\123\ufdd4\130" +
    "\ufdd4\133\ufdd4\134\ufdd4\135\ufdd4\001\002\000\006\003\u01c4" +
    "\057\u01c5\001\002\000\004\057\u01c1\001\002\000\046\011" +
    "\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061\024" +
    "\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121" +
    "\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\004" +
    "\056\u01c3\001\002\000\060\002\ufdd5\003\ufdd5\011\ufdd5\030" +
    "\ufdd5\031\ufdd5\034\ufdd5\056\ufdd5\060\ufdd5\061\ufdd5\062\ufdd5" +
    "\065\ufdd5\066\ufdd5\074\ufdd5\100\ufdd5\101\ufdd5\106\ufdd5\113" +
    "\ufdd5\121\ufdd5\123\ufdd5\130\ufdd5\133\ufdd5\134\ufdd5\135\ufdd5" +
    "\001\002\000\060\002\ufdd6\003\ufdd6\011\ufdd6\030\ufdd6\031" +
    "\ufdd6\034\ufdd6\056\ufdd6\060\ufdd6\061\ufdd6\062\ufdd6\065\ufdd6" +
    "\066\ufdd6\074\ufdd6\100\ufdd6\101\ufdd6\106\ufdd6\113\ufdd6\121" +
    "\ufdd6\123\ufdd6\130\ufdd6\133\ufdd6\134\ufdd6\135\ufdd6\001\002" +
    "\000\050\003\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\056" +
    "\ufe36\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170" +
    "\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134" +
    "\u0155\001\002\000\006\003\u01c7\056\u01c8\001\002\000\060" +
    "\002\ufdd7\003\ufdd7\011\ufdd7\030\ufdd7\031\ufdd7\034\ufdd7\056" +
    "\ufdd7\060\ufdd7\061\ufdd7\062\ufdd7\065\ufdd7\066\ufdd7\074\ufdd7" +
    "\100\ufdd7\101\ufdd7\106\ufdd7\113\ufdd7\121\ufdd7\123\ufdd7\130" +
    "\ufdd7\133\ufdd7\134\ufdd7\135\ufdd7\001\002\000\060\002\ufdd8" +
    "\003\ufdd8\011\ufdd8\030\ufdd8\031\ufdd8\034\ufdd8\056\ufdd8\060" +
    "\ufdd8\061\ufdd8\062\ufdd8\065\ufdd8\066\ufdd8\074\ufdd8\100\ufdd8" +
    "\101\ufdd8\106\ufdd8\113\ufdd8\121\ufdd8\123\ufdd8\130\ufdd8\133" +
    "\ufdd8\134\ufdd8\135\ufdd8\001\002\000\046\011\u0160\030\u015f" +
    "\031\u0169\034\u0159\056\ufe36\060\035\061\024\062\032\065" +
    "\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162" +
    "\130\u0165\133\u0164\134\u0155\001\002\000\004\056\u01cb\001" +
    "\002\000\060\002\ufdd3\003\ufdd3\011\ufdd3\030\ufdd3\031\ufdd3" +
    "\034\ufdd3\056\ufdd3\060\ufdd3\061\ufdd3\062\ufdd3\065\ufdd3\066" +
    "\ufdd3\074\ufdd3\100\ufdd3\101\ufdd3\106\ufdd3\113\ufdd3\121\ufdd3" +
    "\123\ufdd3\130\ufdd3\133\ufdd3\134\ufdd3\135\ufdd3\001\002\000" +
    "\060\002\ufe2e\003\ufe2e\011\ufe2e\030\ufe2e\031\ufe2e\034\ufe2e" +
    "\056\ufe2e\060\ufe2e\061\ufe2e\062\ufe2e\065\ufe2e\066\ufe2e\074" +
    "\ufe2e\100\ufe2e\101\ufe2e\106\ufe2e\113\ufe2e\121\ufe2e\123\ufe2e" +
    "\130\ufe2e\133\ufe2e\134\ufe2e\135\ufe2e\001\002\000\004\067" +
    "\ufdf4\001\002\000\006\003\u01d0\015\u01cf\001\002\000\004" +
    "\067\ufdf6\001\002\000\004\067\ufdf5\001\002\000\004\057" +
    "\u01e5\001\002\000\026\003\u01d4\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\020\003\u01dc\015\u01db\035\u0191\036\u018d\037\u0190" +
    "\040\u0194\041\u018f\001\002\000\004\057\u01d5\001\002\000" +
    "\010\003\u0144\113\u0146\135\u0142\001\002\000\012\003\u0144" +
    "\056\u01d8\113\u0146\135\u0142\001\002\000\004\016\u01d9\001" +
    "\002\000\060\002\ufdc7\003\ufdc7\011\ufdc7\030\ufdc7\031\ufdc7" +
    "\034\ufdc7\056\ufdc7\060\ufdc7\061\ufdc7\062\ufdc7\065\ufdc7\066" +
    "\ufdc7\074\ufdc7\100\ufdc7\101\ufdc7\106\ufdc7\113\ufdc7\121\ufdc7" +
    "\123\ufdc7\130\ufdc7\133\ufdc7\134\ufdc7\135\ufdc7\001\002\000" +
    "\060\003\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36" +
    "\057\u0158\060\035\061\024\062\032\065\u0163\066\u0151\074" +
    "\u0170\100\u016f\101\u0157\106\ufe36\113\ufe36\121\u0152\123\u0162" +
    "\130\u0165\133\u0164\134\u0155\135\ufe36\001\002\000\014\003" +
    "\ufdc5\056\ufdc5\106\ufdc5\113\ufdc5\135\ufdc5\001\002\000\004" +
    "\057\u01e0\001\002\000\004\057\u01dd\001\002\000\010\003" +
    "\u0144\113\u0146\135\u0142\001\002\000\012\003\u0144\056\u01df" +
    "\113\u0146\135\u0142\001\002\000\060\002\ufdc8\003\ufdc8\011" +
    "\ufdc8\030\ufdc8\031\ufdc8\034\ufdc8\056\ufdc8\060\ufdc8\061\ufdc8" +
    "\062\ufdc8\065\ufdc8\066\ufdc8\074\ufdc8\100\ufdc8\101\ufdc8\106" +
    "\ufdc8\113\ufdc8\121\ufdc8\123\ufdc8\130\ufdc8\133\ufdc8\134\ufdc8" +
    "\135\ufdc8\001\002\000\010\003\u01e2\113\u0146\135\u0142\001" +
    "\002\000\012\003\u01e3\056\u01e4\113\u0146\135\u0142\001\002" +
    "\000\062\002\ufdc9\003\ufdc9\011\ufdc9\016\ufdbd\030\ufdc9\031" +
    "\ufdc9\034\ufdc9\056\ufdc9\060\ufdc9\061\ufdc9\062\ufdc9\065\ufdc9" +
    "\066\ufdc9\074\ufdc9\100\ufdc9\101\ufdc9\106\ufdc9\113\ufdc9\121" +
    "\ufdc9\123\ufdc9\130\ufdc9\133\ufdc9\134\ufdc9\135\ufdc9\001\002" +
    "\000\062\002\ufdca\003\ufdca\011\ufdca\016\ufdbd\030\ufdca\031" +
    "\ufdca\034\ufdca\056\ufdca\060\ufdca\061\ufdca\062\ufdca\065\ufdca" +
    "\066\ufdca\074\ufdca\100\ufdca\101\ufdca\106\ufdca\113\ufdca\121" +
    "\ufdca\123\ufdca\130\ufdca\133\ufdca\134\ufdca\135\ufdca\001\002" +
    "\000\060\002\ufdcb\003\ufdcb\011\ufdcb\030\ufdcb\031\ufdcb\034" +
    "\ufdcb\056\ufdcb\060\ufdcb\061\ufdcb\062\ufdcb\065\ufdcb\066\ufdcb" +
    "\074\ufdcb\100\ufdcb\101\ufdcb\106\ufdcb\113\ufdcb\121\ufdcb\123" +
    "\ufdcb\130\ufdcb\133\ufdcb\134\ufdcb\135\ufdcb\001\002\000\010" +
    "\003\u0144\113\u0146\135\u0142\001\002\000\012\003\u0144\056" +
    "\u01e7\113\u0146\135\u0142\001\002\000\060\002\ufdc6\003\ufdc6" +
    "\011\ufdc6\030\ufdc6\031\ufdc6\034\ufdc6\056\ufdc6\060\ufdc6\061" +
    "\ufdc6\062\ufdc6\065\ufdc6\066\ufdc6\074\ufdc6\100\ufdc6\101\ufdc6" +
    "\106\ufdc6\113\ufdc6\121\ufdc6\123\ufdc6\130\ufdc6\133\ufdc6\134" +
    "\ufdc6\135\ufdc6\001\002\000\004\067\ufe1b\001\002\000\016" +
    "\003\u01f0\007\u01f3\021\u01ea\102\u01ec\103\u01ed\104\u01f2\001" +
    "\002\000\022\003\ufe05\007\ufe05\015\ufe05\021\ufe05\022\ufe05" +
    "\102\ufe05\103\ufe05\104\ufe05\001\002\000\022\003\ufe17\007" +
    "\ufe17\015\ufe17\021\ufe17\022\ufe17\102\ufe17\103\ufe17\104\ufe17" +
    "\001\002\000\022\003\ufe02\007\ufe02\015\ufe02\021\ufe02\022" +
    "\ufe02\102\ufe02\103\ufe02\104\ufe02\001\002\000\022\003\ufe03" +
    "\007\ufe03\015\ufe03\021\ufe03\022\ufe03\102\ufe03\103\ufe03\104" +
    "\ufe03\001\002\000\022\003\ufe07\007\ufe07\015\ufe07\021\ufe07" +
    "\022\ufe07\102\ufe07\103\ufe07\104\ufe07\001\002\000\022\003" +
    "\u01f6\007\u01f3\015\u01f7\021\u01ea\022\u01f5\102\u01ec\103\u01ed" +
    "\104\u01f2\001\002\000\004\067\ufe1c\001\002\000\022\003" +
    "\ufe06\007\ufe06\015\ufe06\021\ufe06\022\ufe06\102\ufe06\103\ufe06" +
    "\104\ufe06\001\002\000\022\003\ufe01\007\ufe01\015\ufe01\021" +
    "\ufe01\022\ufe01\102\ufe01\103\ufe01\104\ufe01\001\002\000\022" +
    "\003\ufe04\007\ufe04\015\ufe04\021\ufe04\022\ufe04\102\ufe04\103" +
    "\ufe04\104\ufe04\001\002\000\022\003\ufe18\007\ufe18\015\ufe18" +
    "\021\ufe18\022\ufe18\102\ufe18\103\ufe18\104\ufe18\001\002\000" +
    "\030\003\u01fb\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\070\u01f9\100\u016f\101\u0157\121\u017b\001\002\000" +
    "\004\067\ufe1d\001\002\000\004\067\ufe1f\001\002\000\022" +
    "\003\ufe15\015\ufe15\022\ufe15\035\u0191\036\u018d\037\u0190\040" +
    "\u0194\041\u018f\001\002\000\026\003\u0205\005\051\006\053" +
    "\007\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121" +
    "\u017b\001\002\000\010\003\u01fe\015\u01fd\022\u01fc\001\002" +
    "\000\004\067\ufe19\001\002\000\030\003\u0201\005\051\006" +
    "\053\007\063\011\u0180\012\u017a\036\047\070\u0200\100\u016f" +
    "\101\u0157\121\u017b\001\002\000\004\067\ufe1e\001\002\000" +
    "\004\067\ufe1a\001\002\000\022\003\ufe16\015\ufe16\022\ufe16" +
    "\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f\001\002\000" +
    "\026\003\u0203\005\051\006\053\007\063\011\u0180\012\u017a" +
    "\036\047\100\u016f\101\u0157\121\u017b\001\002\000\010\003" +
    "\ufe10\015\ufe10\022\ufe10\001\002\000\022\003\ufe14\015\ufe14" +
    "\022\ufe14\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f\001" +
    "\002\000\010\003\ufe11\015\ufe11\022\ufe11\001\002\000\022" +
    "\003\ufe13\015\ufe13\022\ufe13\035\u0191\036\u018d\037\u0190\040" +
    "\u0194\041\u018f\001\002\000\010\003\ufe12\015\ufe12\022\ufe12" +
    "\001\002\000\060\002\ufe35\003\ufe35\011\ufe35\030\ufe35\031" +
    "\ufe35\034\ufe35\056\ufe35\060\ufe35\061\ufe35\062\ufe35\065\ufe35" +
    "\066\ufe35\074\ufe35\100\ufe35\101\ufe35\106\ufe35\113\ufe35\121" +
    "\ufe35\123\ufe35\130\ufe35\133\ufe35\134\ufe35\135\ufe35\001\002" +
    "\000\016\003\ufe4f\011\ufe4f\015\ufe4f\044\ufe4f\063\u020d\067" +
    "\ufe4f\001\002\000\026\003\u020a\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\016\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f" +
    "\064\u020c\001\002\000\004\064\u020b\001\002\000\016\003" +
    "\ufe4c\011\ufe4c\015\ufe4c\044\ufe4c\063\ufe4c\067\ufe4c\001\002" +
    "\000\016\003\ufe4d\011\ufe4d\015\ufe4d\044\ufe4d\063\ufe4d\067" +
    "\ufe4d\001\002\000\026\003\u020f\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\016\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f" +
    "\064\u0211\001\002\000\004\064\u0210\001\002\000\016\003" +
    "\ufe4b\011\ufe4b\015\ufe4b\044\ufe4b\063\ufe4b\067\ufe4b\001\002" +
    "\000\016\003\ufe4e\011\ufe4e\015\ufe4e\044\ufe4e\063\ufe4e\067" +
    "\ufe4e\001\002\000\004\057\u0240\001\002\000\030\003\u0215" +
    "\005\051\006\053\007\063\011\u0180\012\u017a\036\047\052" +
    "\u0182\100\u016f\101\u0157\121\u017b\001\002\000\012\003\u021a" +
    "\015\u0219\051\u0184\053\u0185\001\002\000\004\057\u0216\001" +
    "\002\000\046\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36" +
    "\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170\100" +
    "\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155" +
    "\001\002\000\004\056\u0218\001\002\000\060\002\ufdee\003" +
    "\ufdee\011\ufdee\030\ufdee\031\ufdee\034\ufdee\056\ufdee\060\ufdee" +
    "\061\ufdee\062\ufdee\065\ufdee\066\ufdee\074\ufdee\100\ufdee\101" +
    "\ufdee\106\ufdee\113\ufdee\121\ufdee\123\ufdee\130\ufdee\133\ufdee" +
    "\134\ufdee\135\ufdee\001\002\000\006\003\u021e\057\u021f\001" +
    "\002\000\004\057\u021b\001\002\000\046\011\u0160\030\u015f" +
    "\031\u0169\034\u0159\056\ufe36\060\035\061\024\062\032\065" +
    "\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162" +
    "\130\u0165\133\u0164\134\u0155\001\002\000\004\056\u021d\001" +
    "\002\000\060\002\ufdef\003\ufdef\011\ufdef\030\ufdef\031\ufdef" +
    "\034\ufdef\056\ufdef\060\ufdef\061\ufdef\062\ufdef\065\ufdef\066" +
    "\ufdef\074\ufdef\100\ufdef\101\ufdef\106\ufdef\113\ufdef\121\ufdef" +
    "\123\ufdef\130\ufdef\133\ufdef\134\ufdef\135\ufdef\001\002\000" +
    "\060\002\ufdf0\003\ufdf0\011\ufdf0\030\ufdf0\031\ufdf0\034\ufdf0" +
    "\056\ufdf0\060\ufdf0\061\ufdf0\062\ufdf0\065\ufdf0\066\ufdf0\074" +
    "\ufdf0\100\ufdf0\101\ufdf0\106\ufdf0\113\ufdf0\121\ufdf0\123\ufdf0" +
    "\130\ufdf0\133\ufdf0\134\ufdf0\135\ufdf0\001\002\000\050\003" +
    "\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035" +
    "\061\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101" +
    "\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002" +
    "\000\006\003\u0221\056\u0222\001\002\000\060\002\ufdf1\003" +
    "\ufdf1\011\ufdf1\030\ufdf1\031\ufdf1\034\ufdf1\056\ufdf1\060\ufdf1" +
    "\061\ufdf1\062\ufdf1\065\ufdf1\066\ufdf1\074\ufdf1\100\ufdf1\101" +
    "\ufdf1\106\ufdf1\113\ufdf1\121\ufdf1\123\ufdf1\130\ufdf1\133\ufdf1" +
    "\134\ufdf1\135\ufdf1\001\002\000\062\002\ufdea\003\ufdea\011" +
    "\ufdea\027\u0224\030\ufdea\031\ufdea\034\ufdea\056\ufdea\060\ufdea" +
    "\061\ufdea\062\ufdea\065\ufdea\066\ufdea\074\ufdea\100\ufdea\101" +
    "\ufdea\106\ufdea\113\ufdea\121\ufdea\123\ufdea\130\ufdea\133\ufdea" +
    "\134\ufdea\135\ufdea\001\002\000\060\002\ufdf2\003\ufdf2\011" +
    "\ufdf2\030\ufdf2\031\ufdf2\034\ufdf2\056\ufdf2\060\ufdf2\061\ufdf2" +
    "\062\ufdf2\065\ufdf2\066\ufdf2\074\ufdf2\100\ufdf2\101\ufdf2\106" +
    "\ufdf2\113\ufdf2\121\ufdf2\123\ufdf2\130\ufdf2\133\ufdf2\134\ufdf2" +
    "\135\ufdf2\001\002\000\010\003\u0225\030\u0226\057\u0227\001" +
    "\002\000\060\002\ufde3\003\ufde3\011\ufde3\030\ufde3\031\ufde3" +
    "\034\ufde3\056\ufde3\060\ufde3\061\ufde3\062\ufde3\065\ufde3\066" +
    "\ufde3\074\ufde3\100\ufde3\101\ufde3\106\ufde3\113\ufde3\121\ufde3" +
    "\123\ufde3\130\ufde3\133\ufde3\134\ufde3\135\ufde3\001\002\000" +
    "\006\003\u022b\012\u022c\001\002\000\050\003\ufe36\011\u0160" +
    "\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061\024\062" +
    "\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152" +
    "\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\006\003" +
    "\u0229\056\u022a\001\002\000\060\002\ufde4\003\ufde4\011\ufde4" +
    "\030\ufde4\031\ufde4\034\ufde4\056\ufde4\060\ufde4\061\ufde4\062" +
    "\ufde4\065\ufde4\066\ufde4\074\ufde4\100\ufde4\101\ufde4\106\ufde4" +
    "\113\ufde4\121\ufde4\123\ufde4\130\ufde4\133\ufde4\134\ufde4\135" +
    "\ufde4\001\002\000\060\002\ufdeb\003\ufdeb\011\ufdeb\030\ufdeb" +
    "\031\ufdeb\034\ufdeb\056\ufdeb\060\ufdeb\061\ufdeb\062\ufdeb\065" +
    "\ufdeb\066\ufdeb\074\ufdeb\100\ufdeb\101\ufdeb\106\ufdeb\113\ufdeb" +
    "\121\ufdeb\123\ufdeb\130\ufdeb\133\ufdeb\134\ufdeb\135\ufdeb\001" +
    "\002\000\004\057\u023d\001\002\000\030\003\u022e\005\051" +
    "\006\053\007\063\011\u0180\012\u017a\036\047\052\u0182\100" +
    "\u016f\101\u0157\121\u017b\001\002\000\012\003\u0233\015\u0232" +
    "\051\u0184\053\u0185\001\002\000\004\057\u022f\001\002\000" +
    "\046\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035" +
    "\061\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101" +
    "\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002" +
    "\000\004\056\u0231\001\002\000\060\002\ufde6\003\ufde6\011" +
    "\ufde6\030\ufde6\031\ufde6\034\ufde6\056\ufde6\060\ufde6\061\ufde6" +
    "\062\ufde6\065\ufde6\066\ufde6\074\ufde6\100\ufde6\101\ufde6\106" +
    "\ufde6\113\ufde6\121\ufde6\123\ufde6\130\ufde6\133\ufde6\134\ufde6" +
    "\135\ufde6\001\002\000\006\003\u0237\057\u0238\001\002\000" +
    "\004\057\u0234\001\002\000\046\011\u0160\030\u015f\031\u0169" +
    "\034\u0159\056\ufe36\060\035\061\024\062\032\065\u0163\066" +
    "\u0151\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165" +
    "\133\u0164\134\u0155\001\002\000\004\056\u0236\001\002\000" +
    "\060\002\ufde7\003\ufde7\011\ufde7\030\ufde7\031\ufde7\034\ufde7" +
    "\056\ufde7\060\ufde7\061\ufde7\062\ufde7\065\ufde7\066\ufde7\074" +
    "\ufde7\100\ufde7\101\ufde7\106\ufde7\113\ufde7\121\ufde7\123\ufde7" +
    "\130\ufde7\133\ufde7\134\ufde7\135\ufde7\001\002\000\060\002" +
    "\ufde8\003\ufde8\011\ufde8\030\ufde8\031\ufde8\034\ufde8\056\ufde8" +
    "\060\ufde8\061\ufde8\062\ufde8\065\ufde8\066\ufde8\074\ufde8\100" +
    "\ufde8\101\ufde8\106\ufde8\113\ufde8\121\ufde8\123\ufde8\130\ufde8" +
    "\133\ufde8\134\ufde8\135\ufde8\001\002\000\050\003\ufe36\011" +
    "\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061\024" +
    "\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121" +
    "\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\006" +
    "\003\u023a\056\u023b\001\002\000\060\002\ufde9\003\ufde9\011" +
    "\ufde9\030\ufde9\031\ufde9\034\ufde9\056\ufde9\060\ufde9\061\ufde9" +
    "\062\ufde9\065\ufde9\066\ufde9\074\ufde9\100\ufde9\101\ufde9\106" +
    "\ufde9\113\ufde9\121\ufde9\123\ufde9\130\ufde9\133\ufde9\134\ufde9" +
    "\135\ufde9\001\002\000\062\002\ufdea\003\ufdea\011\ufdea\027" +
    "\u0224\030\ufdea\031\ufdea\034\ufdea\056\ufdea\060\ufdea\061\ufdea" +
    "\062\ufdea\065\ufdea\066\ufdea\074\ufdea\100\ufdea\101\ufdea\106" +
    "\ufdea\113\ufdea\121\ufdea\123\ufdea\130\ufdea\133\ufdea\134\ufdea" +
    "\135\ufdea\001\002\000\060\002\ufdec\003\ufdec\011\ufdec\030" +
    "\ufdec\031\ufdec\034\ufdec\056\ufdec\060\ufdec\061\ufdec\062\ufdec" +
    "\065\ufdec\066\ufdec\074\ufdec\100\ufdec\101\ufdec\106\ufdec\113" +
    "\ufdec\121\ufdec\123\ufdec\130\ufdec\133\ufdec\134\ufdec\135\ufdec" +
    "\001\002\000\046\011\u0160\030\u015f\031\u0169\034\u0159\056" +
    "\ufe36\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170" +
    "\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134" +
    "\u0155\001\002\000\004\056\u023f\001\002\000\060\002\ufde5" +
    "\003\ufde5\011\ufde5\030\ufde5\031\ufde5\034\ufde5\056\ufde5\060" +
    "\ufde5\061\ufde5\062\ufde5\065\ufde5\066\ufde5\074\ufde5\100\ufde5" +
    "\101\ufde5\106\ufde5\113\ufde5\121\ufde5\123\ufde5\130\ufde5\133" +
    "\ufde5\134\ufde5\135\ufde5\001\002\000\046\011\u0160\030\u015f" +
    "\031\u0169\034\u0159\056\ufe36\060\035\061\024\062\032\065" +
    "\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162" +
    "\130\u0165\133\u0164\134\u0155\001\002\000\004\056\u0242\001" +
    "\002\000\060\002\ufded\003\ufded\011\ufded\030\ufded\031\ufded" +
    "\034\ufded\056\ufded\060\ufded\061\ufded\062\ufded\065\ufded\066" +
    "\ufded\074\ufded\100\ufded\101\ufded\106\ufded\113\ufded\121\ufded" +
    "\123\ufded\130\ufded\133\ufded\134\ufded\135\ufded\001\002\000" +
    "\014\003\ufe45\022\ufe45\044\u024b\063\u0208\067\ufe45\001\002" +
    "\000\010\003\ufe55\011\u024f\067\ufe55\001\002\000\006\003" +
    "\ufe54\067\ufe54\001\002\000\010\003\ufe50\011\ufe50\067\ufe50" +
    "\001\002\000\010\003\ufe57\022\u0248\067\ufe57\001\002\000" +
    "\006\003\u024a\011\u0249\001\002\000\012\003\ufe45\022\ufe45" +
    "\044\u024b\067\ufe45\001\002\000\010\003\ufe48\022\ufe48\067" +
    "\ufe48\001\002\000\026\003\u024e\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\010\003\ufe4a\022\ufe4a\067\ufe4a\001\002\000\022" +
    "\003\ufe47\022\ufe47\035\u0191\036\u018d\037\u0190\040\u0194\041" +
    "\u018f\067\ufe47\001\002\000\010\003\ufe46\022\ufe46\067\ufe46" +
    "\001\002\000\004\063\u0208\001\002\000\010\003\ufe51\011" +
    "\ufe51\067\ufe51\001\002\000\010\003\ufe49\022\ufe49\067\ufe49" +
    "\001\002\000\010\060\035\061\024\062\032\001\002\000" +
    "\004\011\u0254\001\002\000\026\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\044\u0256\100\u016f\101\u0157\121" +
    "\u017b\001\002\000\016\035\u0191\036\u018d\037\u0190\040\u0194" +
    "\041\u018f\067\u0267\001\002\000\024\005\051\006\053\007" +
    "\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157\121\u017b" +
    "\001\002\000\016\035\u0191\036\u018d\037\u0190\040\u0194\041" +
    "\u018f\067\u0258\001\002\000\026\005\051\006\053\007\063" +
    "\011\u0180\012\u017a\036\047\052\u0182\100\u016f\101\u0157\121" +
    "\u017b\001\002\000\010\051\u0184\053\u0185\067\u025a\001\002" +
    "\000\004\011\u025b\001\002\000\012\003\u025d\044\u025e\076" +
    "\u025c\077\u025f\001\002\000\006\003\ufddc\015\ufddc\001\002" +
    "\000\004\015\ufdd9\001\002\000\026\003\u0266\005\051\006" +
    "\053\007\063\011\u0180\012\u017a\036\047\100\u016f\101\u0157" +
    "\121\u017b\001\002\000\006\003\ufddb\015\ufddb\001\002\000" +
    "\004\015\u0261\001\002\000\004\057\u0262\001\002\000\046" +
    "\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061" +
    "\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157" +
    "\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000" +
    "\004\056\u0264\001\002\000\060\002\ufde2\003\ufde2\011\ufde2" +
    "\030\ufde2\031\ufde2\034\ufde2\056\ufde2\060\ufde2\061\ufde2\062" +
    "\ufde2\065\ufde2\066\ufde2\074\ufde2\100\ufde2\101\ufde2\106\ufde2" +
    "\113\ufde2\121\ufde2\123\ufde2\130\ufde2\133\ufde2\134\ufde2\135" +
    "\ufde2\001\002\000\020\003\ufddd\015\ufddd\035\u0191\036\u018d" +
    "\037\u0190\040\u0194\041\u018f\001\002\000\006\003\ufdda\015" +
    "\ufdda\001\002\000\026\005\051\006\053\007\063\011\u0180" +
    "\012\u017a\036\047\052\u0182\100\u016f\101\u0157\121\u017b\001" +
    "\002\000\010\051\u0184\053\u0185\067\u0269\001\002\000\004" +
    "\011\u026a\001\002\000\012\003\u026b\044\u025e\076\u025c\077" +
    "\u025f\001\002\000\010\003\ufdd9\015\ufdd9\057\u0276\001\002" +
    "\000\006\003\u026e\015\u026d\001\002\000\006\003\u0272\057" +
    "\u0273\001\002\000\004\057\u026f\001\002\000\046\011\u0160" +
    "\030\u015f\031\u0169\034\u0159\056\ufe36\060\035\061\024\062" +
    "\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152" +
    "\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\004\056" +
    "\u0271\001\002\000\060\002\ufddf\003\ufddf\011\ufddf\030\ufddf" +
    "\031\ufddf\034\ufddf\056\ufddf\060\ufddf\061\ufddf\062\ufddf\065" +
    "\ufddf\066\ufddf\074\ufddf\100\ufddf\101\ufddf\106\ufddf\113\ufddf" +
    "\121\ufddf\123\ufddf\130\ufddf\133\ufddf\134\ufddf\135\ufddf\001" +
    "\002\000\060\002\ufde0\003\ufde0\011\ufde0\030\ufde0\031\ufde0" +
    "\034\ufde0\056\ufde0\060\ufde0\061\ufde0\062\ufde0\065\ufde0\066" +
    "\ufde0\074\ufde0\100\ufde0\101\ufde0\106\ufde0\113\ufde0\121\ufde0" +
    "\123\ufde0\130\ufde0\133\ufde0\134\ufde0\135\ufde0\001\002\000" +
    "\046\003\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\060\035" +
    "\061\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101" +
    "\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002" +
    "\000\004\003\u0275\001\002\000\060\002\ufde1\003\ufde1\011" +
    "\ufde1\030\ufde1\031\ufde1\034\ufde1\056\ufde1\060\ufde1\061\ufde1" +
    "\062\ufde1\065\ufde1\066\ufde1\074\ufde1\100\ufde1\101\ufde1\106" +
    "\ufde1\113\ufde1\121\ufde1\123\ufde1\130\ufde1\133\ufde1\134\ufde1" +
    "\135\ufde1\001\002\000\046\011\u0160\030\u015f\031\u0169\034" +
    "\u0159\056\ufe36\060\035\061\024\062\032\065\u0163\066\u0151" +
    "\074\u0170\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133" +
    "\u0164\134\u0155\001\002\000\004\056\u0278\001\002\000\060" +
    "\002\ufdde\003\ufdde\011\ufdde\030\ufdde\031\ufdde\034\ufdde\056" +
    "\ufdde\060\ufdde\061\ufdde\062\ufdde\065\ufdde\066\ufdde\074\ufdde" +
    "\100\ufdde\101\ufdde\106\ufdde\113\ufdde\121\ufdde\123\ufdde\130" +
    "\ufdde\133\ufdde\134\ufdde\135\ufdde\001\002\000\004\056\u027a" +
    "\001\002\000\014\003\ufdbc\056\ufdbc\106\ufdbc\113\ufdbc\135" +
    "\ufdbc\001\002\000\004\011\u027c\001\002\000\004\012\u027d" +
    "\001\002\000\026\005\051\006\053\007\063\011\u0180\012" +
    "\u017a\015\ufda5\036\047\100\u016f\101\u0157\121\u017b\001\002" +
    "\000\004\015\u027f\001\002\000\046\003\ufda7\015\ufda7\022" +
    "\ufda7\035\ufda7\036\ufda7\037\ufda7\040\ufda7\041\ufda7\042\ufda7" +
    "\043\ufda7\045\ufda7\046\ufda7\047\ufda7\050\ufda7\051\ufda7\053" +
    "\ufda7\064\ufda7\067\ufda7\001\002\000\004\067\ufdf7\001\002" +
    "\000\006\003\u0283\015\u0282\001\002\000\004\067\ufdf9\001" +
    "\002\000\004\067\ufdf8\001\002\000\006\003\u0287\011\u0286" +
    "\001\002\000\006\003\ufe52\067\ufe52\001\002\000\012\003" +
    "\ufe20\011\u0288\044\ufe20\072\u01a4\001\002\000\006\003\ufe53" +
    "\067\ufe53\001\002\000\012\003\ufe40\012\u028f\022\ufe40\067" +
    "\ufe40\001\002\000\010\003\ufe56\022\u028a\067\ufe56\001\002" +
    "\000\006\003\u028c\011\u028b\001\002\000\012\003\ufe40\012" +
    "\u028f\022\ufe40\067\ufe40\001\002\000\010\003\ufe42\022\ufe42" +
    "\067\ufe42\001\002\000\010\003\ufe41\022\ufe41\067\ufe41\001" +
    "\002\000\010\003\ufe44\022\ufe44\067\ufe44\001\002\000\030" +
    "\003\ufda5\005\051\006\053\007\063\011\u0180\012\u017a\015" +
    "\ufda5\036\047\100\u016f\101\u0157\121\u017b\001\002\000\006" +
    "\003\u0292\015\u0291\001\002\000\010\003\ufe3f\022\ufe3f\067" +
    "\ufe3f\001\002\000\010\003\ufe3e\022\ufe3e\067\ufe3e\001\002" +
    "\000\010\003\ufe43\022\ufe43\067\ufe43\001\002\000\004\067" +
    "\ufdfa\001\002\000\016\003\u0298\007\u01f3\021\u01ea\102\u01ec" +
    "\103\u01ed\104\u01f2\001\002\000\006\003\u02a1\022\u02a0\001" +
    "\002\000\012\003\u029c\102\u01ec\103\u01ed\104\u01f2\001\002" +
    "\000\014\003\ufe08\007\u01f3\021\u01ea\022\ufe08\067\ufdfb\001" +
    "\002\000\012\003\ufe0c\007\u01f3\021\u01ea\022\ufe0c\001\002" +
    "\000\006\003\ufe0e\022\ufe0e\001\002\000\006\003\ufe0a\022" +
    "\ufe0a\001\002\000\012\003\ufe0b\007\u01f3\021\u01ea\022\ufe0b" +
    "\001\002\000\012\003\ufe0f\007\u01f3\021\u01ea\022\ufe0f\001" +
    "\002\000\006\003\ufe0d\022\ufe0d\001\002\000\006\003\ufe09" +
    "\022\ufe09\001\002\000\006\003\u02a2\070\u02a3\001\002\000" +
    "\004\067\ufdfc\001\002\000\004\067\ufdfd\001\002\000\010" +
    "\003\u02a5\011\u0160\121\u02a6\001\002\000\006\003\u02aa\015" +
    "\u02a9\001\002\000\004\067\ufdfe\001\002\000\004\072\u02a7" +
    "\001\002\000\004\011\u02a8\001\002\000\006\003\ufe20\015" +
    "\ufe20\001\002\000\004\067\ufe00\001\002\000\004\067\ufdff" +
    "\001\002\000\054\003\uff27\011\uff27\024\uff27\025\uff27\026" +
    "\uff27\030\uff27\031\uff27\034\uff27\054\uff27\056\uff27\060\uff27" +
    "\061\uff27\062\uff27\074\uff27\113\uff27\123\uff27\125\uff27\126" +
    "\uff27\133\uff27\135\uff27\136\uff27\001\002\000\010\003\u0144" +
    "\113\u0146\135\u0142\001\002\000\012\003\u0144\056\u02ae\113" +
    "\u0146\135\u0142\001\002\000\054\003\uff28\011\uff28\024\uff28" +
    "\025\uff28\026\uff28\030\uff28\031\uff28\034\uff28\054\uff28\056" +
    "\uff28\060\uff28\061\uff28\062\uff28\074\uff28\113\uff28\123\uff28" +
    "\125\uff28\126\uff28\133\uff28\135\uff28\136\uff28\001\002\000" +
    "\020\011\uff5e\056\uff5e\060\uff5e\061\uff5e\062\uff5e\120\uff5e" +
    "\131\uff5e\001\002\000\054\003\uff4b\011\uff4b\024\uff4b\025" +
    "\uff4b\026\uff4b\030\uff4b\031\uff4b\034\uff4b\054\uff4b\056\uff4b" +
    "\060\uff4b\061\uff4b\062\uff4b\074\uff4b\113\uff4b\123\uff4b\125" +
    "\uff4b\126\uff4b\133\uff4b\135\uff4b\136\uff4b\001\002\000\004" +
    "\067\ufefd\001\002\000\016\035\065\036\066\037\070\040" +
    "\067\041\064\067\ufefe\001\002\000\004\057\u02c3\001\002" +
    "\000\024\003\u02b6\005\051\006\053\007\063\011\056\012" +
    "\044\036\047\052\221\125\057\001\002\000\012\003\u02bc" +
    "\015\u02bb\051\240\053\241\001\002\000\004\015\u02b7\001" +
    "\002\000\004\057\u02b8\001\002\000\046\011\156\024\052" +
    "\025\045\026\060\030\154\031\145\034\173\054\147\056" +
    "\uff53\060\035\061\024\062\032\074\161\123\164\125\157" +
    "\126\176\133\152\136\162\001\002\000\004\056\u02ba\001" +
    "\002\000\054\003\uff2b\011\uff2b\024\uff2b\025\uff2b\026\uff2b" +
    "\030\uff2b\031\uff2b\034\uff2b\054\uff2b\056\uff2b\060\uff2b\061" +
    "\uff2b\062\uff2b\074\uff2b\113\uff2b\123\uff2b\125\uff2b\126\uff2b" +
    "\133\uff2b\135\uff2b\136\uff2b\001\002\000\004\057\u02c0\001" +
    "\002\000\004\057\u02bd\001\002\000\046\011\156\024\052" +
    "\025\045\026\060\030\154\031\145\034\173\054\147\056" +
    "\uff53\060\035\061\024\062\032\074\161\123\164\125\157" +
    "\126\176\133\152\136\162\001\002\000\004\056\u02bf\001" +
    "\002\000\054\003\uff2a\011\uff2a\024\uff2a\025\uff2a\026\uff2a" +
    "\030\uff2a\031\uff2a\034\uff2a\054\uff2a\056\uff2a\060\uff2a\061" +
    "\uff2a\062\uff2a\074\uff2a\113\uff2a\123\uff2a\125\uff2a\126\uff2a" +
    "\133\uff2a\135\uff2a\136\uff2a\001\002\000\046\011\156\024" +
    "\052\025\045\026\060\030\154\031\145\034\173\054\147" +
    "\056\uff53\060\035\061\024\062\032\074\161\123\164\125" +
    "\157\126\176\133\152\136\162\001\002\000\004\056\u02c2" +
    "\001\002\000\054\003\uff2d\011\uff2d\024\uff2d\025\uff2d\026" +
    "\uff2d\030\uff2d\031\uff2d\034\uff2d\054\uff2d\056\uff2d\060\uff2d" +
    "\061\uff2d\062\uff2d\074\uff2d\113\uff2d\123\uff2d\125\uff2d\126" +
    "\uff2d\133\uff2d\135\uff2d\136\uff2d\001\002\000\046\011\156" +
    "\024\052\025\045\026\060\030\154\031\145\034\173\054" +
    "\147\056\uff53\060\035\061\024\062\032\074\161\123\164" +
    "\125\157\126\176\133\152\136\162\001\002\000\004\056" +
    "\u02c5\001\002\000\054\003\uff2c\011\uff2c\024\uff2c\025\uff2c" +
    "\026\uff2c\030\uff2c\031\uff2c\034\uff2c\054\uff2c\056\uff2c\060" +
    "\uff2c\061\uff2c\062\uff2c\074\uff2c\113\uff2c\123\uff2c\125\uff2c" +
    "\126\uff2c\133\uff2c\135\uff2c\136\uff2c\001\002\000\006\003" +
    "\u02ce\012\u02cf\001\002\000\004\012\u02c8\001\002\000\012" +
    "\015\uff5a\060\035\061\024\062\032\001\002\000\004\015" +
    "\u02ca\001\002\000\004\057\u02cb\001\002\000\046\011\156" +
    "\024\052\025\045\026\060\030\154\031\145\034\173\054" +
    "\147\056\uff53\060\035\061\024\062\032\074\161\123\164" +
    "\125\157\126\176\133\152\136\162\001\002\000\004\056" +
    "\u02cd\001\002\000\020\011\uff5d\056\uff5d\060\uff5d\061\uff5d" +
    "\062\uff5d\120\uff5d\131\uff5d\001\002\000\004\057\u02d5\001" +
    "\002\000\012\015\uff5a\060\035\061\024\062\032\001\002" +
    "\000\004\015\u02d1\001\002\000\004\057\u02d2\001\002\000" +
    "\046\011\156\024\052\025\045\026\060\030\154\031\145" +
    "\034\173\054\147\056\uff53\060\035\061\024\062\032\074" +
    "\161\123\164\125\157\126\176\133\152\136\162\001\002" +
    "\000\004\056\u02d4\001\002\000\020\011\uff5f\056\uff5f\060" +
    "\uff5f\061\uff5f\062\uff5f\120\uff5f\131\uff5f\001\002\000\046" +
    "\011\156\024\052\025\045\026\060\030\154\031\145\034" +
    "\173\054\147\056\uff53\060\035\061\024\062\032\074\161" +
    "\123\164\125\157\126\176\133\152\136\162\001\002\000" +
    "\004\056\u02d7\001\002\000\020\011\uff5c\056\uff5c\060\uff5c" +
    "\061\uff5c\062\uff5c\120\uff5c\131\uff5c\001\002\000\020\011" +
    "\uff63\056\uff63\060\uff63\061\uff63\062\uff63\120\uff63\131\uff63" +
    "\001\002\000\012\003\uff66\111\uff66\124\uff66\131\uff66\001" +
    "\002\000\020\011\ufd8f\056\uff64\060\035\061\024\062\032" +
    "\120\ufd8f\131\014\001\002\000\004\056\u02dc\001\002\000" +
    "\012\003\uff68\111\uff68\124\uff68\131\uff68\001\002\000\004" +
    "\057\u02de\001\002\000\020\011\ufd8f\056\uff64\060\035\061" +
    "\024\062\032\120\ufd8f\131\014\001\002\000\004\056\u02e0" +
    "\001\002\000\012\003\uff67\111\uff67\124\uff67\131\uff67\001" +
    "\002\000\012\003\uff6a\111\uff6a\124\uff6a\131\uff6a\001\002" +
    "\000\004\004\u0329\001\002\000\004\141\u02e5\001\002\000" +
    "\004\002\000\001\002\000\020\060\ufe78\061\ufe78\062\ufe78" +
    "\071\u02e7\120\ufe78\121\ufe78\127\ufe78\001\002\000\020\060" +
    "\ufe79\061\ufe79\062\ufe79\071\u02e7\120\ufe79\121\ufe79\127\ufe79" +
    "\001\002\000\006\003\u0314\137\u0315\001\002\000\016\060" +
    "\ufe66\061\ufe66\062\ufe66\120\ufe66\121\ufe66\127\u02ea\001\002" +
    "\000\020\060\ufe76\061\ufe76\062\ufe76\071\ufe76\120\ufe76\121" +
    "\ufe76\127\ufe76\001\002\000\012\003\u030a\060\035\061\024" +
    "\062\032\001\002\000\014\060\035\061\024\062\032\120" +
    "\ufe5c\121\u02ef\001\002\000\016\060\ufe64\061\ufe64\062\ufe64" +
    "\120\ufe64\121\ufe64\127\ufe64\001\002\000\016\060\ufe67\061" +
    "\ufe67\062\ufe67\120\ufe67\121\ufe67\127\u02ea\001\002\000\016" +
    "\060\ufe65\061\ufe65\062\ufe65\120\ufe65\121\ufe65\127\ufe65\001" +
    "\002\000\006\003\u0285\072\u0308\001\002\000\014\060\035" +
    "\061\024\062\032\120\ufe5d\121\u02ef\001\002\000\004\120" +
    "\u02f7\001\002\000\006\003\u02f4\067\u02f5\001\002\000\014" +
    "\060\ufe5a\061\ufe5a\062\ufe5a\120\ufe5a\121\ufe5a\001\002\000" +
    "\014\060\ufe58\061\ufe58\062\ufe58\120\ufe58\121\ufe58\001\002" +
    "\000\014\060\ufe59\061\ufe59\062\ufe59\120\ufe59\121\ufe59\001" +
    "\002\000\004\002\ufe7a\001\002\000\006\003\u02f8\122\u02f9" +
    "\001\002\000\046\002\ufe36\011\u0160\030\u015f\031\u0169\034" +
    "\u0159\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170" +
    "\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134" +
    "\u0155\001\002\000\006\003\u02fa\012\u02fb\001\002\000\046" +
    "\002\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\060\035\061" +
    "\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157" +
    "\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000" +
    "\006\003\u02fd\015\u02fc\001\002\000\006\003\u02ff\057\u0300" +
    "\001\002\000\046\002\ufe36\011\u0160\030\u015f\031\u0169\034" +
    "\u0159\060\035\061\024\062\032\065\u0163\066\u0151\074\u0170" +
    "\100\u016f\101\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134" +
    "\u0155\001\002\000\004\002\ufe3a\001\002\000\046\002\ufe36" +
    "\011\u0160\030\u015f\031\u0169\034\u0159\060\035\061\024\062" +
    "\032\065\u0163\066\u0151\074\u0170\100\u016f\101\u0157\121\u0152" +
    "\123\u0162\130\u0165\133\u0164\134\u0155\001\002\000\050\003" +
    "\ufe36\011\u0160\030\u015f\031\u0169\034\u0159\056\ufe36\060\035" +
    "\061\024\062\032\065\u0163\066\u0151\074\u0170\100\u016f\101" +
    "\u0157\121\u0152\123\u0162\130\u0165\133\u0164\134\u0155\001\002" +
    "\000\006\003\u0302\056\u0303\001\002\000\004\002\ufe3c\001" +
    "\002\000\004\002\ufe3d\001\002\000\004\002\ufe3b\001\002" +
    "\000\004\002\ufe39\001\002\000\004\002\ufe38\001\002\000" +
    "\014\060\ufe5b\061\ufe5b\062\ufe5b\120\ufe5b\121\ufe5b\001\002" +
    "\000\006\003\u0287\011\u0309\001\002\000\004\011\u0288\001" +
    "\002\000\016\060\ufe5e\061\ufe5e\062\ufe5e\120\ufe5e\121\ufe5e" +
    "\127\ufe5e\001\002\000\006\003\u030d\011\u030c\001\002\000" +
    "\006\003\u030e\044\u030f\001\002\000\016\060\ufe5f\061\ufe5f" +
    "\062\ufe5f\120\ufe5f\121\ufe5f\127\ufe5f\001\002\000\016\060" +
    "\ufe60\061\ufe60\062\ufe60\120\ufe60\121\ufe60\127\ufe60\001\002" +
    "\000\026\003\u0311\005\051\006\053\007\063\011\u0180\012" +
    "\u017a\036\047\100\u016f\101\u0157\121\u017b\001\002\000\020" +
    "\003\u0312\035\u0191\036\u018d\037\u0190\040\u0194\041\u018f\067" +
    "\u0313\001\002\000\016\060\ufe61\061\ufe61\062\ufe61\120\ufe61" +
    "\121\ufe61\127\ufe61\001\002\000\016\060\ufe62\061\ufe62\062" +
    "\ufe62\120\ufe62\121\ufe62\127\ufe62\001\002\000\016\060\ufe63" +
    "\061\ufe63\062\ufe63\120\ufe63\121\ufe63\127\ufe63\001\002\000" +
    "\020\060\ufe73\061\ufe73\062\ufe73\071\ufe73\120\ufe73\121\ufe73" +
    "\127\ufe73\001\002\000\014\003\u0316\045\u0319\100\u0317\101" +
    "\u0318\121\u031a\001\002\000\020\060\ufe74\061\ufe74\062\ufe74" +
    "\071\ufe74\120\ufe74\121\ufe74\127\ufe74\001\002\000\020\060" +
    "\ufe70\061\ufe70\062\ufe70\071\ufe70\120\ufe70\121\ufe70\127\ufe70" +
    "\001\002\000\020\060\ufe6f\061\ufe6f\062\ufe6f\071\ufe6f\120" +
    "\ufe6f\121\ufe6f\127\ufe6f\001\002\000\006\003\u0323\011\u0321" +
    "\001\002\000\006\003\u031d\072\u031c\001\002\000\020\060" +
    "\ufe75\061\ufe75\062\ufe75\071\ufe75\120\ufe75\121\ufe75\127\ufe75" +
    "\001\002\000\006\007\u031f\021\u0320\001\002\000\020\060" +
    "\ufe71\061\ufe71\062\ufe71\071\ufe71\120\ufe71\121\ufe71\127\ufe71" +
    "\001\002\000\020\060\ufe72\061\ufe72\062\ufe72\071\ufe72\120" +
    "\ufe72\121\ufe72\127\ufe72\001\002\000\020\060\ufe68\061\ufe68" +
    "\062\ufe68\071\ufe68\120\ufe68\121\ufe68\127\ufe68\001\002\000" +
    "\020\060\ufe69\061\ufe69\062\ufe69\071\ufe69\120\ufe69\121\ufe69" +
    "\127\ufe69\001\002\000\010\003\ufe6a\047\ufe6a\072\ufe6a\001" +
    "\002\000\010\003\u0325\047\u0326\072\u0324\001\002\000\020" +
    "\060\ufe6c\061\ufe6c\062\ufe6c\071\ufe6c\120\ufe6c\121\ufe6c\127" +
    "\ufe6c\001\002\000\004\011\u0327\001\002\000\020\060\ufe6d" +
    "\061\ufe6d\062\ufe6d\071\ufe6d\120\ufe6d\121\ufe6d\127\ufe6d\001" +
    "\002\000\020\060\ufe6e\061\ufe6e\062\ufe6e\071\ufe6e\120\ufe6e" +
    "\121\ufe6e\127\ufe6e\001\002\000\010\003\ufe6b\047\ufe6b\072" +
    "\ufe6b\001\002\000\020\060\ufe77\061\ufe77\062\ufe77\071\ufe77" +
    "\120\ufe77\121\ufe77\127\ufe77\001\002\000\006\010\u032b\141" +
    "\ufee1\001\002\000\006\010\ufedf\141\ufedf\001\002\000\006" +
    "\003\u0330\011\u032f\001\002\000\004\141\ufee3\001\002\000" +
    "\006\010\u032b\141\ufee2\001\002\000\006\010\ufee0\141\ufee0" +
    "\001\002\000\006\003\u0331\012\u0332\001\002\000\006\010" +
    "\ufedd\141\ufedd\001\002\000\006\010\ufedc\141\ufedc\001\002" +
    "\000\010\003\ufed7\011\u0333\015\ufed7\001\002\000\012\003" +
    "\ufed4\015\ufed4\022\ufed4\073\ufed4\001\002\000\010\003\ufed8" +
    "\015\ufed8\022\u03d0\001\002\000\006\003\u0337\015\u0336\001" +
    "\002\000\006\003\u0338\016\u0339\001\002\000\006\010\ufedb" +
    "\141\ufedb\001\002\000\006\010\ufeda\141\ufeda\001\002\000" +
    "\022\003\u0342\004\u0345\011\u0341\024\052\025\045\026\060" +
    "\054\u0346\126\u0344\001\002\000\014\004\ufeca\010\ufeca\023" +
    "\ufeca\027\ufeca\141\ufeca\001\002\000\014\004\ufec9\010\ufec9" +
    "\023\ufec9\027\ufec9\141\ufec9\001\002\000\014\004\ufec7\010" +
    "\ufec7\023\ufec7\027\ufec7\141\ufec7\001\002\000\014\004\ufec8" +
    "\010\ufec8\023\ufec8\027\ufec8\141\ufec8\001\002\000\014\004" +
    "\ufec6\010\ufec6\023\ufec6\027\ufec6\141\ufec6\001\002\000\006" +
    "\010\ufede\141\ufede\001\002\000\014\004\ufecb\010\ufecb\023" +
    "\ufecb\027\ufecb\141\ufecb\001\002\000\012\003\ufed4\012\u0356" +
    "\022\ufed4\044\u03db\001\002\000\006\010\ufed9\141\ufed9\001" +
    "\002\000\010\003\u03d1\022\u03d0\044\u03d2\001\002\000\006" +
    "\003\u03c5\012\u03c6\001\002\000\004\017\u0360\001\002\000" +
    "\016\005\051\006\053\007\063\011\u034a\012\u0347\036\047" +
    "\001\002\000\016\005\051\006\053\007\063\011\u034a\012" +
    "\u0347\036\047\001\002\000\072\003\ufe8d\004\ufe8d\010\ufe8d" +
    "\011\ufe8d\015\ufe8d\016\ufe8d\022\ufe8d\023\ufe8d\024\ufe8d\025" +
    "\ufe8d\026\ufe8d\027\ufe8d\035\ufe8d\036\ufe8d\037\ufe8d\040\ufe8d" +
    "\041\ufe8d\042\ufe8d\043\ufe8d\045\ufe8d\046\ufe8d\047\ufe8d\050" +
    "\ufe8d\051\ufe8d\053\ufe8d\054\ufe8d\126\ufe8d\141\ufe8d\001\002" +
    "\000\072\003\ufe8e\004\ufe8e\010\ufe8e\011\ufe8e\015\ufe8e\016" +
    "\ufe8e\022\ufe8e\023\ufe8e\024\ufe8e\025\ufe8e\026\ufe8e\027\ufe8e" +
    "\035\ufe8e\036\ufe8e\037\ufe8e\040\ufe8e\041\ufe8e\042\ufe8e\043" +
    "\ufe8e\045\ufe8e\046\ufe8e\047\ufe8e\050\ufe8e\051\ufe8e\053\ufe8e" +
    "\054\ufe8e\126\ufe8e\141\ufe8e\001\002\000\074\003\ufd93\004" +
    "\ufd93\010\ufd93\011\ufd93\012\u0356\015\ufd93\016\ufd93\022\ufd93" +
    "\023\ufd93\024\ufd93\025\ufd93\026\ufd93\027\ufd93\035\ufd93\036" +
    "\ufd93\037\ufd93\040\ufd93\041\ufd93\042\ufd93\043\ufd93\045\ufd93" +
    "\046\ufd93\047\ufd93\050\ufd93\051\ufd93\053\ufd93\054\ufd93\126" +
    "\ufd93\141\ufd93\001\002\000\026\004\ufec5\010\ufec5\023\ufec5" +
    "\027\ufec5\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\141" +
    "\ufec5\001\002\000\016\005\051\006\053\007\063\011\u034a" +
    "\012\u0347\036\047\001\002\000\016\005\051\006\053\007" +
    "\063\011\u034a\012\u0347\036\047\001\002\000\016\005\051" +
    "\006\053\007\063\011\u034a\012\u0347\036\047\001\002\000" +
    "\016\005\051\006\053\007\063\011\u034a\012\u0347\036\047" +
    "\001\002\000\016\005\051\006\053\007\063\011\u034a\012" +
    "\u0347\036\047\001\002\000\072\003\ufe91\004\ufe91\010\ufe91" +
    "\011\ufe91\015\ufe91\016\ufe91\022\ufe91\023\ufe91\024\ufe91\025" +
    "\ufe91\026\ufe91\027\ufe91\035\ufe91\036\ufe91\037\ufe91\040\ufe91" +
    "\041\ufe91\042\ufe91\043\ufe91\045\ufe91\046\ufe91\047\ufe91\050" +
    "\ufe91\051\ufe91\053\ufe91\054\ufe91\126\ufe91\141\ufe91\001\002" +
    "\000\072\003\ufe92\004\ufe92\010\ufe92\011\ufe92\015\ufe92\016" +
    "\ufe92\022\ufe92\023\ufe92\024\ufe92\025\ufe92\026\ufe92\027\ufe92" +
    "\035\ufe92\036\ufe92\037\ufe92\040\ufe92\041\ufe92\042\ufe92\043" +
    "\ufe92\045\ufe92\046\ufe92\047\ufe92\050\ufe92\051\ufe92\053\ufe92" +
    "\054\ufe92\126\ufe92\141\ufe92\001\002\000\072\003\ufe93\004" +
    "\ufe93\010\ufe93\011\ufe93\015\ufe93\016\ufe93\022\ufe93\023\ufe93" +
    "\024\ufe93\025\ufe93\026\ufe93\027\ufe93\035\ufe93\036\ufe93\037" +
    "\u0350\040\u034f\041\u034c\042\ufe93\043\ufe93\045\ufe93\046\ufe93" +
    "\047\ufe93\050\ufe93\051\ufe93\053\ufe93\054\ufe93\126\ufe93\141" +
    "\ufe93\001\002\000\072\003\ufe94\004\ufe94\010\ufe94\011\ufe94" +
    "\015\ufe94\016\ufe94\022\ufe94\023\ufe94\024\ufe94\025\ufe94\026" +
    "\ufe94\027\ufe94\035\ufe94\036\ufe94\037\u0350\040\u034f\041\u034c" +
    "\042\ufe94\043\ufe94\045\ufe94\046\ufe94\047\ufe94\050\ufe94\051" +
    "\ufe94\053\ufe94\054\ufe94\126\ufe94\141\ufe94\001\002\000\072" +
    "\003\ufe90\004\ufe90\010\ufe90\011\ufe90\015\ufe90\016\ufe90\022" +
    "\ufe90\023\ufe90\024\ufe90\025\ufe90\026\ufe90\027\ufe90\035\ufe90" +
    "\036\ufe90\037\ufe90\040\ufe90\041\ufe90\042\ufe90\043\ufe90\045" +
    "\ufe90\046\ufe90\047\ufe90\050\ufe90\051\ufe90\053\ufe90\054\ufe90" +
    "\126\ufe90\141\ufe90\001\002\000\020\005\051\006\053\007" +
    "\063\011\u034a\012\u0347\015\u0359\036\047\001\002\000\010" +
    "\003\u035c\015\u035b\022\u035a\001\002\000\022\003\ufe84\015" +
    "\ufe84\022\ufe84\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c" +
    "\001\002\000\072\003\ufe8a\004\ufe8a\010\ufe8a\011\ufe8a\015" +
    "\ufe8a\016\ufe8a\022\ufe8a\023\ufe8a\024\ufe8a\025\ufe8a\026\ufe8a" +
    "\027\ufe8a\035\ufe8a\036\ufe8a\037\ufe8a\040\ufe8a\041\ufe8a\042" +
    "\ufe8a\043\ufe8a\045\ufe8a\046\ufe8a\047\ufe8a\050\ufe8a\051\ufe8a" +
    "\053\ufe8a\054\ufe8a\126\ufe8a\141\ufe8a\001\002\000\016\005" +
    "\051\006\053\007\063\011\u034a\012\u0347\036\047\001\002" +
    "\000\072\003\ufe8c\004\ufe8c\010\ufe8c\011\ufe8c\015\ufe8c\016" +
    "\ufe8c\022\ufe8c\023\ufe8c\024\ufe8c\025\ufe8c\026\ufe8c\027\ufe8c" +
    "\035\ufe8c\036\ufe8c\037\ufe8c\040\ufe8c\041\ufe8c\042\ufe8c\043" +
    "\ufe8c\045\ufe8c\046\ufe8c\047\ufe8c\050\ufe8c\051\ufe8c\053\ufe8c" +
    "\054\ufe8c\126\ufe8c\141\ufe8c\001\002\000\072\003\ufe8b\004" +
    "\ufe8b\010\ufe8b\011\ufe8b\015\ufe8b\016\ufe8b\022\ufe8b\023\ufe8b" +
    "\024\ufe8b\025\ufe8b\026\ufe8b\027\ufe8b\035\ufe8b\036\ufe8b\037" +
    "\ufe8b\040\ufe8b\041\ufe8b\042\ufe8b\043\ufe8b\045\ufe8b\046\ufe8b" +
    "\047\ufe8b\050\ufe8b\051\ufe8b\053\ufe8b\054\ufe8b\126\ufe8b\141" +
    "\ufe8b\001\002\000\022\003\ufe85\015\ufe85\022\ufe85\035\u034d" +
    "\036\u034e\037\u0350\040\u034f\041\u034c\001\002\000\016\015" +
    "\u035f\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\001\002" +
    "\000\072\003\ufe8f\004\ufe8f\010\ufe8f\011\ufe8f\015\ufe8f\016" +
    "\ufe8f\022\ufe8f\023\ufe8f\024\ufe8f\025\ufe8f\026\ufe8f\027\ufe8f" +
    "\035\ufe8f\036\ufe8f\037\ufe8f\040\ufe8f\041\ufe8f\042\ufe8f\043" +
    "\ufe8f\045\ufe8f\046\ufe8f\047\ufe8f\050\ufe8f\051\ufe8f\053\ufe8f" +
    "\054\ufe8f\126\ufe8f\141\ufe8f\001\002\000\026\003\u0368\011" +
    "\u0341\024\052\025\045\026\060\030\u0364\031\u0361\034\u0369" +
    "\054\u0346\126\u0344\001\002\000\022\003\u03c2\005\051\006" +
    "\053\007\063\011\u034a\012\u038a\036\047\052\u038f\001\002" +
    "\000\004\004\u03c0\001\002\000\004\004\u03bf\001\002\000" +
    "\022\003\u038d\005\051\006\053\007\063\011\u034a\012\u038a" +
    "\036\047\052\u038f\001\002\000\030\003\u0368\011\u0341\020" +
    "\u0388\024\052\025\045\026\060\030\u0364\031\u0361\034\u0369" +
    "\054\u0346\126\u0344\001\002\000\004\004\u0387\001\002\000" +
    "\030\003\ufed2\011\ufed2\020\ufed2\024\ufed2\025\ufed2\026\ufed2" +
    "\030\ufed2\031\ufed2\034\ufed2\054\ufed2\126\ufed2\001\002\000" +
    "\030\003\ufecd\011\ufecd\020\ufecd\024\ufecd\025\ufecd\026\ufecd" +
    "\030\ufecd\031\ufecd\034\ufecd\054\ufecd\126\ufecd\001\002\000" +
    "\006\003\u036d\011\u036c\001\002\000\004\004\u036b\001\002" +
    "\000\030\003\ufed0\011\ufed0\020\ufed0\024\ufed0\025\ufed0\026" +
    "\ufed0\030\ufed0\031\ufed0\034\ufed0\054\ufed0\126\ufed0\001\002" +
    "\000\006\003\u036f\033\u036e\001\002\000\004\004\ufea4\001" +
    "\002\000\006\003\u0372\032\u0370\001\002\000\004\004\ufea5" +
    "\001\002\000\006\003\u0377\012\u0378\001\002\000\006\003" +
    "\u0373\016\u0374\001\002\000\004\004\ufea6\001\002\000\004" +
    "\004\ufea7\001\002\000\022\003\u0376\004\u0345\011\u0341\024" +
    "\052\025\045\026\060\054\u0346\126\u0344\001\002\000\004" +
    "\004\ufea9\001\002\000\004\004\ufea8\001\002\000\006\003" +
    "\ufe9a\016\ufe9a\001\002\000\020\003\u0379\005\051\006\053" +
    "\007\063\011\u034a\012\u0347\036\047\001\002\000\006\003" +
    "\ufe9b\016\ufe9b\001\002\000\022\003\u037d\015\u037c\022\u037b" +
    "\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\001\002\000" +
    "\020\003\u037e\005\051\006\053\007\063\011\u034a\012\u0347" +
    "\036\047\001\002\000\006\003\ufea3\016\ufea3\001\002\000" +
    "\006\003\ufe9c\016\ufe9c\001\002\000\006\003\ufe9d\016\ufe9d" +
    "\001\002\000\022\003\u0382\015\u0381\022\u0380\035\u034d\036" +
    "\u034e\037\u0350\040\u034f\041\u034c\001\002\000\020\003\u0383" +
    "\005\051\006\053\007\063\011\u034a\012\u0347\036\047\001" +
    "\002\000\006\003\ufea2\016\ufea2\001\002\000\006\003\ufe9e" +
    "\016\ufe9e\001\002\000\006\003\ufe9f\016\ufe9f\001\002\000" +
    "\020\003\u0386\015\u0385\035\u034d\036\u034e\037\u0350\040\u034f" +
    "\041\u034c\001\002\000\006\003\ufea1\016\ufea1\001\002\000" +
    "\006\003\ufea0\016\ufea0\001\002\000\030\003\ufed1\011\ufed1" +
    "\020\ufed1\024\ufed1\025\ufed1\026\ufed1\030\ufed1\031\ufed1\034" +
    "\ufed1\054\ufed1\126\ufed1\001\002\000\014\004\ufecc\010\ufecc" +
    "\023\ufecc\027\ufecc\141\ufecc\001\002\000\030\003\ufed3\011" +
    "\ufed3\020\ufed3\024\ufed3\025\ufed3\026\ufed3\030\ufed3\031\ufed3" +
    "\034\ufed3\054\ufed3\126\ufed3\001\002\000\022\003\u03bb\005" +
    "\051\006\053\007\063\011\u034a\012\u0347\036\047\052\u038f" +
    "\001\002\000\030\003\ufe96\004\ufe96\011\ufe96\016\ufe96\024" +
    "\ufe96\025\ufe96\026\ufe96\051\u0391\053\u0392\054\ufe96\126\ufe96" +
    "\001\002\000\006\003\u03b3\016\u03b4\001\002\000\014\003" +
    "\ufe95\004\ufeaf\016\ufe95\023\u03a2\027\u03a3\001\002\000\030" +
    "\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\042\u039a\043" +
    "\u0399\045\u0396\046\u0395\047\u0398\050\u0397\001\002\000\020" +
    "\005\051\006\053\007\063\011\u034a\012\u0347\036\047\052" +
    "\u038f\001\002\000\032\003\ufe7b\004\ufe7b\011\ufe7b\015\ufe7b" +
    "\016\ufe7b\024\ufe7b\025\ufe7b\026\ufe7b\051\ufe7b\053\ufe7b\054" +
    "\ufe7b\126\ufe7b\001\002\000\020\005\051\006\053\007\063" +
    "\011\u034a\012\u0347\036\047\052\u038f\001\002\000\020\005" +
    "\051\006\053\007\063\011\u034a\012\u0347\036\047\052\u038f" +
    "\001\002\000\032\003\ufe7c\004\ufe7c\011\ufe7c\015\ufe7c\016" +
    "\ufe7c\024\ufe7c\025\ufe7c\026\ufe7c\051\u0391\053\ufe7c\054\ufe7c" +
    "\126\ufe7c\001\002\000\032\003\ufe7d\004\ufe7d\011\ufe7d\015" +
    "\ufe7d\016\ufe7d\024\ufe7d\025\ufe7d\026\ufe7d\051\ufe7d\053\ufe7d" +
    "\054\ufe7d\126\ufe7d\001\002\000\016\005\051\006\053\007" +
    "\063\011\u034a\012\u0347\036\047\001\002\000\016\005\051" +
    "\006\053\007\063\011\u034a\012\u0347\036\047\001\002\000" +
    "\016\005\051\006\053\007\063\011\u034a\012\u0347\036\047" +
    "\001\002\000\016\005\051\006\053\007\063\011\u034a\012" +
    "\u0347\036\047\001\002\000\016\005\051\006\053\007\063" +
    "\011\u034a\012\u0347\036\047\001\002\000\016\005\051\006" +
    "\053\007\063\011\u034a\012\u0347\036\047\001\002\000\044" +
    "\003\ufe83\004\ufe83\011\ufe83\015\ufe83\016\ufe83\024\ufe83\025" +
    "\ufe83\026\ufe83\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c" +
    "\051\ufe83\053\ufe83\054\ufe83\126\ufe83\001\002\000\044\003" +
    "\ufe82\004\ufe82\011\ufe82\015\ufe82\016\ufe82\024\ufe82\025\ufe82" +
    "\026\ufe82\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\051" +
    "\ufe82\053\ufe82\054\ufe82\126\ufe82\001\002\000\044\003\ufe7f" +
    "\004\ufe7f\011\ufe7f\015\ufe7f\016\ufe7f\024\ufe7f\025\ufe7f\026" +
    "\ufe7f\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\051\ufe7f" +
    "\053\ufe7f\054\ufe7f\126\ufe7f\001\002\000\044\003\ufe7e\004" +
    "\ufe7e\011\ufe7e\015\ufe7e\016\ufe7e\024\ufe7e\025\ufe7e\026\ufe7e" +
    "\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\051\ufe7e\053" +
    "\ufe7e\054\ufe7e\126\ufe7e\001\002\000\044\003\ufe81\004\ufe81" +
    "\011\ufe81\015\ufe81\016\ufe81\024\ufe81\025\ufe81\026\ufe81\035" +
    "\u034d\036\u034e\037\u0350\040\u034f\041\u034c\051\ufe81\053\ufe81" +
    "\054\ufe81\126\ufe81\001\002\000\044\003\ufe80\004\ufe80\011" +
    "\ufe80\015\ufe80\016\ufe80\024\ufe80\025\ufe80\026\ufe80\035\u034d" +
    "\036\u034e\037\u0350\040\u034f\041\u034c\051\ufe80\053\ufe80\054" +
    "\ufe80\126\ufe80\001\002\000\004\004\ufeb0\001\002\000\022" +
    "\003\u03aa\005\051\006\053\007\063\011\u034a\012\u038a\036" +
    "\047\052\u038f\001\002\000\006\003\u03a5\016\u03a6\001\002" +
    "\000\004\004\ufeb5\001\002\000\004\004\ufeac\001\002\000" +
    "\022\003\u03a8\004\u0345\011\u0341\024\052\025\045\026\060" +
    "\054\u0346\126\u0344\001\002\000\004\004\ufeae\001\002\000" +
    "\004\004\ufead\001\002\000\006\003\u03ac\016\u03ad\001\002" +
    "\000\014\003\ufe95\004\ufeaf\016\ufe95\023\u03a2\027\u03a3\001" +
    "\002\000\004\004\ufeb1\001\002\000\010\004\ufeaf\023\u03a2" +
    "\027\u03a3\001\002\000\022\003\u03af\004\u0345\011\u0341\024" +
    "\052\025\045\026\060\054\u0346\126\u0344\001\002\000\010" +
    "\004\ufeaf\023\u03a2\027\u03a3\001\002\000\010\004\ufeaf\023" +
    "\u03a2\027\u03a3\001\002\000\004\004\ufeb3\001\002\000\004" +
    "\004\ufeb4\001\002\000\004\004\ufeb2\001\002\000\010\004" +
    "\ufeaf\023\u03a2\027\u03a3\001\002\000\022\003\u03b6\004\u0345" +
    "\011\u0341\024\052\025\045\026\060\054\u0346\126\u0344\001" +
    "\002\000\010\004\ufeaf\023\u03a2\027\u03a3\001\002\000\010" +
    "\004\ufeaf\023\u03a2\027\u03a3\001\002\000\004\004\ufeb7\001" +
    "\002\000\004\004\ufeb8\001\002\000\004\004\ufeb6\001\002" +
    "\000\012\003\u03be\015\u03bd\051\u0391\053\u0392\001\002\000" +
    "\024\003\ufe97\004\ufe97\011\ufe97\016\ufe97\024\ufe97\025\ufe97" +
    "\026\ufe97\054\ufe97\126\ufe97\001\002\000\032\015\u035f\035" +
    "\u034d\036\u034e\037\u0350\040\u034f\041\u034c\042\u039a\043\u0399" +
    "\045\u0396\046\u0395\047\u0398\050\u0397\001\002\000\024\003" +
    "\ufe99\004\ufe99\011\ufe99\016\ufe99\024\ufe99\025\ufe99\026\ufe99" +
    "\054\ufe99\126\ufe99\001\002\000\024\003\ufe98\004\ufe98\011" +
    "\ufe98\016\ufe98\024\ufe98\025\ufe98\026\ufe98\054\ufe98\126\ufe98" +
    "\001\002\000\030\003\ufecf\011\ufecf\020\ufecf\024\ufecf\025" +
    "\ufecf\026\ufecf\030\ufecf\031\ufecf\034\ufecf\054\ufecf\126\ufecf" +
    "\001\002\000\030\003\ufece\011\ufece\020\ufece\024\ufece\025" +
    "\ufece\026\ufece\030\ufece\031\ufece\034\ufece\054\ufece\126\ufece" +
    "\001\002\000\022\003\u03c4\004\u0345\011\u0341\024\052\025" +
    "\045\026\060\054\u0346\126\u0344\001\002\000\022\003\ufe95" +
    "\004\ufe95\011\ufe95\024\ufe95\025\ufe95\026\ufe95\054\ufe95\126" +
    "\ufe95\001\002\000\004\004\ufeab\001\002\000\004\004\ufeaa" +
    "\001\002\000\014\004\ufec2\010\ufec2\023\ufec2\027\ufec2\141" +
    "\ufec2\001\002\000\022\003\u03c9\005\051\006\053\007\063" +
    "\011\u034a\012\u0347\021\u03c7\036\047\001\002\000\010\003" +
    "\ufebe\015\ufebe\022\ufebe\001\002\000\010\003\u03ce\015\u03cd" +
    "\022\u03cc\001\002\000\014\004\ufec3\010\ufec3\023\ufec3\027" +
    "\ufec3\141\ufec3\001\002\000\022\003\ufebd\015\ufebd\022\ufebd" +
    "\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\001\002\000" +
    "\010\003\ufebf\015\ufebf\022\ufebf\001\002\000\020\005\051" +
    "\006\053\007\063\011\u034a\012\u0347\021\u03c7\036\047\001" +
    "\002\000\014\004\ufec4\010\ufec4\023\ufec4\027\ufec4\141\ufec4" +
    "\001\002\000\014\004\ufec1\010\ufec1\023\ufec1\027\ufec1\141" +
    "\ufec1\001\002\000\010\003\ufec0\015\ufec0\022\ufec0\001\002" +
    "\000\006\003\u03da\011\u03d9\001\002\000\014\004\ufe88\010" +
    "\ufe88\023\ufe88\027\ufe88\141\ufe88\001\002\000\020\003\u03d4" +
    "\005\051\006\053\007\063\011\u034a\012\u0347\036\047\001" +
    "\002\000\016\004\ufe89\010\ufe89\022\u03d6\023\ufe89\027\ufe89" +
    "\141\ufe89\001\002\000\016\004\ufeb9\010\ufeb9\022\ufeb9\023" +
    "\ufeb9\027\ufeb9\141\ufeb9\001\002\000\030\004\ufeba\010\ufeba" +
    "\022\ufeba\023\ufeba\027\ufeba\035\u034d\036\u034e\037\u0350\040" +
    "\u034f\041\u034c\141\ufeba\001\002\000\020\003\u03d7\005\051" +
    "\006\053\007\063\011\u034a\012\u0347\036\047\001\002\000" +
    "\016\004\ufebb\010\ufebb\022\ufebb\023\ufebb\027\ufebb\141\ufebb" +
    "\001\002\000\030\004\ufebc\010\ufebc\022\ufebc\023\ufebc\027" +
    "\ufebc\035\u034d\036\u034e\037\u0350\040\u034f\041\u034c\141\ufebc" +
    "\001\002\000\014\003\ufed6\015\ufed6\022\ufed6\044\ufed6\073" +
    "\ufed6\001\002\000\014\003\ufed5\015\ufed5\022\ufed5\044\ufed5" +
    "\073\ufed5\001\002\000\024\005\051\006\053\007\063\011" +
    "\u034a\012\u0347\024\052\025\045\026\060\036\047\001\002" +
    "\000\014\004\ufe87\010\ufe87\023\ufe87\027\ufe87\141\ufe87\001" +
    "\002\000\026\004\ufe86\010\ufe86\023\ufe86\027\ufe86\035\u034d" +
    "\036\u034e\037\u0350\040\u034f\041\u034c\141\ufe86\001\002\000" +
    "\066\003\uff6e\011\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\034\uff6e\054\uff6e\067\uff6e\074" +
    "\uff6e\105\uff6e\106\uff6e\107\uff6e\112\uff6e\113\uff6e\114\uff6e" +
    "\115\uff6e\126\uff6e\131\uff6e\132\uff6e\135\uff6e\136\uff6e\140" +
    "\uff6e\001\002\000\014\067\u03e1\107\ufd8f\112\ufffd\131\014" +
    "\140\ufd8f\001\002\000\012\107\ufd8f\112\ufffe\131\014\140" +
    "\ufd8f\001\002\000\066\003\uff6f\011\uff6f\023\uff6f\024\uff6f" +
    "\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\034\uff6f\054" +
    "\uff6f\067\uff6f\074\uff6f\105\uff6f\106\uff6f\107\uff6f\112\uff6f" +
    "\113\uff6f\114\uff6f\115\uff6f\126\uff6f\131\uff6f\132\uff6f\135" +
    "\uff6f\136\uff6f\140\uff6f\001\002\000\012\107\ufffb\112\ufffb" +
    "\131\ufffb\140\ufffb\001\002\000\012\107\ufffa\112\ufffa\131" +
    "\ufffa\140\ufffa\001\002\000\004\112\uffff\001\002\000\012" +
    "\107\ufff9\112\ufff9\131\ufff9\140\ufff9\001\002\000\006\107" +
    "\u03e7\140\u03e8\001\002\000\006\003\u0538\011\u0537\001\002" +
    "\000\006\003\u03ea\011\u03e9\001\002\000\010\003\uff90\012" +
    "\u03eb\073\uff90\001\002\000\006\012\u03eb\073\uff90\001\002" +
    "\000\012\003\u0517\011\u0513\015\u0515\055\u0516\001\002\000" +
    "\004\073\u03ed\001\002\000\010\060\035\061\024\062\032" +
    "\001\002\000\004\067\u03de\001\002\000\040\011\u03fa\024" +
    "\052\025\045\026\060\030\u03f9\031\u03f5\034\u0406\054\u03f7" +
    "\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\022\003\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\012\uffb6\036\uffb6\113\u04e9\001\002\000\012\022" +
    "\u0460\027\uffa3\067\uffa3\106\uffa3\001\002\000\010\027\uffe2" +
    "\067\uffe2\106\uffe2\001\002\000\004\067\u03de\001\002\000" +
    "\004\067\u03de\001\002\000\022\003\u04db\005\051\006\053" +
    "\007\063\011\u0411\012\u047c\036\047\052\u0480\001\002\000" +
    "\052\003\uffea\011\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\034\uffea\054\uffea\074\uffea\105" +
    "\uffea\106\uffea\113\uffea\114\uffea\115\uffea\126\uffea\132\uffea" +
    "\136\uffea\001\002\000\020\003\u04d9\005\051\006\053\007" +
    "\063\011\u0411\012\u040b\036\047\001\002\000\004\067\u03de" +
    "\001\002\000\022\003\u049e\005\051\006\053\007\063\011" +
    "\u0411\012\u047c\036\047\052\u0480\001\002\000\010\003\u0497" +
    "\012\u0415\044\u0498\001\002\000\010\027\uffde\067\uffde\106" +
    "\uffde\001\002\000\004\067\u03de\001\002\000\004\067\u03de" +
    "\001\002\000\004\012\u0472\001\002\000\010\027\uffe0\067" +
    "\uffe0\106\uffe0\001\002\000\010\027\uffe1\067\uffe1\106\uffe1" +
    "\001\002\000\010\027\uffe3\067\uffe3\106\uffe3\001\002\000" +
    "\004\067\u03de\001\002\000\004\106\u046e\001\002\000\004" +
    "\011\u0333\001\002\000\004\067\u03de\001\002\000\006\003" +
    "\u042f\011\u042e\001\002\000\010\027\uffdf\067\uffdf\106\uffdf" +
    "\001\002\000\052\003\uffed\011\u03fa\023\uffed\024\052\025" +
    "\045\026\060\027\uffed\030\u03f9\031\u03f5\034\u0406\054\u03f7" +
    "\074\u03fd\105\u0404\106\uffed\113\uffed\114\uffed\115\uffed\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\004\012\u040a\001\002" +
    "\000\024\003\u0412\005\051\006\053\007\063\011\u0411\012" +
    "\u040b\015\u0414\021\u040c\036\047\001\002\000\016\005\051" +
    "\006\053\007\063\011\u0411\012\u040b\036\047\001\002\000" +
    "\006\015\uff97\070\uff97\001\002\000\006\015\u0428\070\u0429" +
    "\001\002\000\060\003\uff81\015\uff81\022\uff81\027\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81\067" +
    "\uff81\070\uff81\075\uff81\106\uff81\116\uff81\117\uff81\001\002" +
    "\000\060\003\uff82\015\uff82\022\uff82\027\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\067\uff82\070" +
    "\uff82\075\uff82\106\uff82\116\uff82\117\uff82\001\002\000\020" +
    "\015\uff96\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e\070" +
    "\uff96\001\002\000\062\003\ufd93\012\u0415\015\ufd93\022\ufd93" +
    "\027\ufd93\035\ufd93\036\ufd93\037\ufd93\040\ufd93\041\ufd93\042" +
    "\ufd93\044\ufd93\045\ufd93\046\ufd93\047\ufd93\050\ufd93\051\ufd93" +
    "\053\ufd93\067\ufd93\070\ufd93\075\ufd93\106\ufd93\116\ufd93\117" +
    "\ufd93\001\002\000\006\015\uff95\070\uff95\001\002\000\006" +
    "\015\uff98\070\uff98\001\002\000\010\027\uff9b\067\uff9b\106" +
    "\uff9b\001\002\000\022\003\u0417\005\051\006\053\007\063" +
    "\011\u0411\012\u040b\015\u0418\036\047\001\002\000\020\015" +
    "\uff71\022\uff71\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e" +
    "\001\002\000\006\015\uff70\022\uff70\001\002\000\060\003" +
    "\uff74\015\uff74\022\uff74\027\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\044\uff74\045\uff74\046\uff74\047" +
    "\uff74\050\uff74\051\uff74\053\uff74\067\uff74\070\uff74\075\uff74" +
    "\106\uff74\116\uff74\117\uff74\001\002\000\006\015\u041b\022" +
    "\u041a\001\002\000\020\003\u041d\005\051\006\053\007\063" +
    "\011\u0411\012\u040b\036\047\001\002\000\060\003\uff75\015" +
    "\uff75\022\uff75\027\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050" +
    "\uff75\051\uff75\053\uff75\067\uff75\070\uff75\075\uff75\106\uff75" +
    "\116\uff75\117\uff75\001\002\000\020\015\uff73\022\uff73\035" +
    "\u041f\036\u0420\037\u0422\040\u0421\041\u041e\001\002\000\006" +
    "\015\uff72\022\uff72\001\002\000\016\005\051\006\053\007" +
    "\063\011\u0411\012\u040b\036\047\001\002\000\016\005\051" +
    "\006\053\007\063\011\u0411\012\u040b\036\047\001\002\000" +
    "\016\005\051\006\053\007\063\011\u0411\012\u040b\036\047" +
    "\001\002\000\016\005\051\006\053\007\063\011\u0411\012" +
    "\u040b\036\047\001\002\000\016\005\051\006\053\007\063" +
    "\011\u0411\012\u040b\036\047\001\002\000\060\003\uff85\015" +
    "\uff85\022\uff85\027\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\053\uff85\067\uff85\070\uff85\075\uff85\106\uff85" +
    "\116\uff85\117\uff85\001\002\000\060\003\uff86\015\uff86\022" +
    "\uff86\027\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\053\uff86\067\uff86\070\uff86\075\uff86\106\uff86\116\uff86" +
    "\117\uff86\001\002\000\060\003\uff87\015\uff87\022\uff87\027" +
    "\uff87\035\uff87\036\uff87\037\u0422\040\u0421\041\u041e\042\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\053" +
    "\uff87\067\uff87\070\uff87\075\uff87\106\uff87\116\uff87\117\uff87" +
    "\001\002\000\060\003\uff88\015\uff88\022\uff88\027\uff88\035" +
    "\uff88\036\uff88\037\u0422\040\u0421\041\u041e\042\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\053\uff88\067" +
    "\uff88\070\uff88\075\uff88\106\uff88\116\uff88\117\uff88\001\002" +
    "\000\060\003\uff84\015\uff84\022\uff84\027\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\053\uff84\067\uff84\070" +
    "\uff84\075\uff84\106\uff84\116\uff84\117\uff84\001\002\000\010" +
    "\027\uff9d\067\uff9d\106\uff9d\001\002\000\022\003\u0412\005" +
    "\051\006\053\007\063\011\u0411\012\u040b\021\u040c\036\047" +
    "\001\002\000\006\015\uff99\070\uff99\001\002\000\016\015" +
    "\u042c\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e\001\002" +
    "\000\060\003\uff83\015\uff83\022\uff83\027\uff83\035\uff83\036" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\044\uff83\045\uff83" +
    "\046\uff83\047\uff83\050\uff83\051\uff83\053\uff83\067\uff83\070" +
    "\uff83\075\uff83\106\uff83\116\uff83\117\uff83\001\002\000\052" +
    "\003\uffeb\011\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\034\uffeb\054\uffeb\074\uffeb\105\uffeb" +
    "\106\uffeb\113\uffeb\114\uffeb\115\uffeb\126\uffeb\132\uffeb\136" +
    "\uffeb\001\002\000\014\003\uffc5\044\uffc5\060\035\061\024" +
    "\062\032\001\002\000\012\044\uffc5\060\035\061\024\062" +
    "\032\001\002\000\004\044\u0432\001\002\000\006\003\uffc6" +
    "\044\uffc6\001\002\000\016\005\051\006\053\007\063\011" +
    "\u0411\012\u040b\036\047\001\002\000\016\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\075\u0434\001\002\000\016\005" +
    "\051\006\053\007\063\011\u0411\012\u040b\036\047\001\002" +
    "\000\020\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e\067" +
    "\uffc3\116\u0436\001\002\000\016\005\051\006\053\007\063" +
    "\011\u0411\012\u040b\036\047\001\002\000\004\067\u03de\001" +
    "\002\000\040\011\u03fa\024\052\025\045\026\060\030\u03f9" +
    "\031\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\115" +
    "\uffec\126\u0409\132\u03f0\136\u03fe\001\002\000\004\115\u043a" +
    "\001\002\000\006\011\u043b\067\uffc1\001\002\000\004\067" +
    "\uffc2\001\002\000\004\067\uffca\001\002\000\016\035\u041f" +
    "\036\u0420\037\u0422\040\u0421\041\u041e\067\uffc4\001\002\000" +
    "\006\003\u043f\044\u0440\001\002\000\004\075\u0454\001\002" +
    "\000\016\005\051\006\053\007\063\011\u0411\012\u040b\036" +
    "\047\001\002\000\020\003\u0443\035\u041f\036\u0420\037\u0422" +
    "\040\u0421\041\u041e\075\u0442\001\002\000\016\005\051\006" +
    "\053\007\063\011\u0411\012\u040b\036\047\001\002\000\006" +
    "\067\uffc3\116\u0436\001\002\000\004\067\u03de\001\002\000" +
    "\040\011\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5" +
    "\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\115\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\004\115\u0447\001\002" +
    "\000\006\011\u043b\067\uffc1\001\002\000\004\067\uffc8\001" +
    "\002\000\022\003\u044a\035\u041f\036\u0420\037\u0422\040\u0421" +
    "\041\u041e\067\uffc3\116\u0436\001\002\000\004\067\u03de\001" +
    "\002\000\004\067\u03de\001\002\000\040\011\u03fa\024\052" +
    "\025\045\026\060\030\u03f9\031\u03f5\034\u0406\054\u03f7\067" +
    "\u03e1\074\u03fd\105\u0404\115\uffec\126\u0409\132\u03f0\136\u03fe" +
    "\001\002\000\004\115\u044e\001\002\000\006\011\u043b\067" +
    "\uffc1\001\002\000\004\067\uffcb\001\002\000\040\011\u03fa" +
    "\024\052\025\045\026\060\030\u03f9\031\u03f5\034\u0406\054" +
    "\u03f7\067\u03e1\074\u03fd\105\u0404\115\uffec\126\u0409\132\u03f0" +
    "\136\u03fe\001\002\000\004\115\u0452\001\002\000\006\011" +
    "\u043b\067\uffc1\001\002\000\004\067\uffc7\001\002\000\016" +
    "\005\051\006\053\007\063\011\u0411\012\u040b\036\047\001" +
    "\002\000\020\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e" +
    "\067\uffc3\116\u0436\001\002\000\004\067\u03de\001\002\000" +
    "\040\011\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5" +
    "\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\115\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\004\115\u0459\001\002" +
    "\000\006\011\u043b\067\uffc1\001\002\000\004\067\uffc9\001" +
    "\002\000\054\003\uffe7\011\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\034\uffe7\054\uffe7\067" +
    "\u03e1\074\uffe7\105\uffe7\106\uffe7\113\uffe7\114\uffe7\115\uffe7" +
    "\126\uffe7\132\uffe7\136\uffe7\001\002\000\010\003\u045e\022" +
    "\u03d0\073\u045d\001\002\000\010\060\035\061\024\062\032" +
    "\001\002\000\012\022\uffa7\027\uffa7\067\uffa7\106\uffa7\001" +
    "\002\000\014\022\u0460\027\uffa3\044\u0461\067\uffa3\106\uffa3" +
    "\001\002\000\004\011\u0333\001\002\000\016\005\051\006" +
    "\053\007\063\011\u0411\012\u040b\036\047\001\002\000\012" +
    "\022\uffa8\027\uffa8\067\uffa8\106\uffa8\001\002\000\024\022" +
    "\u0460\027\uffa3\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e" +
    "\067\uffa3\106\uffa3\001\002\000\012\022\uffa9\027\uffa9\067" +
    "\uffa9\106\uffa9\001\002\000\010\003\u0467\022\u03d0\073\u0466" +
    "\001\002\000\010\060\035\061\024\062\032\001\002\000" +
    "\012\022\u0460\027\uffa3\067\uffa3\106\uffa3\001\002\000\012" +
    "\022\uffa4\027\uffa4\067\uffa4\106\uffa4\001\002\000\014\022" +
    "\u0460\027\uffa3\044\u046a\067\uffa3\106\uffa3\001\002\000\016" +
    "\005\051\006\053\007\063\011\u0411\012\u040b\036\047\001" +
    "\002\000\012\022\uffa5\027\uffa5\067\uffa5\106\uffa5\001\002" +
    "\000\024\022\u0460\027\uffa3\035\u041f\036\u0420\037\u0422\040" +
    "\u0421\041\u041e\067\uffa3\106\uffa3\001\002\000\012\022\uffa6" +
    "\027\uffa6\067\uffa6\106\uffa6\001\002\000\004\140\u046f\001" +
    "\002\000\004\067\u03de\001\002\000\014\067\u03e1\107\ufff6" +
    "\112\ufff6\131\ufff6\140\ufff6\001\002\000\054\003\uffe4\011" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\034\uffe4\054\uffe4\067\u03e1\074\uffe4\105\uffe4\106" +
    "\uffe4\113\uffe4\114\uffe4\115\uffe4\126\uffe4\132\uffe4\136\uffe4" +
    "\001\002\000\024\003\u0412\005\051\006\053\007\063\011" +
    "\u0411\012\u040b\015\u0474\021\u040c\036\047\001\002\000\006" +
    "\015\u0475\070\u0429\001\002\000\010\027\uff9a\067\uff9a\106" +
    "\uff9a\001\002\000\010\027\uff9c\067\uff9c\106\uff9c\001\002" +
    "\000\040\011\u03fa\024\052\025\045\026\060\030\u03f9\031" +
    "\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\114\uffec" +
    "\126\u0409\132\u03f0\136\u03fe\001\002\000\004\114\u0478\001" +
    "\002\000\006\003\u0479\031\u047a\001\002\000\020\005\051" +
    "\006\053\007\063\011\u0411\012\u047c\036\047\052\u0480\001" +
    "\002\000\022\003\u047f\005\051\006\053\007\063\011\u0411" +
    "\012\u047c\036\047\052\u0480\001\002\000\014\003\uff7f\051" +
    "\u0482\053\u0483\067\uff7f\117\uff7f\001\002\000\020\005\051" +
    "\006\053\007\063\011\u0411\012\u040b\036\047\052\u0480\001" +
    "\002\000\004\067\uffbd\001\002\000\030\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\042\u048b\044\u048a\045\u0487\046" +
    "\u0486\047\u0489\050\u0488\001\002\000\004\067\uffbb\001\002" +
    "\000\020\005\051\006\053\007\063\011\u0411\012\u040b\036" +
    "\047\052\u0480\001\002\000\016\003\uff76\015\uff76\051\uff76" +
    "\053\uff76\067\uff76\117\uff76\001\002\000\020\005\051\006" +
    "\053\007\063\011\u0411\012\u040b\036\047\052\u0480\001\002" +
    "\000\020\005\051\006\053\007\063\011\u0411\012\u040b\036" +
    "\047\052\u0480\001\002\000\016\003\uff77\015\uff77\051\u0482" +
    "\053\uff77\067\uff77\117\uff77\001\002\000\016\003\uff78\015" +
    "\uff78\051\uff78\053\uff78\067\uff78\117\uff78\001\002\000\016" +
    "\005\051\006\053\007\063\011\u0411\012\u040b\036\047\001" +
    "\002\000\016\005\051\006\053\007\063\011\u0411\012\u040b" +
    "\036\047\001\002\000\016\005\051\006\053\007\063\011" +
    "\u0411\012\u040b\036\047\001\002\000\016\005\051\006\053" +
    "\007\063\011\u0411\012\u040b\036\047\001\002\000\016\005" +
    "\051\006\053\007\063\011\u0411\012\u040b\036\047\001\002" +
    "\000\016\005\051\006\053\007\063\011\u0411\012\u040b\036" +
    "\047\001\002\000\030\003\uff7e\015\uff7e\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff7e\053\uff7e\067\uff7e\117" +
    "\uff7e\001\002\000\030\003\uff7d\015\uff7d\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff7d\053\uff7d\067\uff7d\117" +
    "\uff7d\001\002\000\030\003\uff7a\015\uff7a\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff7a\053\uff7a\067\uff7a\117" +
    "\uff7a\001\002\000\030\003\uff79\015\uff79\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff79\053\uff79\067\uff79\117" +
    "\uff79\001\002\000\030\003\uff7c\015\uff7c\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff7c\053\uff7c\067\uff7c\117" +
    "\uff7c\001\002\000\030\003\uff7b\015\uff7b\035\u041f\036\u0420" +
    "\037\u0422\040\u0421\041\u041e\051\uff7b\053\uff7b\067\uff7b\117" +
    "\uff7b\001\002\000\010\015\u0494\051\u0482\053\u0483\001\002" +
    "\000\032\015\u042c\035\u041f\036\u0420\037\u0422\040\u0421\041" +
    "\u041e\042\u048b\044\u048a\045\u0487\046\u0486\047\u0489\050\u0488" +
    "\001\002\000\010\003\uff80\067\uff80\117\uff80\001\002\000" +
    "\004\067\uffbc\001\002\000\054\003\uffe8\011\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034" +
    "\uffe8\054\uffe8\067\u03e1\074\uffe8\105\uffe8\106\uffe8\113\uffe8" +
    "\114\uffe8\115\uffe8\126\uffe8\132\uffe8\136\uffe8\001\002\000" +
    "\010\027\uffa1\067\uffa1\106\uffa1\001\002\000\026\003\u049c" +
    "\005\051\006\053\007\063\011\u0411\012\u040b\024\052\025" +
    "\045\026\060\036\047\001\002\000\010\027\uff9f\067\uff9f" +
    "\106\uff9f\001\002\000\022\027\uff9e\035\u041f\036\u0420\037" +
    "\u0422\040\u0421\041\u041e\067\uff9e\106\uff9e\001\002\000\010" +
    "\027\uffa2\067\uffa2\106\uffa2\001\002\000\010\027\uffa0\067" +
    "\uffa0\106\uffa0\001\002\000\010\003\u04bc\067\u03de\117\u04bd" +
    "\001\002\000\004\117\u049f\001\002\000\024\011\u03fa\024" +
    "\052\025\045\026\060\054\u03f7\067\u03de\105\u0404\126\u0409" +
    "\136\u03fe\001\002\000\044\011\u03fa\023\uffec\024\052\025" +
    "\045\026\060\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7" +
    "\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\006\027\u04a2\067\uffd3\001\002\000\022" +
    "\011\u03fa\024\052\025\045\026\060\054\u03f7\105\u0404\126" +
    "\u0409\136\u03fe\001\002\000\004\067\uffd6\001\002\000\010" +
    "\023\u04a7\027\u04a5\106\uffcc\001\002\000\004\067\u03de\001" +
    "\002\000\004\106\u04b8\001\002\000\022\003\u04a9\005\051" +
    "\006\053\007\063\011\u0411\012\u047c\036\047\052\u0480\001" +
    "\002\000\006\067\u03de\117\u04b1\001\002\000\006\067\u03de" +
    "\117\u04aa\001\002\000\004\067\u03de\001\002\000\044\011" +
    "\u03fa\023\uffec\024\052\025\045\026\060\027\uffec\030\u03f9" +
    "\031\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106" +
    "\uffec\126\u0409\132\u03f0\136\u03fe\001\002\000\010\023\u04a7" +
    "\027\u04a5\106\uffcc\001\002\000\004\106\uffce\001\002\000" +
    "\044\011\u03fa\023\uffec\024\052\025\045\026\060\027\uffec" +
    "\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105" +
    "\u0404\106\uffec\126\u0409\132\u03f0\136\u03fe\001\002\000\010" +
    "\023\u04a7\027\u04a5\106\uffcc\001\002\000\004\106\uffcd\001" +
    "\002\000\004\067\u03de\001\002\000\044\011\u03fa\023\uffec" +
    "\024\052\025\045\026\060\027\uffec\030\u03f9\031\u03f5\034" +
    "\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409" +
    "\132\u03f0\136\u03fe\001\002\000\010\023\u04a7\027\u04a5\106" +
    "\uffcc\001\002\000\004\106\uffd0\001\002\000\044\011\u03fa" +
    "\023\uffec\024\052\025\045\026\060\027\uffec\030\u03f9\031" +
    "\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec" +
    "\126\u0409\132\u03f0\136\u03fe\001\002\000\010\023\u04a7\027" +
    "\u04a5\106\uffcc\001\002\000\004\106\uffd1\001\002\000\004" +
    "\030\u04b9\001\002\000\004\067\uffd4\001\002\000\040\011" +
    "\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5\034\u0406" +
    "\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409\132" +
    "\u03f0\136\u03fe\001\002\000\004\106\uffcf\001\002\000\022" +
    "\011\u03fa\024\052\025\045\026\060\054\u03f7\105\u0404\126" +
    "\u0409\136\u03fe\001\002\000\024\011\u03fa\024\052\025\045" +
    "\026\060\054\u03f7\067\u03de\105\u0404\126\u0409\136\u03fe\001" +
    "\002\000\044\011\u03fa\023\uffec\024\052\025\045\026\060" +
    "\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1\074" +
    "\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0\136\u03fe\001\002" +
    "\000\010\023\u04a7\027\u04a5\106\uffcc\001\002\000\004\106" +
    "\u04c1\001\002\000\006\003\u04c2\030\u04c3\001\002\000\004" +
    "\067\uffd9\001\002\000\004\067\uffda\001\002\000\044\011" +
    "\u03fa\023\uffec\024\052\025\045\026\060\027\uffec\030\u03f9" +
    "\031\u03f5\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106" +
    "\uffec\126\u0409\132\u03f0\136\u03fe\001\002\000\006\027\u04c6" +
    "\067\uffdd\001\002\000\022\011\u03fa\024\052\025\045\026" +
    "\060\054\u03f7\105\u0404\126\u0409\136\u03fe\001\002\000\004" +
    "\106\u04c8\001\002\000\006\003\u04c9\030\u04ca\001\002\000" +
    "\004\067\uffd7\001\002\000\004\067\uffdc\001\002\000\006" +
    "\027\u04d0\067\u03de\001\002\000\010\023\u04a7\027\u04a5\106" +
    "\uffcc\001\002\000\004\106\u04ce\001\002\000\004\030\u04cf" +
    "\001\002\000\004\067\uffdb\001\002\000\022\011\u03fa\024" +
    "\052\025\045\026\060\054\u03f7\105\u0404\126\u0409\136\u03fe" +
    "\001\002\000\004\106\u04d2\001\002\000\004\003\u04d3\001" +
    "\002\000\004\067\uffd8\001\002\000\006\027\u04d5\067\uffd2" +
    "\001\002\000\022\011\u03fa\024\052\025\045\026\060\054" +
    "\u03f7\105\u0404\126\u0409\136\u03fe\001\002\000\004\067\uffd5" +
    "\001\002\000\054\003\uffe6\011\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\034\uffe6\054\uffe6" +
    "\067\u03e1\074\uffe6\105\uffe6\106\uffe6\113\uffe6\114\uffe6\115" +
    "\uffe6\126\uffe6\132\uffe6\136\uffe6\001\002\000\022\027\uff94" +
    "\035\u041f\036\u0420\037\u0422\040\u0421\041\u041e\067\uff94\106" +
    "\uff94\001\002\000\010\027\uff93\067\uff93\106\uff93\001\002" +
    "\000\004\067\u03de\001\002\000\004\067\u03de\001\002\000" +
    "\040\011\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5" +
    "\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\004\106\u04de\001\002" +
    "\000\004\031\u04df\001\002\000\004\067\uffbf\001\002\000" +
    "\040\011\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5" +
    "\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\004\106\u04e2\001\002" +
    "\000\006\003\u04e3\031\u04e4\001\002\000\004\067\uffbe\001" +
    "\002\000\004\067\uffc0\001\002\000\054\003\uffe5\011\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\034\uffe5\054\uffe5\067\u03e1\074\uffe5\105\uffe5\106\uffe5" +
    "\113\uffe5\114\uffe5\115\uffe5\126\uffe5\132\uffe5\136\uffe5\001" +
    "\002\000\054\003\uffe9\011\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\034\uffe9\054\uffe9\067" +
    "\u03e1\074\uffe9\105\uffe9\106\uffe9\113\uffe9\114\uffe9\115\uffe9" +
    "\126\uffe9\132\uffe9\136\uffe9\001\002\000\010\027\uffaa\067" +
    "\uffaa\106\uffaa\001\002\000\020\003\u04eb\005\051\006\053" +
    "\007\063\011\u0411\012\u040b\036\047\001\002\000\020\003" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\036\uffb7" +
    "\001\002\000\016\035\u041f\036\u0420\037\u0422\040\u0421\041" +
    "\u041e\067\u03de\001\002\000\004\067\u03de\001\002\000\012" +
    "\003\u0144\067\u03e1\113\u0146\135\u0142\001\002\000\012\003" +
    "\u0144\106\u04ee\113\u0146\135\u0142\001\002\000\004\132\u04ef" +
    "\001\002\000\004\067\uffb9\001\002\000\014\003\u04f5\027" +
    "\u04f4\067\u03e1\113\u04f6\135\u0142\001\002\000\012\003\u0144" +
    "\106\u0511\113\u0146\135\u0142\001\002\000\004\067\u03de\001" +
    "\002\000\012\003\u0501\027\u04f4\106\u0503\113\u0502\001\002" +
    "\000\004\067\uffab\001\002\000\006\016\ufdbd\067\u03de\001" +
    "\002\000\014\003\u04f7\005\u04fb\006\u04f9\007\u04fa\036\u04f8" +
    "\001\002\000\004\067\uffac\001\002\000\006\005\u04fd\006" +
    "\u04fc\001\002\000\006\016\ufdc2\067\uffb0\001\002\000\006" +
    "\016\ufdc1\067\uffaf\001\002\000\006\016\ufdc3\067\uffb1\001" +
    "\002\000\006\016\ufdbf\067\uffad\001\002\000\006\016\ufdc0" +
    "\067\uffae\001\002\000\046\003\uffec\011\u03fa\024\052\025" +
    "\045\026\060\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7" +
    "\067\u03e1\074\u03fd\105\u0404\106\uffec\113\uffec\126\u0409\132" +
    "\u03f0\136\u03fe\001\002\000\012\003\uffb2\027\uffb2\106\uffb2" +
    "\113\uffb2\001\002\000\004\067\u03de\001\002\000\004\067" +
    "\u03de\001\002\000\014\003\u04f7\005\u0508\006\u0506\007\u0507" +
    "\036\u0505\001\002\000\004\132\u0504\001\002\000\004\067" +
    "\uffba\001\002\000\006\005\u050a\006\u0509\001\002\000\004" +
    "\067\uffb0\001\002\000\004\067\uffaf\001\002\000\004\067" +
    "\uffb1\001\002\000\004\067\uffad\001\002\000\004\067\uffae" +
    "\001\002\000\046\003\uffec\011\u03fa\024\052\025\045\026" +
    "\060\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1" +
    "\074\u03fd\105\u0404\106\uffec\113\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\012\003\uffb4\027\uffb4\106\uffb4\113\uffb4" +
    "\001\002\000\046\003\uffec\011\u03fa\024\052\025\045\026" +
    "\060\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1" +
    "\074\u03fd\105\u0404\106\uffec\113\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\012\003\uffb5\027\uffb5\106\uffb5\113\uffb5" +
    "\001\002\000\046\003\uffec\011\u03fa\024\052\025\045\026" +
    "\060\027\uffec\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1" +
    "\074\u03fd\105\u0404\106\uffec\113\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\012\003\uffb3\027\uffb3\106\uffb3\113\uffb3" +
    "\001\002\000\004\003\u0512\001\002\000\004\067\uffb8\001" +
    "\002\000\006\003\u0521\073\u0520\001\002\000\006\015\uff8e" +
    "\022\uff8e\001\002\000\010\003\uff91\067\uff91\073\uff91\001" +
    "\002\000\004\011\u051c\001\002\000\006\015\uff89\022\uff89" +
    "\001\002\000\006\015\u051a\022\u0519\001\002\000\010\003" +
    "\u0517\011\u0513\055\u0516\001\002\000\010\003\uff92\067\uff92" +
    "\073\uff92\001\002\000\006\015\uff8f\022\uff8f\001\002\000" +
    "\006\003\u051e\073\u051d\001\002\000\010\060\035\061\024" +
    "\062\032\001\002\000\006\015\uff8a\022\uff8a\001\002\000" +
    "\006\015\uff8d\022\uff8d\001\002\000\010\060\035\061\024" +
    "\062\032\001\002\000\006\015\uff8b\022\uff8b\001\002\000" +
    "\006\015\uff8c\022\uff8c\001\002\000\006\003\u0525\073\u0524" +
    "\001\002\000\010\060\035\061\024\062\032\001\002\000" +
    "\004\067\u03de\001\002\000\040\011\u03fa\024\052\025\045" +
    "\026\060\030\u03f9\031\u03f5\034\u0406\054\u03f7\067\u03e1\074" +
    "\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0\136\u03fe\001\002" +
    "\000\004\106\u0528\001\002\000\004\140\u0529\001\002\000" +
    "\004\067\u03de\001\002\000\014\067\u03e1\107\ufff7\112\ufff7" +
    "\131\ufff7\140\ufff7\001\002\000\006\003\u052c\067\u03de\001" +
    "\002\000\036\011\u03fa\024\052\025\045\026\060\030\u03f9" +
    "\031\u03f5\034\u0406\054\u03f7\074\u03fd\105\u0404\106\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\042\003\uffec\011\u03fa" +
    "\024\052\025\045\026\060\030\u03f9\031\u03f5\034\u0406\054" +
    "\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0" +
    "\136\u03fe\001\002\000\006\003\u052f\106\u0530\001\002\000" +
    "\012\107\ufff4\112\ufff4\131\ufff4\140\ufff4\001\002\000\006" +
    "\003\u0531\140\u0532\001\002\000\012\107\ufff5\112\ufff5\131" +
    "\ufff5\140\ufff5\001\002\000\004\067\u03de\001\002\000\014" +
    "\067\u03e1\107\ufff8\112\ufff8\131\ufff8\140\ufff8\001\002\000" +
    "\004\106\u0535\001\002\000\004\140\u0536\001\002\000\012" +
    "\107\ufff3\112\ufff3\131\ufff3\140\ufff3\001\002\000\010\003" +
    "\uff90\012\u03eb\067\uff90\001\002\000\006\012\u03eb\067\uff90" +
    "\001\002\000\004\067\u03de\001\002\000\040\011\u03fa\024" +
    "\052\025\045\026\060\030\u03f9\031\u03f5\034\u0406\054\u03f7" +
    "\067\u03e1\074\u03fd\105\u0404\106\uffec\126\u0409\132\u03f0\136" +
    "\u03fe\001\002\000\004\106\u053c\001\002\000\004\107\u053d" +
    "\001\002\000\004\067\u03de\001\002\000\014\067\u03e1\107" +
    "\ufff1\112\ufff1\131\ufff1\140\ufff1\001\002\000\006\003\u0540" +
    "\067\u03de\001\002\000\036\011\u03fa\024\052\025\045\026" +
    "\060\030\u03f9\031\u03f5\034\u0406\054\u03f7\074\u03fd\105\u0404" +
    "\106\uffec\126\u0409\132\u03f0\136\u03fe\001\002\000\042\003" +
    "\uffec\011\u03fa\024\052\025\045\026\060\030\u03f9\031\u03f5" +
    "\034\u0406\054\u03f7\067\u03e1\074\u03fd\105\u0404\106\uffec\126" +
    "\u0409\132\u03f0\136\u03fe\001\002\000\006\003\u0543\106\u0544" +
    "\001\002\000\012\107\uffef\112\uffef\131\uffef\140\uffef\001" +
    "\002\000\006\003\u0546\107\u0545\001\002\000\004\067\u03de" +
    "\001\002\000\012\107\ufff0\112\ufff0\131\ufff0\140\ufff0\001" +
    "\002\000\014\067\u03e1\107\ufff2\112\ufff2\131\ufff2\140\ufff2" +
    "\001\002\000\004\106\u0549\001\002\000\004\107\u054a\001" +
    "\002\000\012\107\uffee\112\uffee\131\uffee\140\uffee\001\002" +
    "\000\012\107\ufffc\112\ufffc\131\ufffc\140\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0549\000\006\230\005\231\004\001\001\000\004\236" +
    "\u03de\001\001\000\004\237\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\243\u02e2\001\001\000\012\240" +
    "\014\241\011\242\012\250\015\001\001\000\006\242\u02e0" +
    "\250\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\025\102\032\142\026\143\027\144\024\152\033\250\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\025\102\032\144\u02d7" +
    "\152\033\250\030\001\001\000\006\102\123\103\121\001" +
    "\001\000\002\001\001\000\006\153\037\154\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\154\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\062\061\101\045\112\047\114" +
    "\060\117\053\124\054\001\001\000\010\062\117\112\047" +
    "\124\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\062\074\112\047\124\054\001\001\000\010\062\073" +
    "\112\047\124\054\001\001\000\010\062\072\112\047\124" +
    "\054\001\001\000\010\062\071\112\047\124\054\001\001" +
    "\000\010\062\070\112\047\124\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\062\101\112" +
    "\047\124\054\215\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\062" +
    "\106\112\047\124\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\102" +
    "\127\210\126\211\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\015\165\016\174\017\152" +
    "\020\162\021\171\022\164\023\143\024\173\025\170\101" +
    "\045\102\032\117\166\124\154\145\150\146\157\147\167" +
    "\150\147\152\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\062\u02b1\112\047\124\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\165\016" +
    "\174\017\152\020\162\021\171\022\164\023\143\024\173" +
    "\025\170\101\045\102\032\117\166\124\154\147\346\150" +
    "\147\152\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\061\204\062\203\112\047\121\201\124\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\061\210\062" +
    "\203\112\047\124\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\062\221\071\217\112\047\124\054\001" +
    "\001\000\002\001\001\000\012\062\221\071\236\112\047" +
    "\124\054\001\001\000\002\001\001\000\010\062\235\112" +
    "\047\124\054\001\001\000\010\062\234\112\047\124\054" +
    "\001\001\000\010\062\233\112\047\124\054\001\001\000" +
    "\010\062\232\112\047\124\054\001\001\000\010\062\231" +
    "\112\047\124\054\001\001\000\010\062\230\112\047\124" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\062\221\071\242\112\047" +
    "\124\054\001\001\000\012\062\221\071\241\112\047\124" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\062\256\112\047\124\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\165\016\174\017\152\020\162\021\171\022\164" +
    "\023\143\024\173\025\170\101\045\102\032\117\166\124" +
    "\154\145\254\146\157\147\167\150\147\152\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\062\261\112\047\124\054\001\001" +
    "\000\002\001\001\000\012\062\221\071\263\112\047\124" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\165\016\174\017\152\020\162" +
    "\021\171\022\164\023\143\024\173\025\170\101\045\102" +
    "\032\117\166\124\154\145\272\146\157\147\167\150\147" +
    "\152\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\165\016" +
    "\174\017\152\020\162\021\171\022\164\023\143\024\173" +
    "\025\170\101\045\102\032\117\166\124\154\145\302\146" +
    "\157\147\167\150\147\152\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\015\165\016\174\017\152\020" +
    "\162\021\171\022\164\023\143\024\173\025\170\101\045" +
    "\102\032\117\166\124\154\145\305\146\157\147\167\150" +
    "\147\152\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\062\221\071\310\112\047\124\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\165\016" +
    "\174\017\152\020\162\021\171\022\164\023\143\024\173" +
    "\025\170\101\045\102\032\117\166\124\154\145\316\146" +
    "\157\147\167\150\147\152\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\015\165\016\174\017\152\020" +
    "\162\021\171\022\164\023\143\024\173\025\170\101\045" +
    "\102\032\117\166\124\154\145\321\146\157\147\167\150" +
    "\147\152\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\061\204\062" +
    "\203\112\047\121\326\124\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\165\016\174\017\152\020\162" +
    "\021\171\022\164\023\143\024\173\025\170\101\045\102" +
    "\032\117\166\124\154\145\334\146\157\147\167\150\147" +
    "\152\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\062\221\071\342\112\047\124\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\062\061\101" +
    "\045\112\047\114\351\117\053\124\054\001\001\000\002" +
    "\001\001\000\016\062\061\101\045\112\047\114\353\117" +
    "\053\124\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\062\221\071\356\112\047\124\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\015\165\016\174\017\152\020\162\021\171\022\164\023" +
    "\143\024\173\025\170\101\045\102\032\117\166\124\154" +
    "\145\362\146\157\147\167\150\147\152\145\001\001\000" +
    "\002\001\001\000\004\052\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\165\016\174\017\152\020\162\021\171\022\164" +
    "\023\143\024\173\025\170\101\045\102\032\117\166\124" +
    "\154\145\371\146\157\147\167\150\147\152\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\062\221\071\375\112\047\124\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\015" +
    "\165\016\174\017\152\020\162\021\171\022\164\023\143" +
    "\024\173\025\170\101\045\102\032\117\166\124\154\145" +
    "\u0101\146\157\147\167\150\147\152\145\001\001\000\002" +
    "\001\001\000\004\052\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\015\165\016\174" +
    "\017\152\020\162\021\171\022\164\023\143\024\173\025" +
    "\170\101\045\102\032\117\166\124\154\145\u0107\146\157" +
    "\147\167\150\147\152\145\001\001\000\002\001\001\000" +
    "\004\052\u0109\001\001\000\002\001\001\000\046\015\165" +
    "\016\174\017\152\020\162\021\171\022\164\023\143\024" +
    "\173\025\170\101\045\102\032\117\166\124\154\145\u010b" +
    "\146\157\147\167\150\147\152\145\001\001\000\002\001" +
    "\001\000\004\052\u010d\001\001\000\002\001\001\000\026" +
    "\022\164\023\143\024\173\025\170\101\045\102\032\117" +
    "\166\124\154\150\u010f\152\145\001\001\000\002\001\001" +
    "\000\004\052\u0115\001\001\000\046\015\165\016\174\017" +
    "\152\020\162\021\171\022\164\023\143\024\173\025\170" +
    "\101\045\102\032\117\166\124\154\145\u0112\146\157\147" +
    "\167\150\147\152\145\001\001\000\002\001\001\000\004" +
    "\052\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\165\016\174\017\152\020\162" +
    "\021\171\022\164\023\143\024\173\025\170\101\045\102" +
    "\032\117\166\124\154\145\u0118\146\157\147\167\150\147" +
    "\152\145\001\001\000\002\001\001\000\004\052\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\062\u011e" +
    "\112\047\124\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\106\u0125" +
    "\204\u0123\001\001\000\002\001\001\000\004\106\u0137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\015\165\016\174\017\152\020\162\021\171\022\164\023" +
    "\143\024\173\025\170\101\045\102\032\117\166\124\154" +
    "\145\u012f\146\157\147\167\150\147\151\u012e\152\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\015\165" +
    "\016\174\017\152\020\162\021\171\022\164\023\143\024" +
    "\173\025\170\101\045\102\032\117\166\124\154\145\u0131" +
    "\146\157\147\167\150\147\152\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\015\165\016\174\017\152" +
    "\020\162\021\171\022\164\023\143\024\173\025\170\101" +
    "\045\102\032\117\166\124\154\145\u012f\146\157\147\167" +
    "\150\147\151\u0134\152\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\015\165\016\174\017\152\020\162\021\171\022\164\023" +
    "\143\024\173\025\170\101\045\102\032\117\166\124\154" +
    "\145\u012f\146\157\147\167\150\147\151\u0139\152\145\001" +
    "\001\000\002\001\001\000\050\015\165\016\174\017\152" +
    "\020\162\021\171\022\164\023\143\024\173\025\170\101" +
    "\045\102\032\117\166\124\154\145\u012f\146\157\147\167" +
    "\150\147\151\u013b\152\145\001\001\000\002\001\001\000" +
    "\006\106\u0125\204\u013d\001\001\000\004\106\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\111\u0144\205" +
    "\u0142\001\001\000\002\001\001\000\004\111\u01d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\034" +
    "\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f" +
    "\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130" +
    "\u0170\131\u016d\172\u015d\175\u015a\176\u0160\177\u0169\200\u0167" +
    "\201\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c" +
    "\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045" +
    "\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d" +
    "\175\u0278\176\u0160\177\u0169\200\u0167\001\001\000\002\001" +
    "\001\000\010\130\u0245\132\u0243\173\u0246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\225\u0206\001\001\000\046" +
    "\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042" +
    "\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b" +
    "\130\u0170\131\u016d\172\u015d\177\u0205\200\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042" +
    "\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b" +
    "\130\u0170\131\u016d\172\u015d\175\u0172\176\u0160\177\u0169\200" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\066\u017c\074\u017d\112\u017b\126\u017e\001\001" +
    "\000\010\066\u01ac\112\u017b\126\u017e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\066\u017c\074\u0182\112\u017b\126\u017e\001\001\000\002" +
    "\001\001\000\012\066\u017c\074\u0186\112\u017b\126\u017e\001" +
    "\001\000\012\066\u017c\074\u0185\112\u017b\126\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\u01a0\112\u017b\126\u017e\001\001\000\010\066\u019f\112" +
    "\u017b\126\u017e\001\001\000\010\066\u019e\112\u017b\126\u017e" +
    "\001\001\000\010\066\u019d\112\u017b\126\u017e\001\001\000" +
    "\010\066\u019c\112\u017b\126\u017e\001\001\000\010\066\u019b" +
    "\112\u017b\126\u017e\001\001\000\010\066\u019a\112\u017b\126" +
    "\u017e\001\001\000\010\066\u0199\112\u017b\126\u017e\001\001" +
    "\000\010\066\u0198\112\u017b\126\u017e\001\001\000\010\066" +
    "\u0197\112\u017b\126\u017e\001\001\000\010\066\u0196\112\u017b" +
    "\126\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\066\u01a7\112\u017b\126\u017e\223\u01a6\224\u01a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\066\u01aa\112\u017b\126\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\066\u01a7\112\u017b" +
    "\126\u017e\223\u01b1\224\u01a8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\066\u01b5\112\u017b" +
    "\126\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\066\u017c\074\u01b9\112\u017b\126\u017e" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\034" +
    "\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f" +
    "\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130" +
    "\u0170\131\u016d\172\u015d\175\u01bc\176\u0160\177\u0169\200\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c" +
    "\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045" +
    "\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d" +
    "\175\u01c1\176\u0160\177\u0169\200\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\034\u015c" +
    "\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043" +
    "\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170" +
    "\131\u016d\172\u015d\175\u01c5\176\u0160\177\u0169\200\u0167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041" +
    "\u0166\042\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159" +
    "\126\u015b\130\u0170\131\u016d\172\u015d\175\u01c9\176\u0160\177" +
    "\u0169\200\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\u01d2\112\u017b\126\u017e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\111\u0144\205\u01d5\001\001\000\004" +
    "\111\u01d6\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166" +
    "\042\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126" +
    "\u015b\130\u0170\131\u016d\172\u015d\175\u015a\176\u0160\177\u0169" +
    "\200\u0167\201\u01d9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u0144\205\u01dd\001\001" +
    "\000\004\111\u01d6\001\001\000\002\001\001\000\006\111" +
    "\u0144\205\u01e0\001\001\000\004\111\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\u0144\205\u01e5\001\001\000\004\111\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\100\u01ed\107\u01ea\110" +
    "\u01f0\213\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\100\u01ed\107\u01f3\110\u01f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\066\u01f7\112\u017b\126\u017e\222\u01f9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\u0203\112\u017b\126\u017e\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\066\u01fe\112\u017b\126" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\066\u0201\112\u017b\126\u017e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\u0208\112\u017b\126\u017e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\u020d\112\u017b\126\u017e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\066\u017c\074\u0213\112\u017b" +
    "\126\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166" +
    "\042\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126" +
    "\u015b\130\u0170\131\u016d\172\u015d\175\u0216\176\u0160\177\u0169" +
    "\200\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\034\u015c\035\u016a" +
    "\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044" +
    "\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d" +
    "\172\u015d\175\u021b\176\u0160\177\u0169\200\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042" +
    "\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b" +
    "\130\u0170\131\u016d\172\u015d\175\u021f\176\u0160\177\u0169\200" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\034\u015c\035\u016a" +
    "\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044" +
    "\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d" +
    "\172\u015d\175\u0227\176\u0160\177\u0169\200\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\066\u017c\074\u022c\112\u017b\126\u017e\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\034\u015c" +
    "\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043" +
    "\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170" +
    "\131\u016d\172\u015d\175\u022f\176\u0160\177\u0169\200\u0167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c\037" +
    "\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045\u014e" +
    "\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d\175" +
    "\u0234\176\u0160\177\u0169\200\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\034\u015c\035" +
    "\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153" +
    "\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131" +
    "\u016d\172\u015d\175\u0238\176\u0160\177\u0169\200\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u023b\001" +
    "\001\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c" +
    "\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045" +
    "\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d" +
    "\175\u023d\176\u0160\177\u0169\200\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c" +
    "\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045" +
    "\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d" +
    "\175\u0240\176\u0160\177\u0169\200\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\115\u0250\225\u0206\001\001" +
    "\000\004\130\u024f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\u024b" +
    "\001\001\000\002\001\001\000\010\066\u024c\112\u017b\126" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\225\u0206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0252\001\001\000\002\001\001" +
    "\000\010\066\u0254\112\u017b\126\u017e\001\001\000\002\001" +
    "\001\000\010\066\u0256\112\u017b\126\u017e\001\001\000\002" +
    "\001\001\000\012\066\u017c\074\u0258\112\u017b\126\u017e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u025f" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\066" +
    "\u0264\112\u017b\126\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\034\u015c\035\u016a\036" +
    "\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b" +
    "\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172" +
    "\u015d\175\u0262\176\u0160\177\u0169\200\u0167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\066\u017c\074\u0267\112\u017b\126\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u026b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c\037" +
    "\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045\u014e" +
    "\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d\175" +
    "\u026f\176\u0160\177\u0169\200\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\034\u015c\035" +
    "\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153" +
    "\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131" +
    "\u016d\172\u015d\175\u0273\176\u0160\177\u0169\200\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\034\u015c\035" +
    "\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153" +
    "\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131" +
    "\u016d\172\u015d\175\u0276\176\u0160\177\u0169\200\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\066\u01a7\112\u017b\126\u017e\223\u027d\224\u01a8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\174\u0288\001\001\000\002" +
    "\001\001\000\006\220\u0292\221\u028c\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\220\u028d\221\u028c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\066\u01a7\112\u017b\126\u017e\223\u028f\224\u01a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\100\u0296\110\u0298" +
    "\116\u0295\001\001\000\002\001\001\000\004\110\u029c\001" +
    "\001\000\004\100\u029a\001\001\000\004\100\u0299\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\u029e\001" +
    "\001\000\004\100\u029d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\130\u0170\131\u02a3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\u0144\205\u02ac\001\001\000\004\111" +
    "\u01d6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\062\221\071\u02b4\112\047\124\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\165\016\174\017\152\020\162\021\171\022\164" +
    "\023\143\024\173\025\170\101\045\102\032\117\166\124" +
    "\154\145\u02b8\146\157\147\167\150\147\152\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\165\016\174\017\152\020\162" +
    "\021\171\022\164\023\143\024\173\025\170\101\045\102" +
    "\032\117\166\124\154\145\u02bd\146\157\147\167\150\147" +
    "\152\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\165\016\174\017\152\020\162\021\171\022\164" +
    "\023\143\024\173\025\170\101\045\102\032\117\166\124" +
    "\154\145\u02c0\146\157\147\167\150\147\152\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\165\016" +
    "\174\017\152\020\162\021\171\022\164\023\143\024\173" +
    "\025\170\101\045\102\032\117\166\124\154\145\u02c3\146" +
    "\157\147\167\150\147\152\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\102\127\210\u02c8\211\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\015\165\016\174\017\152\020" +
    "\162\021\171\022\164\023\143\024\173\025\170\101\045" +
    "\102\032\117\166\124\154\145\u02cb\146\157\147\167\150" +
    "\147\152\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\102\127\210\u02cf\211\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\015\165" +
    "\016\174\017\152\020\162\021\171\022\164\023\143\024" +
    "\173\025\170\101\045\102\032\117\166\124\154\145\u02d2" +
    "\146\157\147\167\150\147\152\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\015\165\016\174\017\152" +
    "\020\162\021\171\022\164\023\143\024\173\025\170\101" +
    "\045\102\032\117\166\124\154\145\u02d5\146\157\147\167" +
    "\150\147\152\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\025" +
    "\102\032\142\u02da\143\027\144\024\152\033\250\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\025\102\032\142\u02de\143\027\144\024\152" +
    "\033\250\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\247\u02e3\001" +
    "\001\000\002\001\001\000\010\032\u02e8\162\u02e7\163\u02e5" +
    "\001\001\000\004\032\u0327\001\001\000\002\001\001\000" +
    "\010\164\u02ea\165\u02ec\166\u02eb\001\001\000\002\001\001" +
    "\000\004\102\u030a\001\001\000\014\102\u0159\167\u02f0\170" +
    "\u02ef\171\u02f2\172\u02f1\001\001\000\002\001\001\000\004" +
    "\166\u02ed\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\102\u0159\171\u0306\172\u02f1\001\001\000\004\202\u02f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\034\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041" +
    "\u0166\042\u014f\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159" +
    "\126\u015b\130\u0170\131\u016d\172\u015d\175\u0305\176\u0160\177" +
    "\u0169\200\u0167\001\001\000\002\001\001\000\052\034\u015c" +
    "\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043" +
    "\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170" +
    "\131\u016d\172\u015d\175\u0304\176\u0160\177\u0169\200\u0167\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\034\u015c" +
    "\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f\043" +
    "\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130\u0170" +
    "\131\u016d\172\u015d\175\u02fd\176\u0160\177\u0169\200\u0167\001" +
    "\001\000\002\001\001\000\052\034\u015c\035\u016a\036\u016c" +
    "\037\u014d\040\u0155\041\u0166\042\u014f\043\u0153\044\u016b\045" +
    "\u014e\046\u0165\102\u0159\126\u015b\130\u0170\131\u016d\172\u015d" +
    "\175\u0303\176\u0160\177\u0169\200\u0167\001\001\000\052\034" +
    "\u015c\035\u016a\036\u016c\037\u014d\040\u0155\041\u0166\042\u014f" +
    "\043\u0153\044\u016b\045\u014e\046\u0165\102\u0159\126\u015b\130" +
    "\u0170\131\u016d\172\u015d\175\u0300\176\u0160\177\u0169\200\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\174\u0288\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\066\u030f\112" +
    "\u017b\126\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u031a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\227\u0321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u031d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\244\u032b\245\u032c" +
    "\246\u0329\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\246\u032d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\212\u0334\226\u0333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\026\u033a\047\u033d\101\045" +
    "\117\u033c\125\u033b\157\u033e\160\u033f\161\u0339\226\u0342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\u034a\112\u0347\125\u0348\001\001\000\010\064\u035d\112\u0347" +
    "\125\u0348\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\064\u0354\112\u0347" +
    "\125\u0348\001\001\000\010\064\u0353\112\u0347\125\u0348\001" +
    "\001\000\010\064\u0352\112\u0347\125\u0348\001\001\000\010" +
    "\064\u0351\112\u0347\125\u0348\001\001\000\010\064\u0350\112" +
    "\u0347\125\u0348\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\064\u0357\112\u0347\125\u0348\217\u0356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\u035c\112\u0347\125\u0348\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\026\u033a\027\u0365\030\u0362\031\u0369\047\u033d" +
    "\101\045\117\u033c\125\u033b\155\u0364\156\u0366\160\u0361\161" +
    "\u0339\226\u0342\001\001\000\014\064\u038d\072\u03c0\073\u038a" +
    "\112\u0347\125\u0348\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\064\u038d\072\u038b\073\u038a\112\u0347\125\u0348" +
    "\001\001\000\032\026\u033a\027\u0365\030\u0362\031\u0369\047" +
    "\u033d\101\045\117\u033c\125\u033b\156\u0388\160\u0361\161\u0339" +
    "\226\u0342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\u0370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\026" +
    "\u033a\047\u033d\101\045\117\u033c\125\u033b\157\u0374\160\u033f" +
    "\161\u0339\226\u0342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\064\u0379\112\u0347\125\u0348" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\u037e\112\u0347\125\u0348\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\u0383\112\u0347\125\u0348\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\064\u03bb\073\u03b9\112\u0347\125" +
    "\u0348\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\u03a0\054\u03a3\001\001\000\002\001\001\000\012\064" +
    "\u038d\073\u038f\112\u0347\125\u0348\001\001\000\002\001\001" +
    "\000\012\064\u038d\073\u0393\112\u0347\125\u0348\001\001\000" +
    "\012\064\u038d\073\u0392\112\u0347\125\u0348\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\064\u039f\112\u0347\125" +
    "\u0348\001\001\000\010\064\u039e\112\u0347\125\u0348\001\001" +
    "\000\010\064\u039d\112\u0347\125\u0348\001\001\000\010\064" +
    "\u039c\112\u0347\125\u0348\001\001\000\010\064\u039b\112\u0347" +
    "\125\u0348\001\001\000\010\064\u039a\112\u0347\125\u0348\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\064\u038d\072\u03a8\073\u038a\112\u0347" +
    "\125\u0348\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\026\u033a\047\u033d\101\045\117\u033c" +
    "\125\u033b\157\u03a6\160\u033f\161\u0339\226\u0342\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\u03a0\054\u03aa\001\001\000\002\001\001\000\006\053" +
    "\u03a0\054\u03b1\001\001\000\024\026\u033a\047\u033d\101\045" +
    "\117\u033c\125\u033b\157\u03ad\160\u033f\161\u0339\226\u0342\001" +
    "\001\000\006\053\u03a0\054\u03b0\001\001\000\006\053\u03a0" +
    "\054\u03af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\u03a0\054\u03b8\001\001\000\024" +
    "\026\u033a\047\u033d\101\045\117\u033c\125\u033b\157\u03b4\160" +
    "\u033f\161\u0339\226\u0342\001\001\000\006\053\u03a0\054\u03b7" +
    "\001\001\000\006\053\u03a0\054\u03b6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\026\u033a\047\u033d\101\045\117\u033c\125\u033b\157\u03c2\160" +
    "\u033f\161\u0339\226\u0342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\063" +
    "\u03ca\064\u03c9\112\u0347\122\u03c7\125\u0348\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\063\u03ce\064\u03c9\112\u0347" +
    "\125\u0348\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\064\u03d4\112\u0347\125\u0348\216\u03d2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\064\u03d7" +
    "\112\u0347\125\u0348\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\064\u03dc" +
    "\101\045\112\u0347\117\u03db\125\u0348\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\u03e2" +
    "\003\u03e4\232\u03e3\233\u03df\234\u03e1\250\u03e5\001\001\000" +
    "\012\002\u03e2\003\u03e4\234\u054a\250\u03e5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\206\u0522\001\001\000\004\206" +
    "\u03eb\001\001\000\006\105\u0513\207\u0517\001\001\000\002" +
    "\001\001\000\004\102\u03ed\001\001\000\004\236\u03ee\001" +
    "\001\000\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3" +
    "\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133" +
    "\u0402\134\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001" +
    "\000\004\235\u04e7\001\001\000\004\141\u04e6\001\001\000" +
    "\002\001\001\000\004\236\u04e5\001\001\000\004\236\u04e4" +
    "\001\001\000\014\057\u047d\067\u04d9\070\u047a\112\u040d\123" +
    "\u040e\001\001\000\002\001\001\000\010\057\u04d7\112\u040d" +
    "\123\u040e\001\001\000\004\236\u04d6\001\001\000\014\057" +
    "\u047d\067\u049c\070\u047a\112\u040d\123\u040e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\236\u0495\001\001\000" +
    "\004\236\u0475\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\236\u0470\001" +
    "\001\000\002\001\001\000\004\226\u045b\001\001\000\004" +
    "\236\u045a\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1" +
    "\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\135\u042c\136" +
    "\u0401\137\u0400\140\u03f0\001\001\000\002\001\001\000\014" +
    "\056\u0412\057\u040f\112\u040d\120\u040c\123\u040e\001\001\000" +
    "\010\057\u042a\112\u040d\123\u040e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\057\u0415\112\u040d\123" +
    "\u040e\214\u0418\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\u041b\112" +
    "\u040d\123\u040e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\057\u0426\112\u040d\123\u040e\001" +
    "\001\000\010\057\u0425\112\u040d\123\u040e\001\001\000\010" +
    "\057\u0424\112\u040d\123\u040e\001\001\000\010\057\u0423\112" +
    "\u040d\123\u040e\001\001\000\010\057\u0422\112\u040d\123\u040e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u0429\057\u040f\112\u040d\123\u040e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\075\u043d\102\u0430\001\001\000\006\075" +
    "\u042f\102\u0430\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\057\u0432\112\u040d\123\u040e\001\001\000\002\001" +
    "\001\000\010\057\u0434\112\u040d\123\u040e\001\001\000\004" +
    "\055\u0436\001\001\000\010\057\u043c\112\u040d\123\u040e\001" +
    "\001\000\004\236\u0437\001\001\000\044\004\u03f2\005\u03fb" +
    "\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\133\u0438\134\u0407\135\u03f5\136\u0401" +
    "\137\u0400\140\u03f0\001\001\000\002\001\001\000\004\076" +
    "\u043b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\u0440\112\u040d\123\u040e\001\001\000\002\001\001\000\010" +
    "\057\u0448\112\u040d\123\u040e\001\001\000\004\055\u0443\001" +
    "\001\000\004\236\u0444\001\001\000\044\004\u03f2\005\u03fb" +
    "\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\133\u0445\134\u0407\135\u03f5\136\u0401" +
    "\137\u0400\140\u03f0\001\001\000\002\001\001\000\004\076" +
    "\u0447\001\001\000\002\001\001\000\004\055\u044a\001\001" +
    "\000\004\236\u044f\001\001\000\004\236\u044b\001\001\000" +
    "\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1" +
    "\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u044c\134" +
    "\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002" +
    "\001\001\000\004\076\u044e\001\001\000\002\001\001\000" +
    "\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1" +
    "\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u0450\134" +
    "\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002" +
    "\001\001\000\004\076\u0452\001\001\000\002\001\001\000" +
    "\010\057\u0454\112\u040d\123\u040e\001\001\000\004\055\u0455" +
    "\001\001\000\004\236\u0456\001\001\000\044\004\u03f2\005" +
    "\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa" +
    "\101\045\117\u03ff\123\u0406\133\u0457\134\u0407\135\u03f5\136" +
    "\u0401\137\u0400\140\u03f0\001\001\000\002\001\001\000\004" +
    "\076\u0459\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u045e\001\001\000\002\001\001" +
    "\000\004\141\u0461\001\001\000\004\226\u0464\001\001\000" +
    "\010\057\u0462\112\u040d\123\u040e\001\001\000\002\001\001" +
    "\000\004\141\u0463\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0468\001\001\000\004\141\u0467\001\001" +
    "\000\002\001\001\000\004\141\u046a\001\001\000\010\057" +
    "\u046b\112\u040d\123\u040e\001\001\000\002\001\001\000\004" +
    "\141\u046c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\236\u046f\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\056\u0412\057\u040f\112\u040d\120\u0472\123\u040e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011" +
    "\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u0476" +
    "\134\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\057\u047d\067\u0494" +
    "\070\u047a\112\u040d\123\u040e\001\001\000\014\057\u047d\067" +
    "\u047c\070\u047a\112\u040d\123\u040e\001\001\000\002\001\001" +
    "\000\012\057\u0492\070\u0491\112\u040d\123\u040e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\057\u047d\070\u0480\112\u040d\123\u040e\001\001\000\002\001" +
    "\001\000\012\057\u047d\070\u0484\112\u040d\123\u040e\001\001" +
    "\000\012\057\u047d\070\u0483\112\u040d\123\u040e\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\057\u0490\112\u040d" +
    "\123\u040e\001\001\000\010\057\u048f\112\u040d\123\u040e\001" +
    "\001\000\010\057\u048e\112\u040d\123\u040e\001\001\000\010" +
    "\057\u048d\112\u040d\123\u040e\001\001\000\010\057\u048c\112" +
    "\u040d\123\u040e\001\001\000\010\057\u048b\112\u040d\123\u040e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\057\u0499\101\045\112\u040d\113\u049a\117\u0498\123\u040e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\236\u04bd\001\001\000\002\001" +
    "\001\000\026\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff" +
    "\123\u0406\136\u04a0\137\u0400\140\u03f0\236\u049f\001\001\000" +
    "\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1" +
    "\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u04a3\134" +
    "\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002" +
    "\001\001\000\024\011\u03f1\012\u03fe\013\u03fa\101\045\117" +
    "\u03ff\123\u0406\136\u04a2\137\u0400\140\u03f0\001\001\000\002" +
    "\001\001\000\004\051\u04a5\001\001\000\004\236\u04b9\001" +
    "\001\000\002\001\001\000\014\057\u047d\067\u04a7\070\u047a" +
    "\112\u040d\123\u040e\001\001\000\004\236\u04b1\001\001\000" +
    "\004\236\u04aa\001\001\000\004\236\u04ad\001\001\000\044" +
    "\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012" +
    "\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u04ab\134\u0407" +
    "\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\004\051" +
    "\u04ac\001\001\000\002\001\001\000\044\004\u03f2\005\u03fb" +
    "\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\133\u04ae\134\u0407\135\u03f5\136\u0401" +
    "\137\u0400\140\u03f0\001\001\000\004\051\u04af\001\001\000" +
    "\002\001\001\000\004\236\u04b4\001\001\000\044\004\u03f2" +
    "\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013" +
    "\u03fa\101\045\117\u03ff\123\u0406\133\u04b2\134\u0407\135\u03f5" +
    "\136\u0401\137\u0400\140\u03f0\001\001\000\004\051\u04b3\001" +
    "\001\000\002\001\001\000\044\004\u03f2\005\u03fb\006\u0404" +
    "\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101\045\117" +
    "\u03ff\123\u0406\133\u04b5\134\u0407\135\u03f5\136\u0401\137\u0400" +
    "\140\u03f0\001\001\000\004\051\u04b6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u03f2" +
    "\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013" +
    "\u03fa\101\045\117\u03ff\123\u0406\133\u04ba\134\u0407\135\u03f5" +
    "\136\u0401\137\u0400\140\u03f0\001\001\000\002\001\001\000" +
    "\024\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406" +
    "\136\u04d3\137\u0400\140\u03f0\001\001\000\026\011\u03f1\012" +
    "\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\136\u04c4\137\u0400" +
    "\140\u03f0\236\u04c3\001\001\000\044\004\u03f2\005\u03fb\006" +
    "\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101\045" +
    "\117\u03ff\123\u0406\133\u04be\134\u0407\135\u03f5\136\u0401\137" +
    "\u0400\140\u03f0\001\001\000\004\051\u04bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3" +
    "\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133" +
    "\u04cb\134\u0407\135\u03f5\136\u04ca\137\u0400\140\u03f0\001\001" +
    "\000\002\001\001\000\024\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\136\u04c6\137\u0400\140\u03f0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\236\u0470\001\001\000\004\051\u04cc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff" +
    "\123\u0406\136\u04d0\137\u0400\140\u03f0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123" +
    "\u0406\136\u04d5\137\u0400\140\u03f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\236\u04df\001\001\000\004\236\u04db\001\001\000\044" +
    "\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012" +
    "\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u04dc\134\u0407" +
    "\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u03f2" +
    "\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013" +
    "\u03fa\101\045\117\u03ff\123\u0406\133\u04e0\134\u0407\135\u03f5" +
    "\136\u0401\137\u0400\140\u03f0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\u04e9\112\u040d\123\u040e\001\001\000\002\001\001\000\004" +
    "\236\u04ef\001\001\000\004\236\u04eb\001\001\000\006\111" +
    "\u0144\205\u04ec\001\001\000\004\111\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\104\u04f1\111\u0144\203" +
    "\u04f2\205\u04f0\001\001\000\004\111\u01d6\001\001\000\004" +
    "\236\u050e\001\001\000\004\104\u04ff\001\001\000\002\001" +
    "\001\000\004\236\u04fd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011" +
    "\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u04fe" +
    "\134\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000" +
    "\002\001\001\000\004\236\u050c\001\001\000\004\236\u050a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1" +
    "\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u050b\134" +
    "\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002" +
    "\001\001\000\044\004\u03f2\005\u03fb\006\u0404\007\u03f7\010" +
    "\u03f3\011\u03f1\012\u03fe\013\u03fa\101\045\117\u03ff\123\u0406" +
    "\133\u050d\134\u0407\135\u03f5\136\u0401\137\u0400\140\u03f0\001" +
    "\001\000\002\001\001\000\044\004\u03f2\005\u03fb\006\u0404" +
    "\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101\045\117" +
    "\u03ff\123\u0406\133\u050f\134\u0407\135\u03f5\136\u0401\137\u0400" +
    "\140\u03f0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\u051a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u051e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0521\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u052a\001\001\000\004\236\u0525\001\001\000\044" +
    "\004\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012" +
    "\u03fe\013\u03fa\101\045\117\u03ff\123\u0406\133\u0526\134\u0407" +
    "\135\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\236\u0529\001\001\000\002" +
    "\001\001\000\004\236\u052c\001\001\000\044\004\u03f2\005" +
    "\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa" +
    "\101\045\117\u03ff\123\u0406\133\u0533\134\u0407\135\u03f5\136" +
    "\u0401\137\u0400\140\u03f0\001\001\000\044\004\u03f2\005\u03fb" +
    "\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\133\u052d\134\u0407\135\u03f5\136\u0401" +
    "\137\u0400\140\u03f0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\236\u0532" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\206\u053e\001\001\000\004" +
    "\206\u0538\001\001\000\004\236\u0539\001\001\000\044\004" +
    "\u03f2\005\u03fb\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe" +
    "\013\u03fa\101\045\117\u03ff\123\u0406\133\u053a\134\u0407\135" +
    "\u03f5\136\u0401\137\u0400\140\u03f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\236\u053d\001\001\000\002\001" +
    "\001\000\004\236\u0540\001\001\000\044\004\u03f2\005\u03fb" +
    "\006\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101" +
    "\045\117\u03ff\123\u0406\133\u0547\134\u0407\135\u03f5\136\u0401" +
    "\137\u0400\140\u03f0\001\001\000\044\004\u03f2\005\u03fb\006" +
    "\u0404\007\u03f7\010\u03f3\011\u03f1\012\u03fe\013\u03fa\101\045" +
    "\117\u03ff\123\u0406\133\u0541\134\u0407\135\u03f5\136\u0401\137" +
    "\u0400\140\u03f0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\236\u0546\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ErrorManager errores;
    private ColeccionInstr coleccionInstr; 

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
        coleccionInstr = new ColeccionInstr();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
    }

    public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        errores.getErrores().remove(errores.getErrores().size()-1);
        errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }

    public ColeccionInstr getColeccionInstr(){ return coleccionInstr; }
    public ErrorManager getErrores(){ return errores; }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= visual java python principal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // visual ::= SEPARADOR_VB espaciosVb metodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visual",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodosVb ::= dclMetodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodosVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dclMetodosVb ::= dclMetodosVb dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dclMetodosVb ::= dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dclMetodoVb ::= funcionVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion metodoInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 coleccionInstr.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dclMetodoVb ::= procedimientoVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion metodoInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 coleccionInstr.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null&&tipo!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb error espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo para la funcion declarada, se esperaba un tipo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionVb ::= publicOpcional FUNCTION error dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para la funcion declarada, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada FUNCTION.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada END.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato error bloqueVb END FUNCTION 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.VOID,id,parametros,instrucciones,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedimientoVb ::= publicOpcional SUB error dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el procedimiento declarado, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada SUB.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada END.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb error bloqueVb END SUB 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloqueVb ::= sentenciasVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloqueVb ::= 
            {
              List<Instruccion> RESULT =null;
		
                                            RESULT = new ArrayList();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciasVb ::= sentenciasVb sentenciaVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null)instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciasVb ::= sentenciaVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaVb ::= sentenciaIfVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaVb ::= sentenciaForVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaVb ::= sentenciaWhileVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaVb ::= sentenciaDoWhileVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaVb ::= sentenciaSwitchVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaVb ::= sentenciaSimpleVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaSimpleVb ::= sentenciaDeclaracionVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaSimpleVb ::= sentenciaAsignacionVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaSimpleVb ::= ingresoDatos 
            {
              List<Instruccion> RESULT =null;
		int accionIngresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionIngresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso accionIngreso = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accionIngreso!=null) instrucciones.add(new IngresoInstr(accionIngreso, new Pos(accionIngresoleft, accionIngresoright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaSimpleVb ::= sentenciaEscribirVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaSimpleVb ::= llamadaMetodoVb 
            {
              List<Instruccion> RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaSimpleVb ::= sentenciaReturnVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instruccionesSino = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccionesSino!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,new SinoInstr(instruccionesSino,new Pos(instruccionesSinoleft,instruccionesSinoright)), new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada IF.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaIfVb ::= IF error THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sinoVb ::= ELSEIF condicionVb THEN espaciosVb bloqueVb sinoVb 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sinoVb ::= ELSEIF condicionVb espaciosVb bloqueVb sinoVb 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sinoVb ::= ELSE espaciosVb bloqueVb 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&instrucciones!=null){
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sinoVb ::= ELSEIF error espaciosVb bloqueVb sinoVb 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sinoVb ::= ELSEIF error THEN espaciosVb bloqueVb sinoVb 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sinoVb ::= 
            {
              InstruccionSino RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expInicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expInicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoAritmetico expInicial = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expFinalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expFinalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoAritmetico expFinal = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expAumentoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expAumentoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expAumento = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&id!=null&&expInicial!=null&&expFinal!=null&&instrucciones!=null){
                                                RESULT = new ForInstr(
                                                    new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expInicial, new Pos(expInicialleft,expInicialright)), new Pos(idleft,idright)),
                                                    new MenorIgual(new Hoja(new Dato(CONST.ID, id), new Pos(idleft, idright)), expFinal, new Pos(idleft,idright)),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(new Mas(new Hoja(new Dato(), new Pos()), (expAumento!=null)?expAumento:new Hoja(new Dato(), new Pos()),new Pos()),new Pos()),new Pos()),
                                                    new Pos(posleft,posright),
                                                    instrucciones
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaForVb ::= FOR error tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaForVb ::= FOR ID tipoForVb error TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de inicio.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb error aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de finalizacion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb error espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor de aumento para cada ciclo del for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoForVb ::= tiposDeDato 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = tipo;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipoForVb ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aumentoForVb ::= STEP expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aumentoForVb ::= 
            {
              NodoAritmetico RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // idNextVb ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = id;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // idNextVb ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END WHILE 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaWhileVb ::= WHILE error espaciosVb bloqueVb END WHILE 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE condicionVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new DoWhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP error condicionVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitchVb END SELECT 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaSwitchVb ::= SELECT caseVb error espaciosVb contenidoSwitch END SELECT 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitch END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada SELECT.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caseVb ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caseVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenidoSwitchVb ::= contenidoSwitchVb valorCaseVb espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenidoSwitchVb ::= contenidoSwitchVb error espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contenidoSwitchVb ::= valorCaseVb espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contenidoSwitchVb ::= error espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso .", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valorCaseVb ::= CASE ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valorCaseVb ::= CASE FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valorCaseVb ::= CASE CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CARACTER, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valorCaseVb ::= CASE MENOS ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valorCaseVb ::= CASE MENOS FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valorCaseVb ::= CASE error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor primitivo constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valorCaseVb ::= ELSE 
            {
              Dato RESULT =null;
		 RESULT = new Dato(CONST.VOID, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaDeclaracionVb ::= declaracionVariableVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int masInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int masInstruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> masInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(masInstrucciones!=null){
                                                for(Instruccion instruccion : masInstrucciones){
                                                    instrucciones.add(instruccion);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionVb",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> listadoIds = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> listadoIds = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null) listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionVariableVb ::= DIM listadoId error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) declarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> listadoIds = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> listadoIds = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // masDeclaracionVariableVb ::= COMA listadoId error masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) delcarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // masDeclaracionVariableVb ::= 
            {
              List<Instruccion> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaAsignacionVb ::= ID IGUAL accionAsignacionVb 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int accionAsignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionAsignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Accion accionAsignacion = (Accion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null && accionAsignacion!=null){
                                                RESULT = new AsignacionInstr(
                                                    new LugarVariable(id, new Pos(idleft,idright)),
                                                    accionAsignacion,
                                                    new Pos(idleft,idright)
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaAsignacionVb ::= ID error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignacion ( = expresion).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaAsignacionVb ::= ID IGUAL error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e, "Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // accionAsignacionVb ::= ingresoDatos 
            {
              Accion RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso accion = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = accion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // accionAsignacionVb ::= expresionArVb 
            {
              Accion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaEscribirVb ::= MENSAJE PAR_A mensajesVb PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaEscribirVb ::= MENSAJELN PAR_A mensajesVb PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaEscribirVb ::= MENSAJE PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaEscribirVb ::= MENSAJELN PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null){
                                                MensajeInstr instruccion = new MensajeInstr(new Concat(new Pos(parleft,parright)), new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mensajesVb ::= mensajesVb AMPERSON mensajeVb 
            {
              Concat RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Concat concat = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(concat==null) new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mensajesVb ::= mensajeVb 
            {
              Concat RESULT =null;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // mensajeVb ::= CADENA 
            {
              NodoAritmetico RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(cadena!=null) RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos());
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // mensajeVb ::= expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mensajeVb ::= error 
            {
              NodoAritmetico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaReturnVb ::= RETURN expresionArVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaReturnVb ::= RETURN error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dclParametrosVb ::= PAR_A listadoParametrosVb PAR_C 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (parametros!=null)? parametros : new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dclParametrosVb ::= PAR_A PAR_C 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // dclParametrosVb ::= 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // listadoParametrosVb ::= listadoParametrosVb COMA parametroVb 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato parametro = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(parametros==null) parametros = new ArrayList();
                                            if(parametro!=null) parametros.add(parametro);
                                            RESULT = parametros;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // listadoParametrosVb ::= parametroVb 
            {
              List<Dato> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato parametro = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Dato> datos = new ArrayList();
                                            if(parametro!=null) datos.add(parametro);
                                            RESULT = datos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametroVb ::= BYVAL ID AS tiposDeDato 
            {
              Dato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(tipo, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametroVb ::= ID AS tiposDeDato 
            {
              Dato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(tipo, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametroVb ::= ID error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametroVb ::= BYVAL ID error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametroVb ::= error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una declaracion de variable.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionArVb ::= expresionArVb MAS expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionArVb ::= expresionArVb MENOS expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionArVb ::= expresionArVb DIV expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionArVb ::= expresionArVb POR expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionArVb ::= expresionArVb MOD expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionArVb ::= PAR_A expresionArVb PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionArVb ::= llamadaMetodoVb 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionArVb ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicionVb ::= PAR_A expresionBoolVb PAR_C 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicionVb ::= expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresionBoolVb ::= expresionArVb DISTINTO expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionBoolVb ::= expresionArVb IGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionBoolVb ::= expresionArVb MENOR expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresionBoolVb ::= expresionArVb MENORIGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresionBoolVb ::= expresionArVb MAYOR expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresionBoolVb ::= expresionArVb MAYORIGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresionBoolVb ::= expresionBoolVb AND expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresionBoolVb ::= expresionBoolVb OR expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresionBoolVb ::= NOT expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // llamadaMetodoVb ::= ID PAR_A listadoParametrosEnviadosVb PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id,parametros, new Pos(idleft,idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // llamadaMetodoVb ::= ID PAR_A PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LlamadaDeAmbito(id,new ArrayList(),new Pos(idleft,idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA expresionArVb 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // listadoParametrosEnviadosVb ::= expresionArVb 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // listadoParametrosEnviadosVb ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // espaciosVb ::= espaciosVb FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // espaciosVb ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // java ::= SEPARADOR_JAVA clasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // clasesJv ::= dclClasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // clasesJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // dclClasesJv ::= dclClasesJv dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dclClasesJv ::= dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dclClaseJv ::= publicOpcional CLASS ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(id!=null&&pos!=null){
                                                coleccionInstr.getInstruccionesJv().add(new ClaseInstr(id,(instrucciones!=null)?instrucciones:new ArrayList(),new Pos(posleft,posright)));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dclClaseJv ::= publicOpcional error ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra clave Class", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dclClaseJv ::= publicOpcional CLASS error LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el identificador para la clase, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // contenidoClaseJv ::= sentenciasDeClaseJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // contenidoClaseJv ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentenciasDeClaseJv ::= sentenciasDeClaseJv sentenciaDeClaseJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentenciasDeClaseJv ::= sentenciaDeClaseJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentenciaDeClaseJv ::= sentenciaDeclaracionJv FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones){
                                                    if(instruccion instanceof AsignacionInstr){
                                                        AsignacionInstr instr = (AsignacionInstr) instruccion;
                                                        instr.setLugar(new LugarVariableGlobal(instr.getLugar().getId(), instr.getLugar().getPosicion()));
                                                    }
                                                }
                                            }else{
                                                instrucciones = new ArrayList();
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentenciaDeClaseJv ::= dclMetodoJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(tipo!=null&&id!=null&&instrucciones!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(idleft,idright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dclMetodoJv ::= publicOpcional ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(id!=null&&instrucciones!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.CONSTRUCTOR,id,parametros,instrucciones, new Pos(idleft,idright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dclMetodoJv ::= publicOpcional tiposDeMetodo error PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el metodo, se esperaba un identificador", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID error LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un listado de parametros (lleno o vacio) dentro de parentesis.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // dclParametrosJv ::= listadoParametrosJv 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parametros==null)? new ArrayList() : parametros; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // dclParametrosJv ::= 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato ID 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(parametros==null)parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // listadoParametrosJv ::= tiposDeDato ID 
            {
              List<Dato> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Dato> parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // listadoParametrosJv ::= listadoParametrosJv COMA error ID 
            {
              List<Dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato error 
            {
              List<Dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // listadoParametrosJv ::= tiposDeDato error 
            {
              List<Dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bloqueJv ::= sentenciasJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // bloqueJv ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentenciasJv ::= sentenciasJv sentenciaJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentenciasJv ::= sentenciaJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentenciaJv ::= sentenciaIfJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentenciaJv ::= sentenciaForJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentenciaJv ::= sentenciaWhileJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentenciaJv ::= sentenciaSwitchJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentenciaJv ::= sentenciaDoWhileJv FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentenciaJv ::= sentenciaSimpleJv FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaSimpleJv ::= sentenciaDeclaracionJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentenciaSimpleJv ::= sentenciaAsignacionJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaSimpleJv ::= ingresoDatos 
            {
              List<Instruccion> RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso ingreso = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(ingreso!=null)instrucciones.add(new IngresoInstr(ingreso, new Pos(ingresoleft,ingresoright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentenciaSimpleJv ::= sentenciaEscribirJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentenciaSimpleJv ::= llamadaMetodoJv 
            {
              List<Instruccion> RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null)instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentenciaSimpleJv ::= sentenciaReturnJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentenciaSimpleJv ::= sentenciaBreakJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccionSino = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C sentenciaSimpleJv FIN_LINEA 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null&&condicion!=null){
                                                List<Instruccion> instruccionesRetorno = new ArrayList();
                                                if(instrucciones!=null){
                                                    for(Instruccion instruccion : instrucciones) instrucciones.add(instruccion);
                                                }
                                                RESULT = new SiInstr(condicion,instruccionesRetorno,null,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sentenciaIfJv ::= IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sentenciaIfJv ::= IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C error sinoJv 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo o una sentencia simple", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccionSino = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones,instruccionSino, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sinoJv ::= ELSE LLAVE_A bloqueJv LLAVE_C 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // sinoJv ::= ELSE IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sinoJv ::= ELSE IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sinoJv ::= ELSE error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // sinoJv ::= 
            {
              InstruccionSino RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionForleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instruccionForright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico instruccionFor = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        new DeclaracionInstr(
                                                            tipo,
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new Pos(posleft,posright),
                                                            false
                                                        ),
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecución del for.", new Pos(id2left, id2right));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se asignó un valor de inicio para el ciclo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sentenciaForJv ::= FOR PAR_A tiposDeDato error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se declaro el identificador a evaluar con cada iteracion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA error FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sentenciaForJv ::= FOR error LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // modificadorForJv ::= IGUAL expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // modificadorForJv ::= AUMENTO 
            {
              NodoAritmetico RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new Hoja(new Dato("AUMENTO",null),new Pos(valleft,valright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // modificadorForJv ::= DISMINUCION 
            {
              NodoAritmetico RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new Hoja(new Dato("DISMINUCION",null), new Pos(valleft,valright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // modificadorForJv ::= error 
            {
              NodoAritmetico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignación o un modificador (++, --).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                RESULT = new WhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sentenciaWhileJv ::= WHILE error LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sentenciaWhileJv ::= WHILE PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv PAR_C LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // sentenciaSwitchJv ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // sentenciaSwitchJv ::= SWITCH PAR_A error PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv error LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // contenidoSwitchJv ::= contenidoSwitchJv valorSwitchJv DOS_PUNTOS bloqueSwitchJv 
            {
              List<CaseInstr> RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)?instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // contenidoSwitchJv ::= valorSwitchJv DOS_PUNTOS bloqueSwitchJv 
            {
              List<CaseInstr> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)?instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // contenidoSwitchJv ::= contenidoSwitchJv error DOS_PUNTOS bloqueSwitchJv 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // contenidoSwitchJv ::= error DOS_PUNTOS bloqueSwitchJv 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // valorSwitchJv ::= CASE ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // valorSwitchJv ::= CASE FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // valorSwitchJv ::= CASE CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CARACTER, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // valorSwitchJv ::= CASE MENOS ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // valorSwitchJv ::= CASE MENOS FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // valorSwitchJv ::= DEFAULT 
            {
              Dato RESULT =null;
		 RESULT = new Dato(CONST.VOID,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // bloqueSwitchJv ::= LLAVE_A bloqueJv LLAVE_C 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (instrucciones==null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitchJv",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // bloqueSwitchJv ::= bloqueJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones==null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitchJv",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                RESULT = new DoWhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // sentenciaDeclaracionJv ::= tiposDeDato listadoAsignacionesJv 
            {
              List<Instruccion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                    ((DeclaracionInstr)instruccion).setPosicion(new Pos(tipoleft,tiporight));
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionJv",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // listadoAsignacionesJv ::= listadoAsignacionesJv asignacionJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null)instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion: instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // listadoAsignacionesJv ::= asignacionJv 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // asignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Accion accion = (Accion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null,new LugarVariable(id, new Pos(idleft,idright)),null,false));
                                            instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),accion,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // asignacionJv ::= ID 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null,new LugarVariable(id, new Pos(idleft,idright)),null,false));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // sentenciaAsignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Accion accion = (Accion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // sentenciaAsignacionJv ::= THIS ID IGUAL accionAsignacionJv 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Accion accion = (Accion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariableGlobal(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // accionAsignacionJv ::= expresionArJv 
            {
              Accion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // accionAsignacionJv ::= ingresoDatos 
            {
              Accion RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso ingreso = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ingreso; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;                                                
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // sentenciaEscribirJv ::= MENSAJELN PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null){
                                                MensajeInstr instruccion = new MensajeInstr(new Concat(new Pos(parleft,parright)), new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                                RESULT = instruccion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // sentenciaEscribirJv ::= MENSAJE PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // sentenciaEscribirJv ::= MENSAJE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // sentenciaEscribirJv ::= MENSAJELN error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expresionMensajeJv ::= expresionMensajeJv MAS cadenaExpresionJv 
            {
              Concat RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Concat concat = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(expresion!=null)concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expresionMensajeJv ::= cadenaExpresionJv 
            {
              Concat RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(expresionleft,expresionright));
                                            if(expresion!=null) concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expresionMensajeJv ::= error 
            {
              Concat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // cadenaExpresionJv ::= CADENA 
            {
              NodoAritmetico RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaExpresionJv",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // cadenaExpresionJv ::= expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaExpresionJv",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // sentenciaReturnJv ::= RETURN expresionArJv 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null) RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // sentenciaReturnJv ::= RETURN error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // sentenciaBreakJv ::= BREAK 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BreakInstr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreakJv",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expresionArJv ::= expresionArJv MAS expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expresionArJv ::= expresionArJv MENOS expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expresionArJv ::= expresionArJv DIV expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expresionArJv ::= expresionArJv POR expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expresionArJv ::= expresionArJv MOD expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expresionArJv ::= PAR_A expresionArJv PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expresionArJv ::= llamadaMetodoJv 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expresionArJv ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expresionArJv ::= THIS ID 
            {
              NodoAritmetico RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null){
                                                RESULT = new Hoja(new Dato(CONST.ID_GLOBAL,id), new Pos(idleft,idright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expresionBoolJv ::= expresionArJv DISTINTO expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expresionBoolJv ::= expresionArJv COMPARADOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expresionBoolJv ::= expresionArJv MENOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expresionBoolJv ::= expresionArJv MENORIGUAL expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expresionBoolJv ::= expresionArJv MAYOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expresionBoolJv ::= expresionArJv MAYORIGUAL expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expresionBoolJv ::= expresionBoolJv AND expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expresionBoolJv ::= expresionBoolJv OR expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expresionBoolJv ::= NOT expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // llamadaMetodoJv ::= ID PAR_A listadoParametrosEnviadosJv PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(expresiones!=null&&id!=null) RESULT = new LlamadaDeAmbito(id,expresiones, new Pos(idleft,idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // llamadaMetodoJv ::= ID PAR_A PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LlamadaDeAmbito(id,new ArrayList(), new Pos(idleft,idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA expresionArJv 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null)expresiones = new ArrayList();
                                            if(expresion!=null)expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // listadoParametrosEnviadosJv ::= expresionArJv 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // listadoParametrosEnviadosJv ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // python ::= SEPARADOR_PY NEWLINE metodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("python",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // metodosPy ::= dclMetodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // metodosPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // dclMetodosPy ::= dclMetodosPy dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // dclMetodosPy ::= dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            coleccionInstr.getInstruccionesPy().add(new MetodoInstr(CONST.INDEFINIDO,id,parametros,instrucciones, new Pos(posleft,posright)));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // dclMetodoPy ::= DEF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para la declaracion del metodo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // dclMetodoPy ::= DEF ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // dclParametrosPy ::= listadoId 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> parametros = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            List<Dato> param = new ArrayList();
                                            if(parametros!=null){
                                                for(String id : parametros){
                                                    param.add(new Dato(CONST.INDEFINIDO, id));
                                                }
                                            }
                                            RESULT = param;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // dclParametrosPy ::= 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // listadoId ::= listadoId COMA ID 
            {
              List<String> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> parametros = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(parametros==null) parametros = new ArrayList();
                                            if(id!=null) parametros.add(id);
                                            RESULT = parametros; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // listadoId ::= listadoId COMA error 
            {
              List<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // listadoId ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<String> parametros = new ArrayList();
                                            if(id!=null) parametros.add(id);
                                            RESULT = parametros;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // sentenciasPy ::= sentenciasPy sentenciaPy 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // sentenciasPy ::= sentenciaPy 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // sentenciaPy ::= sentenciaIfPy NEWLINE 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // sentenciaPy ::= sentenciaForPy NEWLINE 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // sentenciaPy ::= sentenciaWhilePy NEWLINE 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // sentenciaPy ::= sentenciaSimplePy NEWLINE 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // sentenciaPy ::= error 
            {
              List<Instruccion> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // bloquePy ::= NEWLINE IDENT sentenciasPy DEDENT 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // bloquePy ::= sentenciaSimplePy 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // sentenciaSimplePy ::= asignacionVarPy 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // sentenciaSimplePy ::= escribirPy 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // sentenciaSimplePy ::= ingresoDatos 
            {
              List<Instruccion> RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso accion = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accion!=null) instrucciones.add(new IngresoInstr(accion, new Pos(accionleft,accionright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // sentenciaSimplePy ::= llamadaMetodoPy 
            {
              List<Instruccion> RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // sentenciaSimplePy ::= sentenciaReturnPy 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // sentenciaReturnPy ::= RETURN expresionArPy 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnPy",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // escribirPy ::= MENSAJE PAR_A mensajesPy PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int concatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat concat = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null&&concat!=null) RESULT = new MensajeInstr(concat, new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // escribirPy ::= MENSAJE PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje para mostrar en pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // escribirPy ::= MENSAJE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // escribirPy ::= MENSAJE PAR_A mensajesPy error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,".", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // mensajesPy ::= mensajesPy COMA mensajePy 
            {
              Concat RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Concat concat = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // mensajesPy ::= mensajePy 
            {
              Concat RESULT =null;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // mensajePy ::= CADENA 
            {
              NodoAritmetico RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // mensajePy ::= expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expresion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // listadoExpresionesArPy ::= expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // listadoExpresionesArPy ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccionSino = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS error elseIfPy 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // sentenciaIfPy ::= IF condicionPy error elseIfPy 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // sentenciaIfPy ::= IF error elseIfPy 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccion, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS error elseIfPy 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // elseIfPy ::= ELSEIF condicionPy error elseIfPy 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // elseIfPy ::= ELSEIF error elseIfPy 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // elseIfPy ::= elsePy 
            {
              InstruccionSino RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccion = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = instruccion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // elseIfPy ::= 
            {
              InstruccionSino RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // elsePy ::= ELSE DOS_PUNTOS bloquePy 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // elsePy ::= ELSE DOS_PUNTOS error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // elsePy ::= ELSE error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // sentenciaWhilePy ::= WHILE condicionPy bloquePy 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // sentenciaWhilePy ::= WHILE condicionPy error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS bloquePy 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rangoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rangoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		RangePy rango = (RangePy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&id!=null&&rango!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new ForInstr(id,idleft,idright,rango,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // sentenciaForPy ::= FOR ID IN rangePy error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // sentenciaForPy ::= FOR ID IN error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la funcion range.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // sentenciaForPy ::= FOR ID error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token 'in'.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // sentenciaForPy ::= FOR error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para el ciclo for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // rangePy ::= RANGE PAR_A expresionArPy PAR_C 
            {
              RangePy RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico e1 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(e1!=null) RESULT = new RangePy(e1);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy PAR_C 
            {
              RangePy RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoAritmetico e1 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico e2 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy PAR_C 
            {
              RangePy RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoAritmetico e1 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoAritmetico e2 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico e3 = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2,e3);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // rangePy ::= RANGE PAR_A expresionArPy COMA error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // rangePy ::= RANGE PAR_A expresionArPy error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // rangePy ::= RANGE PAR_A error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // rangePy ::= RANGE error 
            {
              RangePy RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // condicionPy ::= PAR_A expresionBoolPy PAR_C 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // condicionPy ::= PAR_A expresionBoolPy error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // condicionPy ::= PAR_A error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se espraba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // condicionPy ::= expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // condicionPy ::= error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion boolana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expresionArPy ::= expresionArPy MAS expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // expresionArPy ::= expresionArPy MENOS expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // expresionArPy ::= expresionArPy DIV expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // expresionArPy ::= expresionArPy POR expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // expresionArPy ::= expresionArPy MOD expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // expresionArPy ::= PAR_A expresionArPy PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // expresionArPy ::= llamadaMetodoPy 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // expresionArPy ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id, parametros, new Pos(idleft,idright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy error 
            {
              Llamada RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // llamadaMetodoPy ::= ID PAR_A PAR_C 
            {
              Llamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(id!=null) RESULT = new LlamadaDeAmbito(id, new ArrayList(), new Pos(idleft,idright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // asignacionVarPy ::= listadoId IGUAL listadoExpresionesArPy 
            {
              List<Instruccion> RESULT =null;
		int listadoIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listadoIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> listadoI = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listadoEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> listadoE = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(listadoE!=null && listadoI!=null){
                                                if(listadoI.size() < listadoE.size()){
                                                    errores.agregarError("Semantico","En la expresion No."+(listadoI.size()+1),"Hay más expresiones de las esperadas, se esperaba un listado de ("+listadoI.size()+") expresiones.", new Pos(listadoEleft,listadoEright));
                                                }else{
                                                    for(int i=0; i < listadoE.size(); i++){
                                                        instrucciones.add(new AsignacionInstr(
                                                            new LugarVariable(listadoI.get(i), new Pos(listadoIleft,listadoIright)),
                                                            new AccionExpresion(listadoE.get(i), new Pos(listadoEleft,listadoEright)),
                                                            new Pos(listadoIleft,listadoIright)
                                                        ));
                                                    }
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // asignacionVarPy ::= listadoId error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token igual (=).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // asignacionVarPy ::= ID IGUAL ingresoDatos 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso ingreso = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&ingreso!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),ingreso,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // asignacionVarPy ::= ID IGUAL expresionArPy 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&expresion!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // listadoParametrosEnviadosPy ::= listadoParametrosEnviadosPy COMA expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // listadoParametrosEnviadosPy ::= expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expresionBoolPy ::= expresionArPy DISTINTO expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // expresionBoolPy ::= expresionArPy COMPARADOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // expresionBoolPy ::= expresionArPy MENOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // expresionBoolPy ::= expresionArPy MENORIGUAL expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // expresionBoolPy ::= expresionArPy MAYOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // expresionBoolPy ::= expresionArPy MAYORIGUAL expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // expresionBoolPy ::= expresionBoolPy AND expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // expresionBoolPy ::= expresionBoolPy OR expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // expresionBoolPy ::= NOT expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // principal ::= SEPARADOR_PROGRAMA secLibrerias secConstantes secVariables codigoMain 
            {
              Object RESULT =null;
		int instrLibreriasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instrLibreriasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrLibrerias = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instrConstantesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instrConstantesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrConstantes = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instrVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instrMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instrMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrMain = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            for(Instruccion instruccion : instrLibrerias) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrConstantes) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrVariables) coleccionInstr.getInstruccionesPr().add(instruccion);
                                            for(Instruccion instruccion : instrMain) coleccionInstr.getInstruccionesPr().add(instruccion);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // secLibrerias ::= dclLibrerias 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones==null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // secLibrerias ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // dclLibrerias ::= dclLibrerias dclLibreria 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instruccion!=null) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // dclLibrerias ::= dclLibreria 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instruccion!=null) instruccionesRetorno.add(instruccion);
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // dclLibreria ::= HASHTAG INCLUDE libreria 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int libreriaInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int libreriaInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion libreriaInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(libreriaInstr!=null){
                                                libreriaInstr.setPosicion(new Pos(posleft,posright));
                                                RESULT = libreriaInstr;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // dclLibreria ::= HASHTAG INCLUDE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una libreria", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // dclLibreria ::= HASHTAG error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una palabra reservada include.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // libreria ::= JAVA PUNTO valorTextoLibreriaJv 
            {
              Instruccion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<String> valores = new ArrayList();
                                            valores.add(valor);
                                            RESULT = new LibreriaInstr(CONST.SEC_JV, valores, null);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // libreria ::= JAVA error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba las clases a importar.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // libreria ::= PY 
            {
              Instruccion RESULT =null;
		 RESULT = new LibreriaInstr(CONST.SEC_PY, new ArrayList(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // libreria ::= VB 
            {
              Instruccion RESULT =null;
		 RESULT = new LibreriaInstr(CONST.SEC_VB,new ArrayList(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // libreria ::= MENOR libreriaC MAYOR 
            {
              Instruccion RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LibreriaInstr(CONST.SEC_C, ids, null);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // libreria ::= MENOR libreriaC error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '>'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // libreria ::= MENOR error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba el formato de una libreria de C.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // libreriaC ::= libreriaC PUNTO ID 
            {
              List<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(ids==null) ids = new ArrayList();
                                            if(id!=null) ids.add(id);
                                            RESULT = ids;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // libreriaC ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<String> ids = new ArrayList();
                                            if(id!=null) ids.add(id);
                                            RESULT = ids;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // valorTextoLibreriaJv ::= CADENA 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // valorTextoLibreriaJv ::= CARACTER 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // secConstantes ::= dclConstantes 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones==null)? new ArrayList(): instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // secConstantes ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // dclConstantes ::= dclConstantes dclConstante 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones != null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // dclConstantes ::= dclConstante 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones == null)? new ArrayList() : instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(posleft,posright), true));
                                            instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expresion, new Pos(expresionleft,expresionright)), new Pos(posleft,posright)));
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // dclConstante ::= CONST tiposDeDato ID IGUAL error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion para asignar a la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // dclConstante ::= CONST tiposDeDato ID error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // dclConstante ::= CONST tiposDeDato error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // dclConstante ::= CONST error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un tipo de dato para la variable declarada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // secVariables ::= dclVariables 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones==null)? new ArrayList(): instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // secVariables ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // dclVariables ::= dclVariables sentenciaDeclaracionInicial 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones != null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // dclVariables ::= sentenciaDeclaracionInicial 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones == null)? new ArrayList() : instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // sentenciaDeclaracion ::= tiposDeDato listadoDeclaraciones 
            {
              List<Instruccion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // sentenciaDeclaracion ::= JAVA PUNTO ID listadoDeclaracionesClases 
            {
              List<Instruccion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                }else if(instruccion instanceof AsignacionInstr){
                                                    ((AccionConstructor)((AsignacionInstr)instruccion).getAccion()).getConstructor().setIdMetodo(tipo);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // sentenciaDeclaracion ::= tiposDeDato arreglos 
            {
              List<Instruccion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arreglosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arreglosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<LugarArreglo> arreglos = (List<LugarArreglo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            for(LugarArreglo lugar : arreglos){
                                                instrucciones.add(new DeclaracionInstr(tipo,lugar, new Pos(tipoleft,tiporight), false));
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // sentenciaDeclaracion ::= tiposDeDato error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de identificadores o la estructura de un arreglo.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // sentenciaDeclaracion ::= JAVA PUNTO error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador referente a una clase declarada en la seccion de java.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // sentenciaDeclaracion ::= JAVA error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token punto '.'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // arreglos ::= arreglos arreglo 
            {
              List<LugarArreglo> RESULT =null;
		int arreglosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arreglosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<LugarArreglo> arreglos = (List<LugarArreglo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LugarArreglo arreglo = (LugarArreglo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(arreglos==null) arreglos = new ArrayList();
                                            if(arreglo!=null) arreglos.add(arreglo);
                                            RESULT = arreglos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // arreglos ::= arreglo 
            {
              List<LugarArreglo> RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LugarArreglo arreglo = (LugarArreglo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<LugarArreglo> arreglos = new ArrayList();
                                            if(arreglo!=null) arreglos.add(arreglo);
                                            RESULT = arreglos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // arreglo ::= ID listDimensiones 
            {
              LugarArreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new LugarArreglo(id, expresiones, new Pos(idleft,idright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // listDimensiones ::= listDimensiones COR_A expresionAr COR_C 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresiones == null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // listDimensiones ::= COR_A expresionAr COR_C 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // listDimensiones ::= COR_A error COR_C 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // listDimensiones ::= listDimensiones COR_A error COR_C 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // listadoDeclaraciones ::= listadoDeclaraciones COMA ID asignacionValor 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionExpresion accion = (AccionExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(accion!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), accion, new Pos(accionleft,accionright)));
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // listadoDeclaraciones ::= ID asignacionValor 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionExpresion accion = (AccionExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(accion!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), accion, new Pos(accionleft,accionright)));
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // listadoDeclaraciones ::= listadoDeclaraciones COMA error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // asignacionValor ::= IGUAL expresionAr 
            {
              AccionExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // asignacionValor ::= IGUAL error 
            {
              AccionExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // asignacionValor ::= 
            {
              AccionExpresion RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA ID asignacionConstructor 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> constructor = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones == null) instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarClase(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(constructor!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarClase(id, new Pos(idleft,idright)), new AccionConstructor(new LlamadaJava(id,null,constructor,new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)));
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // listadoDeclaracionesClases ::= ID asignacionConstructor 
            {
              List<Instruccion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> constructor = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null, new LugarClase(id, new Pos(idleft,idright)), new Pos(idleft,idright), false));
                                            if(constructor!=null){
                                                instrucciones.add(new AsignacionInstr(new LugarClase(id, new Pos(idleft,idright)), new AccionConstructor(new LlamadaJava(id,null,constructor,new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)), new Pos(constructorleft,constructorright)));
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // asignacionConstructor ::= accionConstructor 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (expresiones==null)? new ArrayList() : expresiones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // asignacionConstructor ::= 
            {
              List<NodoAritmetico> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // accionConstructor ::= PAR_A listadoParametrosEnviados PAR_C 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // accionConstructor ::= PAR_A listadoParametrosEnviados error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque LLAVE_C 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // codigoMain ::= VOID MAIN PAR_A PAR_C error bloque 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // codigoMain ::= VOID MAIN PAR_A error bloque 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // codigoMain ::= VOID MAIN error bloque 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // codigoMain ::= VOID error bloque 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada 'main'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // bloque ::= sentencias 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones == null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // bloque ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // sentencias ::= sentencias sentencia 
            {
              List<Instruccion> RESULT =null;
		int instruccionesRetornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesRetornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instruccionesRetorno = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instruccionesRetorno == null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // sentencias ::= sentencia 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // sentencia ::= sentenciaIf 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // sentencia ::= sentenciaFor 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // sentencia ::= sentenciaWhile 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // sentencia ::= sentenciaDoWhile 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // sentencia ::= sentenciaSwitch 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // sentencia ::= sentenciaSimple FIN_LINEA 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // sentenciaSimple ::= sentenciaDeclaracion 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // sentenciaSimple ::= sentenciaAsignacion 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // sentenciaSimple ::= sentenciaEscribir 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // sentenciaSimple ::= sentenciaIngresoDatos 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // sentenciaSimple ::= sentenciaLimpiarPantalla 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // sentenciaSimple ::= sentenciaEsperarTecla 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // sentenciaSimple ::= llamadaMetodo 
            {
              List<Instruccion> RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // sentenciaSimple ::= sentenciaBreak 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones; 
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // sentenciaAsignacion ::= lugarAsignacion IGUAL expresionAr 
            {
              Instruccion RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lugar lugar = (Lugar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new AsignacionInstr(lugar, new AccionExpresion(expresion, new Pos(expresionleft,expresionright)), new Pos(lugarleft,lugarright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // sentenciaAsignacion ::= lugarAsignacion IGUAL error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion arimetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // sentenciaAsignacion ::= lugarAsignacion error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // lugarAsignacion ::= ID 
            {
              Lugar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LugarVariable(id, new Pos(idleft, idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // lugarAsignacion ::= arreglo 
            {
              Lugar RESULT =null;
		int lugarArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lugarArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LugarArreglo lugarArreglo = (LugarArreglo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lugarArreglo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // lugarAsignacion ::= JAVA PUNTO ID 
            {
              Lugar RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LugarClase(id, new Pos(idleft, idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Dato> datos = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new MensajeInstr(new Scanf(datos, new ArrayList(), new Pos(datosleft, datosright)), new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Dato> datos = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new MensajeInstr(new Scanf(datos, expresiones, new Pos(datosleft,datosright)), new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // sentenciaEscribir ::= PRINTF PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba contenido para mostrar en pantalla.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // sentenciaEscribir ::= PRINTF error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de expresiones.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // expresionCadena ::= expresionCadena valorCadena 
            {
              List<Dato> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Dato> expresiones = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato expresion = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // expresionCadena ::= valorCadena 
            {
              List<Dato> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato expresion = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Dato> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // listadoExpresiones ::= listadoExpresiones COMA expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // listadoExpresiones ::= expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // listadoExpresiones ::= AMPERSON expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // listadoExpresiones ::= AMPERSON error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresiona aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // listadoExpresiones ::= listadoExpresiones COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // expresionCadenaEntrada ::= valorTexto comodin 
            {
              AccionIngreso RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato tipo = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // expresionCadenaEntrada ::= comodin valorTexto 
            {
              AccionIngreso RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dato tipo = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // expresionCadenaEntrada ::= valorTexto comodin valorTexto 
            {
              AccionIngreso RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dato tipo = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadena2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(cadenaleft,cadenaright));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            concat.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena2), new Pos(cadena2left,cadena2right)));
                                            RESULT = new AccionIngreso(concat, tipo.getTipo(), new Pos(cadenaleft,cadenaright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // expresionCadenaEntrada ::= comodin 
            {
              AccionIngreso RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato tipo = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new AccionIngreso(null, tipo.getTipo(), new Pos(tipoleft,tiporight));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // expresionCadenaEntrada ::= valorTexto error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // expresionCadenaEntrada ::= error valorTexto 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // expresionCadenaEntrada ::= valorTexto error valorTexto 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // expresionCadenaEntrada ::= error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // valorCadena ::= valorTexto 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CADENA, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // valorCadena ::= comodin 
            {
              Dato RESULT =null;
		int comodinleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comodinright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato comodin = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = comodin; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // valorTexto ::= CADENA 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // valorTexto ::= CARACTER 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // comodin ::= COMODIN_CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.COMODIN_CARACTER,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // comodin ::= COMODIN_ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.COMODIN_ENTERO,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // comodin ::= COMODIN_FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.COMODIN_FLOTANTE,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AccionIngreso accion = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lugar lugar = (Lugar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new AsignacionInstr(lugar,accion, new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un lugar para asignar el valor leido.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '&'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una coma.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // sentenciaIngresoDatos ::= SCANF PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena para ingresar texto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // sentenciaIngresoDatos ::= SCANF error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LimpiarInstr(new Pos(posleft,posright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IngresoInstr(new AccionIngreso(null,CONST.CARACTER, new Pos(posleft,posright)), new Pos(posleft,posright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // sentenciaEsperarTecla ::= ESPERAR_TECLA error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // sentenciaBreak ::= BREAK 
            {
              Instruccion RESULT =null;
		 RESULT = new BreakInstr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreak",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccionSino = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // sentenciaIf ::= IF PAR_A expresionBool PAR_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // sentenciaIf ::= IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // sentenciaIf ::= IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // sentenciaIf ::= IF error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSino instruccionSino = (InstruccionSino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // sino ::= ELSE LLAVE_A bloque LLAVE_C 
            {
              InstruccionSino RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // sino ::= 
            {
              InstruccionSino RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // sino ::= ELSE IF PAR_A expresionBool PAR_C error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // sino ::= ELSE IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // sino ::= ELSE IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // sino ::= ELSE IF error LLAVE_A bloque LLAVE_C 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // sino ::= ELSE LLAVE_A bloque error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // sino ::= ELSE error 
            {
              InstruccionSino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // sentenciaFor ::= FOR PAR_A tiposDeDato ID IGUAL expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionForleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instruccionForright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico instruccionFor = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            Accion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(id2left,id2right)),
                                                                new Hoja(new Dato(CONST.ENTERO,1), new Pos(instruccionForleft,instruccionForright)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.ID,id2), new Pos(idleft,idright)),
                                                                new Hoja(new Dato(CONST.ENTERO,-1), new Pos(id2left,id2right)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Pos(instruccionForleft,instruccionForright));
                                                    }
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    RESULT = new ForInstr(
                                                        new DeclaracionInstr(
                                                            tipo,
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new Pos(posleft,posright),
                                                            false
                                                        ),
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    );
                                                }    
                                            }else{
                                                errores.agregarError("Semantico",id2,"No se ha utilizado la misma variable para la ejecución del for.", new Pos(id2left, id2right));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esparaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // modificadorFor ::= IGUAL expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // modificadorFor ::= AUMENTO 
            {
              NodoAritmetico RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new Hoja(new Dato("AUMENTO",null),new Pos(valleft,valright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // modificadorFor ::= DISMINUCION 
            {
              NodoAritmetico RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new Hoja(new Dato("DISMINUCION",null), new Pos(valleft,valright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // modificadorFor ::= IGUAL error 
            {
              NodoAritmetico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // modificadorFor ::= error 
            {
              NodoAritmetico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un modificador para la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && condicion!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new WhileInstr(condicion,instrucciones,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // sentenciaWhile ::= WHILE PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // sentenciaWhile ::= WHILE PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // sentenciaWhile ::= WHILE error LLAVE_A bloque LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C FIN_LINEA 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null && condicion!=null){
                                                if(instrucciones == null) instrucciones = new ArrayList();
                                                RESULT = new DoWhileInstr(condicion,instrucciones,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un fin de linea.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada while.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // sentenciaDoWhile ::= DO LLAVE_A bloque error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaban casos.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // sentenciaSwitch ::= SWITCH PAR_A expresionAr error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // sentenciaSwitch ::= SWITCH PAR_A error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // sentenciaSwitch ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // contenidoSwitch ::= contenidoSwitch valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              List<CaseInstr> RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                casos.add(new CaseInstr(dato, instrucciones, new Pos(datoleft,datoright)));
                                            }
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // contenidoSwitch ::= valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              List<CaseInstr> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                casos.add(new CaseInstr(dato, instrucciones, new Pos(datoleft,datoright)));
                                            }
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // valorSwitch ::= CASE ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // valorSwitch ::= CASE FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // valorSwitch ::= CASE CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CARACTER, valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // valorSwitch ::= CASE MENOS ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // valorSwitch ::= CASE MENOS FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE, "-"+valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // valorSwitch ::= DEFAULT 
            {
              Dato RESULT =null;
		 RESULT = new Dato(CONST.VOID, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // valorSwitch ::= error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un valor para un caso de un switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // bloqueSwitch ::= LLAVE_A bloque LLAVE_C 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (instrucciones==null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitch",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // bloqueSwitch ::= bloque 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (instrucciones==null)? new ArrayList() : instrucciones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitch",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // expresionAr ::= expresionAr MAS expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // expresionAr ::= expresionAr MENOS expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // expresionAr ::= expresionAr DIV expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // expresionAr ::= expresionAr POR expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // expresionAr ::= expresionAr MOD expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // expresionAr ::= PAR_A expresionAr PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // expresionAr ::= llamadaMetodo 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // expresionAr ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // expresionBool ::= expresionAr DISTINTO expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // expresionBool ::= expresionAr COMPARADOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // expresionBool ::= expresionAr MENOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // expresionBool ::= expresionAr MENORIGUAL expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // expresionBool ::= expresionAr MAYOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // expresionBool ::= expresionAr MAYORIGUAL expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // expresionBool ::= NOT expresionBool 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 2 with the actual generated action code for actions 600 to 900. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000002(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // llamadaMetodo ::= JAVA PUNTO ID PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Llamada RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String idVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new LlamadaJava(idVariable,id,parametros,new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // llamadaMetodo ::= PY PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Llamada RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new LlamadaPython(id,parametros,new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // llamadaMetodo ::= VB PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Llamada RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new LlamadaVisual(id,parametros,new Pos(posleft,posright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // listadoParametrosEnviados ::= parametrosEnviados 
            {
              List<NodoAritmetico> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<NodoAritmetico> parametros = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (parametros==null)? new ArrayList(): parametros; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // listadoParametrosEnviados ::= 
            {
              List<NodoAritmetico> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // parametrosEnviados ::= parametrosEnviados COMA expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // parametrosEnviados ::= expresionAr 
            {
              List<NodoAritmetico> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // ingresoDatos ::= ingreso PAR_A CADENA PAR_C 
            {
              AccionIngreso RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ingreso = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            Mensaje mensaje = new Concat(new Pos(cadenaleft,cadenaright));
                                            mensaje.getMensajes().add(new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)));
                                            RESULT = new AccionIngreso(mensaje,ingreso,new Pos(ingresoleft,ingresoright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // ingresoDatos ::= ingreso PAR_A PAR_C 
            {
              AccionIngreso RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ingreso = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            RESULT = new AccionIngreso(null,ingreso, new Pos(ingresoleft,ingresoright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // ingresoDatos ::= ingreso PAR_A CADENA error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // ingresoDatos ::= ingreso PAR_A error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena, o que estuviese vacio.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // ingresoDatos ::= ingreso error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // ingreso ::= INTINPUT 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.ENTERO; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // ingreso ::= CHARINPUT 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.CARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // ingreso ::= FLOATINPUT 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.FLOTANTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // tiposDeDato ::= PR_ENTERO 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.ENTERO; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // tiposDeDato ::= PR_FLOTANTE 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.FLOTANTE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // tiposDeDato ::= PR_CARACTER 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.CARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // valorAtomico ::= ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // valorAtomico ::= FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // valorAtomico ::= CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CARACTER,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // valorAtomico ::= MENOS ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // valorAtomico ::= ID 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ID,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // tiposDeMetodo ::= VOID 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CONST.VOID; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // tiposDeMetodo ::= tiposDeDato 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // publicOpcional ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // publicOpcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 600 < #action < 900. . . . . . . . . . . .*/
          case 2: 
              return CUP$Parser$do_action_part00000002(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
