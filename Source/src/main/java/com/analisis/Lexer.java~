// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /home/fxhnd/NetBeansProjects/Compilador/Source/src/main/java/com/analisis/Lexer.flex

package com.analisis;

import com.analisis.objetos.analisis.ErrorManager;
import com.analisis.objetos.analisis.Pos;
import java_cup.runtime.*;
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int JAVA = 2;
  public static final int PYTHON = 4;
  public static final int PRINCIPAL = 6;
  public static final int STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\26\1\27\1\30\1\31\1\32\2\0\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\45\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\45\1\77\1\100\1\101\1\102\1\103\1\104\1\45"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\61\1\113"+
    "\1\45\1\114\1\115\1\116\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\24\21\2\22\1\23\1\24\2\1"+
    "\1\11\1\13\1\25\1\16\1\17\15\21\1\26\1\1"+
    "\1\27\1\1\1\30\1\1\1\24\12\21\2\31\1\32"+
    "\1\33\1\24\1\5\1\34\3\21\1\35\1\36\7\21"+
    "\1\37\1\40\1\1\1\41\1\42\1\43\1\44\3\0"+
    "\1\45\1\0\1\15\1\46\1\47\1\50\1\21\1\51"+
    "\6\21\1\52\4\21\1\53\5\21\1\54\6\21\1\55"+
    "\4\21\1\0\1\56\1\0\1\57\1\60\1\61\20\21"+
    "\1\54\3\0\4\21\1\62\5\21\1\63\1\64\11\21"+
    "\1\65\1\66\1\67\1\0\1\70\1\71\2\0\1\72"+
    "\1\0\2\45\1\73\1\56\5\21\1\74\1\21\1\75"+
    "\1\76\3\21\1\24\1\21\1\23\4\21\1\77\5\21"+
    "\1\0\1\100\10\21\1\101\6\21\2\0\1\21\1\102"+
    "\14\21\1\101\3\21\2\0\1\103\1\0\1\21\1\104"+
    "\1\105\2\21\1\106\2\21\1\107\1\110\3\21\1\111"+
    "\1\112\1\21\1\105\2\21\1\113\4\21\1\106\5\21"+
    "\1\114\1\21\2\0\1\21\1\115\1\116\2\21\1\117"+
    "\5\21\1\120\2\21\1\121\1\0\1\122\10\21\1\123"+
    "\4\21\1\124\1\125\1\21\1\126\3\21\1\127\1\0"+
    "\1\130\1\131\1\21\1\132\1\126\1\133\2\21\1\134"+
    "\1\135\2\21\1\136\2\21\1\137\1\140\1\141\5\21"+
    "\1\142\1\0\1\21\1\143\1\21\1\144\5\21\1\0"+
    "\1\145\1\0\1\146\1\147\1\0\1\150\2\21\1\151"+
    "\3\0\1\152\1\21\3\0\1\153\1\0\1\154\4\0"+
    "\1\130\4\0\1\146\2\0\1\130\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u018b"+
    "\0\u0229\0\u018b\0\u0278\0\u018b\0\u02c7\0\u018b\0\u018b\0\u018b"+
    "\0\u018b\0\u018b\0\u018b\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452"+
    "\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca"+
    "\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0942"+
    "\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u018b\0\u0b1c\0\u0b6b"+
    "\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u018b\0\u0d45\0\u0d94"+
    "\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c"+
    "\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u018b\0\u11e6\0\u018b"+
    "\0\u1235\0\u1284\0\u0b6b\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f"+
    "\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u018b\0\u1638"+
    "\0\u018b\0\u018b\0\u018b\0\u0c09\0\u018b\0\u1687\0\u16d6\0\u1725"+
    "\0\u018b\0\u018b\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff"+
    "\0\u194e\0\u018b\0\u018b\0\u199d\0\u018b\0\u19ec\0\u1a3b\0\u1a8a"+
    "\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u018b\0\u018b"+
    "\0\u018b\0\u1cb3\0\u06ca\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e"+
    "\0\u1e8d\0\u06ca\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u06ca\0\u2018"+
    "\0\u2067\0\u20b6\0\u2105\0\u2154\0\u06ca\0\u21a3\0\u21f2\0\u2241"+
    "\0\u2290\0\u22df\0\u232e\0\u06ca\0\u237d\0\u23cc\0\u241b\0\u246a"+
    "\0\u24b9\0\u018b\0\u2508\0\u018b\0\u018b\0\u018b\0\u2557\0\u25a6"+
    "\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e"+
    "\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u018b\0\u1235"+
    "\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70"+
    "\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u06ca\0\u06ca\0\u2dfb\0\u2e4a"+
    "\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u018b"+
    "\0\u018b\0\u018b\0\u30c2\0\u018b\0\u018b\0\u3111\0\u3160\0\u018b"+
    "\0\u31af\0\u018b\0\u31fe\0\u1c15\0\u06ca\0\u324d\0\u329c\0\u32eb"+
    "\0\u333a\0\u3389\0\u06ca\0\u33d8\0\u06ca\0\u06ca\0\u3427\0\u3476"+
    "\0\u34c5\0\u06ca\0\u3514\0\u06ca\0\u3563\0\u35b2\0\u3601\0\u3650"+
    "\0\u06ca\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u018b"+
    "\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2"+
    "\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a"+
    "\0\u3d69\0\u3db8\0\u06ca\0\u3e07\0\u3af1\0\u3e56\0\u3ea5\0\u3ef4"+
    "\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u411d\0\u06ca"+
    "\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u018b\0\u42f7\0\u4346"+
    "\0\u06ca\0\u06ca\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u06ca"+
    "\0\u06ca\0\u4520\0\u456f\0\u45be\0\u06ca\0\u06ca\0\u460d\0\u465c"+
    "\0\u46ab\0\u46fa\0\u018b\0\u4749\0\u4798\0\u47e7\0\u4836\0\u06ca"+
    "\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u06ca\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u465c\0\u06ca\0\u06ca\0\u4afd\0\u4b4c\0\u06ca\0\u4b9b"+
    "\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u06ca\0\u4d26\0\u4d75\0\u018b"+
    "\0\u4dc4\0\u06ca\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e"+
    "\0\u4fed\0\u503c\0\u06ca\0\u508b\0\u50da\0\u5129\0\u5178\0\u06ca"+
    "\0\u06ca\0\u51c7\0\u50da\0\u5216\0\u5265\0\u52b4\0\u018b\0\u5303"+
    "\0\u5352\0\u06ca\0\u53a1\0\u06ca\0\u06ca\0\u06ca\0\u53f0\0\u543f"+
    "\0\u06ca\0\u018b\0\u548e\0\u54dd\0\u06ca\0\u552c\0\u557b\0\u06ca"+
    "\0\u06ca\0\u06ca\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u06ca"+
    "\0\u5755\0\u57a4\0\u06ca\0\u57f3\0\u06ca\0\u5842\0\u5891\0\u58e0"+
    "\0\u592f\0\u597e\0\u59cd\0\u06ca\0\u5a1c\0\u06ca\0\u06ca\0\u5a6b"+
    "\0\u06ca\0\u5aba\0\u5b09\0\u06ca\0\u5b58\0\u5ba7\0\u5bf6\0\u06ca"+
    "\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u06ca\0\u5d81\0\u018b\0\u5dd0"+
    "\0\u5e1f\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u6048"+
    "\0\u018b\0\u6097\0\u60e6\0\u6135\0\u6184";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\7\1\11\1\7\1\6\1\12"+
    "\1\6\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\6\1\24\1\25\1\26\2\6\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\40\1\41\2\40\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\40\1\52\2\40\3\6\1\32"+
    "\1\33\1\53\1\35\1\36\1\54\2\40\1\55\1\40"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\2\40\1\52\1\40\4\6\1\7\1\56\1\7\1\57"+
    "\1\7\1\60\1\12\1\6\1\61\1\62\1\63\1\16"+
    "\1\17\1\20\1\64\1\22\1\65\1\6\1\24\1\25"+
    "\1\26\1\66\1\10\1\67\1\70\1\31\21\40\1\71"+
    "\6\40\3\6\1\40\1\72\1\73\1\74\1\75\1\76"+
    "\2\40\1\77\5\40\1\100\1\101\1\102\1\103\1\40"+
    "\1\104\1\105\1\40\1\106\1\107\1\110\1\6\1\111"+
    "\1\112\3\111\1\113\1\12\1\6\1\114\1\6\1\63"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\6\1\24"+
    "\1\25\1\26\1\66\1\6\1\67\1\70\1\31\30\40"+
    "\3\6\1\115\1\40\1\116\1\117\1\120\1\121\2\40"+
    "\1\122\3\40\1\123\1\124\1\125\1\126\4\40\1\105"+
    "\1\40\4\6\1\7\1\127\1\7\1\130\1\7\1\60"+
    "\1\131\1\132\1\133\1\134\1\63\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\135\1\24\1\25\1\26\1\66"+
    "\1\10\1\67\1\70\1\31\11\40\1\136\5\40\1\137"+
    "\4\40\1\140\3\40\1\141\1\142\1\6\1\40\1\72"+
    "\1\143\1\74\1\75\1\144\1\145\1\40\1\146\2\40"+
    "\1\147\2\40\1\150\1\40\1\151\2\40\1\104\1\105"+
    "\1\40\1\106\1\107\1\110\7\152\1\153\1\152\1\154"+
    "\10\152\1\155\21\152\1\156\5\152\1\157\4\152\1\160"+
    "\37\152\120\0\1\7\1\0\1\7\1\0\1\7\113\0"+
    "\1\10\125\0\1\161\105\0\117\162\16\0\1\163\4\0"+
    "\1\164\115\0\1\165\116\0\1\165\1\0\2\166\122\0"+
    "\1\167\1\170\114\0\1\167\1\0\1\171\115\0\1\171"+
    "\111\0\2\40\5\0\15\40\1\172\3\40\1\173\6\40"+
    "\2\0\15\40\1\172\3\40\1\173\5\40\27\0\2\40"+
    "\5\0\27\40\1\174\2\0\26\40\1\174\27\0\2\40"+
    "\5\0\1\175\6\40\1\176\6\40\1\177\11\40\2\0"+
    "\1\40\1\175\6\40\1\176\5\40\1\177\10\40\27\0"+
    "\2\40\5\0\4\40\1\200\3\40\1\201\5\40\1\202"+
    "\11\40\2\0\5\40\1\200\3\40\1\201\4\40\1\202"+
    "\10\40\27\0\2\40\5\0\13\40\1\203\1\40\1\204"+
    "\12\40\2\0\13\40\1\203\1\40\1\204\11\40\27\0"+
    "\2\40\5\0\16\40\1\205\4\40\1\206\4\40\2\0"+
    "\16\40\1\205\4\40\1\206\3\40\27\0\2\40\5\0"+
    "\30\40\2\0\27\40\27\0\2\40\5\0\5\40\1\207"+
    "\7\40\1\210\12\40\2\0\6\40\1\207\6\40\1\210"+
    "\11\40\27\0\2\40\5\0\16\40\1\211\11\40\2\0"+
    "\16\40\1\211\10\40\27\0\2\40\5\0\16\40\1\212"+
    "\11\40\2\0\16\40\1\212\10\40\27\0\2\40\5\0"+
    "\4\40\1\213\11\40\1\214\11\40\2\0\5\40\1\213"+
    "\10\40\1\214\10\40\27\0\2\40\5\0\20\40\1\215"+
    "\7\40\2\0\20\40\1\215\6\40\27\0\2\40\5\0"+
    "\23\40\1\216\4\40\2\0\23\40\1\216\3\40\27\0"+
    "\2\40\5\0\4\40\1\217\23\40\2\0\5\40\1\217"+
    "\21\40\27\0\2\40\5\0\4\40\1\220\15\40\1\221"+
    "\1\222\4\40\2\0\5\40\1\220\14\40\1\221\1\222"+
    "\3\40\27\0\2\40\5\0\7\40\1\223\6\40\1\224"+
    "\11\40\2\0\10\40\1\223\5\40\1\224\10\40\27\0"+
    "\2\40\5\0\7\40\1\225\20\40\2\0\10\40\1\225"+
    "\16\40\27\0\2\40\5\0\1\175\6\40\1\176\6\40"+
    "\1\177\11\40\2\0\1\40\1\175\6\40\1\226\5\40"+
    "\1\177\10\40\27\0\2\40\5\0\16\40\1\205\4\40"+
    "\1\206\4\40\2\0\13\40\1\227\2\40\1\205\4\40"+
    "\1\206\3\40\27\0\2\40\5\0\5\40\1\207\7\40"+
    "\1\210\12\40\2\0\6\40\1\207\6\40\1\230\11\40"+
    "\5\0\1\56\145\0\1\170\76\0\1\231\117\0\1\232"+
    "\104\0\117\233\17\0\1\234\120\0\1\235\126\0\1\167"+
    "\116\0\1\236\111\0\2\40\5\0\30\40\2\0\26\40"+
    "\1\237\27\0\2\40\5\0\30\40\2\0\20\40\1\240"+
    "\6\40\27\0\2\40\5\0\30\40\2\0\1\40\1\241"+
    "\6\40\1\242\2\40\1\243\13\40\27\0\2\40\5\0"+
    "\30\40\2\0\5\40\1\244\10\40\1\202\10\40\27\0"+
    "\2\40\5\0\30\40\2\0\13\40\1\245\13\40\27\0"+
    "\2\40\5\0\30\40\2\0\13\40\1\246\2\40\1\247"+
    "\10\40\27\0\2\40\5\0\30\40\2\0\6\40\1\207"+
    "\6\40\1\250\11\40\27\0\2\40\5\0\30\40\2\0"+
    "\23\40\1\251\3\40\27\0\2\40\5\0\30\40\2\0"+
    "\5\40\1\252\21\40\27\0\2\40\5\0\30\40\2\0"+
    "\25\40\1\253\1\40\27\0\2\40\5\0\30\40\2\0"+
    "\10\40\1\254\16\40\27\0\2\40\5\0\30\40\2\0"+
    "\16\40\1\255\10\40\27\0\2\40\5\0\30\40\2\0"+
    "\10\40\1\256\16\40\120\0\1\257\2\0\1\260\1\112"+
    "\3\260\112\0\2\112\2\260\1\261\122\0\1\262\131\0"+
    "\2\40\5\0\30\40\2\0\15\40\1\263\11\40\27\0"+
    "\2\40\5\0\30\40\2\0\10\40\1\264\16\40\27\0"+
    "\2\40\5\0\30\40\2\0\5\40\1\265\21\40\27\0"+
    "\2\40\5\0\30\40\2\0\13\40\1\266\13\40\27\0"+
    "\2\40\5\0\30\40\2\0\13\40\1\227\2\40\1\247"+
    "\10\40\27\0\2\40\5\0\30\40\2\0\6\40\1\207"+
    "\6\40\1\267\11\40\27\0\2\40\5\0\30\40\2\0"+
    "\16\40\1\270\10\40\27\0\2\40\5\0\30\40\2\0"+
    "\20\40\1\215\6\40\27\0\2\40\5\0\30\40\2\0"+
    "\1\40\1\271\16\40\1\272\6\40\27\0\2\40\5\0"+
    "\30\40\2\0\1\40\1\273\3\40\1\252\21\40\5\0"+
    "\1\127\140\0\2\40\5\0\1\274\27\40\2\0\27\40"+
    "\27\0\2\40\5\0\27\40\1\275\2\0\27\40\27\0"+
    "\2\40\5\0\1\40\1\276\26\40\2\0\27\40\27\0"+
    "\2\40\5\0\30\40\2\0\1\40\1\241\6\40\1\277"+
    "\2\40\1\300\2\40\1\301\10\40\27\0\2\40\5\0"+
    "\30\40\2\0\13\40\1\302\2\40\1\247\10\40\27\0"+
    "\2\40\5\0\30\40\2\0\5\40\1\303\21\40\27\0"+
    "\2\40\5\0\30\40\2\0\6\40\1\207\6\40\1\304"+
    "\11\40\27\0\2\40\5\0\30\40\2\0\1\40\1\305"+
    "\25\40\27\0\2\40\5\0\30\40\2\0\20\40\1\306"+
    "\2\40\1\251\3\40\27\0\2\40\5\0\30\40\2\0"+
    "\3\40\1\307\21\40\1\253\1\40\73\0\1\310\1\311"+
    "\1\0\1\312\56\0\1\313\145\0\1\314\70\0\1\315"+
    "\63\0\1\161\1\0\1\161\1\0\1\161\36\0\1\316"+
    "\12\0\1\317\52\0\1\320\103\0\16\321\1\0\100\321"+
    "\2\164\1\322\1\164\1\323\112\164\24\0\2\324\115\0"+
    "\2\166\115\0\2\40\5\0\3\40\1\325\24\40\2\0"+
    "\4\40\1\325\22\40\27\0\2\40\5\0\24\40\1\326"+
    "\3\40\2\0\24\40\1\326\2\40\27\0\2\40\5\0"+
    "\21\40\1\327\6\40\2\0\21\40\1\327\5\40\27\0"+
    "\2\40\5\0\1\330\27\40\2\0\1\40\1\330\25\40"+
    "\27\0\2\40\5\0\15\40\1\331\12\40\2\0\15\40"+
    "\1\331\11\40\27\0\2\40\5\0\2\40\1\332\25\40"+
    "\2\0\3\40\1\332\23\40\27\0\2\40\5\0\14\40"+
    "\1\333\13\40\2\0\14\40\1\333\12\40\27\0\2\40"+
    "\5\0\21\40\1\334\6\40\2\0\21\40\1\334\5\40"+
    "\27\0\2\40\5\0\3\40\1\335\24\40\2\0\4\40"+
    "\1\335\22\40\27\0\2\40\5\0\20\40\1\336\7\40"+
    "\2\0\20\40\1\336\6\40\27\0\2\40\5\0\15\40"+
    "\1\337\12\40\2\0\15\40\1\337\11\40\27\0\2\40"+
    "\5\0\22\40\1\340\5\40\2\0\22\40\1\340\4\40"+
    "\27\0\2\40\5\0\16\40\1\341\11\40\2\0\16\40"+
    "\1\341\10\40\27\0\2\40\5\0\3\40\1\342\24\40"+
    "\2\0\4\40\1\342\22\40\27\0\2\40\5\0\26\40"+
    "\1\343\1\40\2\0\27\40\27\0\2\40\5\0\22\40"+
    "\1\344\5\40\2\0\22\40\1\344\4\40\27\0\2\40"+
    "\5\0\1\40\1\345\26\40\2\0\2\40\1\345\24\40"+
    "\27\0\2\40\5\0\22\40\1\346\5\40\2\0\22\40"+
    "\1\346\4\40\27\0\2\40\5\0\13\40\1\347\14\40"+
    "\2\0\13\40\1\347\13\40\27\0\2\40\5\0\4\40"+
    "\1\350\23\40\2\0\5\40\1\350\21\40\27\0\2\40"+
    "\5\0\1\40\1\351\26\40\2\0\2\40\1\351\24\40"+
    "\27\0\2\40\5\0\4\40\1\352\23\40\2\0\5\40"+
    "\1\352\21\40\27\0\2\40\5\0\10\40\1\353\17\40"+
    "\2\0\11\40\1\353\15\40\27\0\2\40\5\0\1\330"+
    "\27\40\2\0\1\40\1\354\25\40\27\0\2\40\5\0"+
    "\30\40\2\0\16\40\1\355\10\40\27\0\2\40\5\0"+
    "\22\40\1\340\5\40\2\0\22\40\1\356\4\40\4\0"+
    "\1\231\1\0\1\231\1\0\1\231\44\0\1\357\57\0"+
    "\1\360\127\0\2\40\5\0\30\40\2\0\21\40\1\361"+
    "\5\40\27\0\2\40\5\0\30\40\2\0\5\40\1\362"+
    "\21\40\27\0\2\40\5\0\30\40\2\0\21\40\1\363"+
    "\5\40\27\0\2\40\5\0\30\40\2\0\1\40\1\364"+
    "\25\40\27\0\2\40\5\0\30\40\2\0\1\40\1\365"+
    "\25\40\27\0\2\40\5\0\30\40\2\0\6\40\1\366"+
    "\20\40\27\0\2\40\5\0\30\40\2\0\21\40\1\367"+
    "\5\40\27\0\2\40\5\0\30\40\2\0\16\40\1\370"+
    "\10\40\27\0\2\40\5\0\30\40\2\0\20\40\1\336"+
    "\6\40\27\0\2\40\5\0\30\40\2\0\22\40\1\371"+
    "\4\40\27\0\2\40\5\0\30\40\2\0\2\40\1\372"+
    "\24\40\27\0\2\40\5\0\30\40\2\0\22\40\1\373"+
    "\4\40\27\0\2\40\5\0\30\40\2\0\11\40\1\374"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\11\40\1\375"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\11\40\1\376"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\11\40\1\377"+
    "\15\40\4\0\1\260\1\112\2\260\1\u0100\112\0\1\262"+
    "\1\0\1\262\1\0\1\262\44\0\1\u0101\70\0\2\40"+
    "\5\0\30\40\2\0\4\40\1\325\22\40\27\0\2\40"+
    "\5\0\30\40\2\0\1\40\1\u0102\25\40\27\0\2\40"+
    "\5\0\30\40\2\0\6\40\1\u0103\20\40\27\0\2\40"+
    "\5\0\30\40\2\0\11\40\1\u0104\7\40\1\367\5\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\u0105\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\344\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\21\40\1\u0106\5\40"+
    "\27\0\2\40\5\0\30\40\2\0\11\40\1\u0107\15\40"+
    "\27\0\2\40\5\0\30\40\2\0\15\40\1\u0108\11\40"+
    "\27\0\2\40\5\0\24\40\1\u0109\3\40\2\0\27\40"+
    "\27\0\2\40\5\0\30\40\2\0\1\40\1\u010a\25\40"+
    "\27\0\2\40\5\0\30\40\2\0\20\40\1\u010b\6\40"+
    "\27\0\2\40\5\0\30\40\2\0\15\40\1\u010c\11\40"+
    "\27\0\2\40\5\0\30\40\2\0\16\40\1\u010d\10\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\u010e\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\3\40\1\u010f\16\40"+
    "\1\u0110\4\40\27\0\2\40\5\0\30\40\2\0\11\40"+
    "\1\u0111\15\40\27\0\2\40\5\0\30\40\2\0\11\40"+
    "\1\u0112\15\40\27\0\2\40\5\0\30\40\2\0\1\40"+
    "\1\u0113\25\40\62\0\1\u0114\72\0\1\u0115\117\0\1\u0116"+
    "\62\0\16\321\1\u0117\100\321\2\0\1\322\140\0\2\40"+
    "\5\0\1\u0118\27\40\2\0\1\40\1\u0118\25\40\27\0"+
    "\2\40\5\0\4\40\1\u0119\23\40\2\0\5\40\1\u0119"+
    "\21\40\27\0\2\40\5\0\20\40\1\u011a\7\40\2\0"+
    "\20\40\1\u011a\6\40\27\0\2\40\5\0\21\40\1\u011b"+
    "\6\40\2\0\21\40\1\u011b\5\40\27\0\2\40\5\0"+
    "\10\40\1\u011c\17\40\2\0\11\40\1\u011c\15\40\27\0"+
    "\2\40\5\0\4\40\1\u011d\23\40\2\0\5\40\1\u011d"+
    "\21\40\27\0\2\40\5\0\2\40\1\u011e\25\40\2\0"+
    "\3\40\1\u011e\23\40\27\0\2\40\5\0\4\40\1\u011f"+
    "\23\40\2\0\5\40\1\u011f\21\40\27\0\2\40\5\0"+
    "\17\40\1\u0120\10\40\2\0\17\40\1\u0120\7\40\27\0"+
    "\2\40\5\0\22\40\1\u0121\5\40\2\0\22\40\1\u0121"+
    "\4\40\27\0\2\40\5\0\13\40\1\u0122\14\40\2\0"+
    "\13\40\1\u0122\13\40\27\0\2\40\5\0\23\40\1\u0123"+
    "\4\40\2\0\23\40\1\u0123\3\40\27\0\2\40\5\0"+
    "\4\40\1\u0124\23\40\2\0\5\40\1\u0124\21\40\27\0"+
    "\2\40\5\0\17\40\1\u0125\10\40\2\0\17\40\1\u0125"+
    "\7\40\27\0\2\40\5\0\15\40\1\u0126\12\40\2\0"+
    "\15\40\1\u0126\11\40\27\0\2\40\5\0\13\40\1\u0127"+
    "\14\40\2\0\13\40\1\u0127\13\40\27\0\2\40\5\0"+
    "\20\40\1\u011a\7\40\2\0\20\40\1\u0128\6\40\27\0"+
    "\2\40\5\0\30\40\2\0\1\40\1\u0129\25\40\27\0"+
    "\2\40\5\0\4\40\1\u011f\23\40\2\0\5\40\1\u011f"+
    "\3\40\1\u012a\15\40\65\0\1\u012b\60\0\2\40\5\0"+
    "\30\40\2\0\22\40\1\u012c\4\40\27\0\2\40\5\0"+
    "\30\40\2\0\1\40\1\u012d\25\40\27\0\2\40\5\0"+
    "\30\40\2\0\5\40\1\u0119\21\40\27\0\2\40\5\0"+
    "\30\40\2\0\20\40\1\u0128\6\40\27\0\2\40\5\0"+
    "\30\40\2\0\21\40\1\u012e\5\40\27\0\2\40\5\0"+
    "\30\40\2\0\1\40\1\u012f\25\40\27\0\2\40\5\0"+
    "\30\40\2\0\5\40\1\u0130\21\40\27\0\2\40\5\0"+
    "\30\40\2\0\1\40\1\u0131\25\40\27\0\2\40\5\0"+
    "\30\40\2\0\11\40\1\u012a\15\40\27\0\2\40\5\0"+
    "\30\40\2\0\13\40\1\u0132\13\40\27\0\2\40\5\0"+
    "\30\40\2\0\23\40\1\u0133\3\40\27\0\2\40\5\0"+
    "\30\40\2\0\22\40\1\u0134\4\40\27\0\2\40\5\0"+
    "\30\40\2\0\21\40\1\u0135\5\40\27\0\2\40\5\0"+
    "\30\40\2\0\4\40\1\u0136\22\40\27\0\2\40\5\0"+
    "\30\40\2\0\13\40\1\u0137\13\40\4\0\1\260\1\112"+
    "\2\260\1\u0138\164\0\1\u0139\67\0\2\40\5\0\30\40"+
    "\2\0\20\40\1\u013a\6\40\27\0\2\40\5\0\30\40"+
    "\2\0\6\40\1\u013b\20\40\27\0\2\40\5\0\30\40"+
    "\2\0\21\40\1\u013c\5\40\27\0\2\40\5\0\30\40"+
    "\2\0\15\40\1\u013d\11\40\27\0\2\40\5\0\30\40"+
    "\2\0\7\40\1\u013e\17\40\27\0\2\40\5\0\1\u013f"+
    "\27\40\2\0\27\40\27\0\2\40\5\0\30\40\2\0"+
    "\20\40\1\u011a\6\40\27\0\2\40\5\0\30\40\2\0"+
    "\21\40\1\u0140\5\40\27\0\2\40\5\0\30\40\2\0"+
    "\21\40\1\u0141\5\40\27\0\2\40\5\0\30\40\2\0"+
    "\1\40\1\u0142\25\40\27\0\2\40\5\0\30\40\2\0"+
    "\3\40\1\u0143\23\40\27\0\2\40\5\0\30\40\2\0"+
    "\13\40\1\u0144\13\40\27\0\2\40\5\0\30\40\2\0"+
    "\15\40\1\u0145\11\40\27\0\2\40\5\0\30\40\2\0"+
    "\15\40\1\u0146\11\40\27\0\2\40\5\0\30\40\2\0"+
    "\15\40\1\u0147\11\40\36\0\1\u0148\142\0\1\u0149\37\0"+
    "\16\321\1\u0117\4\321\1\322\73\321\24\0\2\40\5\0"+
    "\13\40\1\u014a\14\40\2\0\13\40\1\u014a\13\40\27\0"+
    "\2\40\5\0\16\40\1\u014b\11\40\2\0\16\40\1\u014b"+
    "\10\40\27\0\2\40\5\0\14\40\1\u014c\13\40\2\0"+
    "\14\40\1\u014c\12\40\27\0\2\40\5\0\10\40\1\u014d"+
    "\17\40\2\0\11\40\1\u014d\15\40\27\0\2\40\5\0"+
    "\22\40\1\u014e\5\40\2\0\22\40\1\u014e\4\40\27\0"+
    "\2\40\5\0\6\40\1\u014f\21\40\2\0\7\40\1\u014f"+
    "\17\40\27\0\2\40\5\0\10\40\1\u0150\17\40\2\0"+
    "\11\40\1\u0150\15\40\27\0\2\40\5\0\20\40\1\u0151"+
    "\7\40\2\0\20\40\1\u0151\6\40\27\0\2\40\5\0"+
    "\2\40\1\u0152\25\40\2\0\3\40\1\u0152\23\40\27\0"+
    "\2\40\5\0\4\40\1\u0153\23\40\2\0\5\40\1\u0153"+
    "\21\40\27\0\2\40\5\0\30\40\2\0\11\40\1\u0154"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\22\40\1\u0155"+
    "\4\40\27\0\2\40\5\0\30\40\2\0\15\40\1\u0156"+
    "\11\40\27\0\2\40\5\0\30\40\2\0\5\40\1\u0157"+
    "\21\40\27\0\2\40\5\0\30\40\2\0\12\40\1\u0158"+
    "\14\40\27\0\2\40\5\0\30\40\2\0\21\40\1\u0159"+
    "\5\40\27\0\2\40\5\0\30\40\2\0\23\40\1\u015a"+
    "\3\40\27\0\2\40\5\0\30\40\2\0\22\40\1\u015b"+
    "\4\40\27\0\2\40\5\0\30\40\2\0\11\40\1\u015c"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\20\40\1\u015d"+
    "\6\40\27\0\2\40\5\0\30\40\2\0\3\40\1\u015e"+
    "\23\40\25\0\1\u015f\1\0\2\40\5\0\30\40\2\0"+
    "\27\40\27\0\2\40\5\0\30\40\2\0\5\40\1\u0153"+
    "\21\40\4\0\1\260\1\112\2\260\1\112\162\0\1\u0160"+
    "\71\0\2\40\5\0\30\40\2\0\22\40\1\u0161\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\5\40\1\u0162\21\40"+
    "\27\0\2\40\5\0\30\40\2\0\3\40\1\u0163\23\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\u0164\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\u0165\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\10\40\1\u0166\16\40"+
    "\27\0\2\40\5\0\30\40\2\0\23\40\1\u0167\3\40"+
    "\27\0\2\40\5\0\30\40\2\0\22\40\1\u0168\4\40"+
    "\27\0\2\40\5\0\30\40\2\0\6\40\1\u0169\20\40"+
    "\36\0\1\u016a\107\0\2\40\5\0\13\40\1\u016b\14\40"+
    "\2\0\13\40\1\u016b\13\40\27\0\2\40\5\0\1\u016c"+
    "\27\40\2\0\1\40\1\u016c\25\40\27\0\2\40\5\0"+
    "\5\40\1\u016d\22\40\2\0\6\40\1\u016d\20\40\27\0"+
    "\2\40\5\0\10\40\1\u016e\17\40\2\0\11\40\1\u016e"+
    "\15\40\27\0\2\40\5\0\4\40\1\u016f\23\40\2\0"+
    "\5\40\1\u016f\21\40\27\0\2\40\5\0\2\40\1\u0170"+
    "\25\40\2\0\3\40\1\u0170\23\40\27\0\2\40\5\0"+
    "\15\40\1\u0171\12\40\2\0\15\40\1\u0171\11\40\27\0"+
    "\2\40\5\0\22\40\1\u0172\5\40\2\0\22\40\1\u0172"+
    "\4\40\27\0\2\40\5\0\30\40\2\0\15\40\1\u0173"+
    "\11\40\27\0\2\40\5\0\30\40\2\0\11\40\1\u0174"+
    "\15\40\27\0\2\40\5\0\30\40\2\0\17\40\1\u0175"+
    "\7\40\27\0\2\40\5\0\30\40\2\0\14\40\1\u0176"+
    "\12\40\27\0\2\40\5\0\30\40\2\0\13\40\1\u0177"+
    "\13\40\27\0\2\40\5\0\30\40\2\0\3\40\1\u0170"+
    "\23\40\27\0\2\40\5\0\30\40\2\0\15\40\1\u0171"+
    "\11\40\27\0\2\40\5\0\30\40\2\0\10\40\1\u0178"+
    "\16\40\44\0\1\u0179\101\0\2\40\5\0\30\40\2\0"+
    "\13\40\1\u017a\13\40\27\0\2\40\5\0\30\40\2\0"+
    "\20\40\1\u017b\6\40\27\0\2\40\5\0\30\40\2\0"+
    "\4\40\1\u017c\22\40\27\0\2\40\5\0\30\40\2\0"+
    "\6\40\1\u017d\20\40\27\0\2\40\5\0\4\40\1\u017e"+
    "\23\40\2\0\5\40\1\u017e\21\40\27\0\2\40\5\0"+
    "\13\40\1\u0165\14\40\2\0\13\40\1\u0165\13\40\27\0"+
    "\2\40\5\0\16\40\1\u017f\11\40\2\0\16\40\1\u017f"+
    "\10\40\27\0\2\40\5\0\20\40\1\u0110\7\40\2\0"+
    "\20\40\1\u0110\6\40\27\0\2\40\5\0\30\40\2\0"+
    "\17\40\1\u0180\7\40\27\0\2\40\5\0\30\40\2\0"+
    "\15\40\1\u0181\11\40\27\0\2\40\5\0\30\40\2\0"+
    "\23\40\1\u0182\3\40\25\0\1\u0183\1\0\2\40\5\0"+
    "\30\40\2\0\27\40\27\0\2\40\5\0\30\40\2\0"+
    "\22\40\1\u0184\4\40\56\0\1\u0185\67\0\2\40\5\0"+
    "\30\40\2\0\15\40\1\u0186\11\40\27\0\2\40\5\0"+
    "\30\40\2\0\5\40\1\u0187\21\40\25\0\1\u0188\1\0"+
    "\2\40\5\0\30\40\2\0\27\40\27\0\2\40\5\0"+
    "\15\40\1\u0189\12\40\2\0\15\40\1\u0189\11\40\27\0"+
    "\2\40\5\0\30\40\2\0\23\40\1\u018a\3\40\27\0"+
    "\2\40\5\0\30\40\2\0\17\40\1\u018b\7\40\27\0"+
    "\2\40\5\0\30\40\2\0\22\40\1\u018c\4\40\106\0"+
    "\1\u018d\46\0\1\u018e\143\0\1\u018f\31\0\1\u018f\30\0"+
    "\2\40\5\0\30\40\2\0\22\40\1\u0190\4\40\27\0"+
    "\2\40\5\0\30\40\2\0\23\40\1\u0191\3\40\113\0"+
    "\1\u0192\55\0\1\u0193\122\0\1\u0194\31\0\1\u0194\35\0"+
    "\2\40\5\0\30\40\2\0\22\40\1\u0195\4\40\112\0"+
    "\1\u0196\42\0\1\u0197\126\0\1\u0198\32\0\1\u0198\42\0"+
    "\1\u0199\151\0\1\u019a\31\0\1\u019a\113\0\1\u019b\51\0"+
    "\1\u019c\32\0\1\u019c\131\0\1\u019d\57\0\1\u019e\31\0"+
    "\1\u019e\114\0\1\u019f\63\0\1\u01a0\4\0\1\u01a1\25\0"+
    "\1\u01a0\3\0\1\u01a1\116\0\1\u01a2\64\0\1\u01a3\31\0"+
    "\1\u01a3\123\0\1\u01a4\46\0\1\u01a1\32\0\1\u01a1\124\0"+
    "\1\u01a5\120\0\1\u01a1\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25043];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\6\11\32\1\1\11\7\1\1\11\17\1\1\11"+
    "\1\1\1\11\16\1\1\11\1\1\3\11\1\1\1\11"+
    "\3\1\2\11\7\1\2\11\1\1\1\11\3\1\3\0"+
    "\1\1\1\0\1\1\3\11\37\1\1\0\1\11\1\0"+
    "\3\11\20\1\1\11\3\0\25\1\3\11\1\0\2\11"+
    "\2\0\1\11\1\0\1\11\34\1\1\0\1\11\17\1"+
    "\2\0\22\1\2\0\1\11\1\0\23\1\1\11\14\1"+
    "\2\0\16\1\1\11\1\0\25\1\1\11\1\0\11\1"+
    "\1\11\16\1\1\0\11\1\1\0\1\1\1\0\2\1"+
    "\1\0\4\1\3\0\2\1\3\0\1\1\1\0\1\11"+
    "\4\0\1\1\4\0\1\11\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private StringBuffer cadena = new StringBuffer();
    private ArrayList<Integer> integers = new ArrayList<>();
    private ErrorManager errores = new ErrorManager();
    private boolean analizando;
    private boolean verificarident = false;
    private int seccionActual=0;

    private Symbol symbol(int linea, int columna, String lexema, int type){
        Symbol simbolo = new Symbol(type, linea, columna, lexema);
        escribirSimbolo(simbolo);
        return simbolo;
    }

    private Symbol symbol(int linea, int columna, int type){
        Symbol simbolo = new Symbol(type,linea,columna);
        escribirSimbolo(simbolo);
        return simbolo;
    }

    private Symbol symbol(String value, int tam) {
        if(verificarident){
            int i = integers.get(integers.size()-1);
            if(i>(tam-1-value.lastIndexOf('\n'))){
                integers.remove(integers.size()-1);
                this.yypushback(tam - value.lastIndexOf('\n'));
                Symbol simbolo = new Symbol(sym.DEDENT, yyline+1, yycolumn+1, value);
                escribirSimbolo(simbolo);
                return simbolo;
            } else if(i< (tam-1-value.lastIndexOf('\n'))) {
                integers.add(tam-1-value.lastIndexOf('\n'));
                verificarident = false;
                Symbol simbolo = new Symbol(sym.IDENT, yyline+1, yycolumn+1, value);
                escribirSimbolo(simbolo);
                return simbolo;
            } else {
                verificarident = false;
                return null;
            }
        } else {
            this.yypushback(tam - value.lastIndexOf('\n'));
            verificarident = true;
            Symbol simbolo = new Symbol(sym.NEWLINE, yyline+1, yycolumn+1, value);
            escribirSimbolo(simbolo);
            return simbolo;
        }
    }

    public boolean isAnalizando(){ return analizando; }

    private void escribirSimbolo(Symbol simbolo){
        System.out.println("Simbolo{\n    cadena:"+simbolo.value+"\n    tipo:"+sym.terminalNames[simbolo.sym]+"\n    linea:"+simbolo.left+"\n    columna:"+simbolo.right+"\n}\n");
    }

    private void cambiarEstado(){
        switch(seccionActual){
            case 0: yybegin(YYINITIAL); break;
            case 1: yybegin(JAVA); break;
            case 2: yybegin(PYTHON); break;
            case 3: yybegin(PRINCIPAL); break;
        }
    }

    public ErrorManager gerErrores(){ return errores; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      seccionActual = 0;
    integers.add(0);
    analizando = true;
    yybegin(YYINITIAL);
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    analizando = false;
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.agregarError("Lexico",yytext(),"Caracter no aceptado",new Pos(yyline+1, yycolumn+1));
            }
            // fall through
          case 109: break;
          case 2:
            { /* Ignora los espacios en blanco */
            }
            // fall through
          case 110: break;
          case 3:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.FIN_LINEA);
            }
            // fall through
          case 111: break;
          case 4:
            { yybegin(STRING);
            }
            // fall through
          case 112: break;
          case 5:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.AMPERSON);
            }
            // fall through
          case 113: break;
          case 6:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PAR_A);
            }
            // fall through
          case 114: break;
          case 7:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PAR_C);
            }
            // fall through
          case 115: break;
          case 8:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.POR);
            }
            // fall through
          case 116: break;
          case 9:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MAS);
            }
            // fall through
          case 117: break;
          case 10:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.COMA);
            }
            // fall through
          case 118: break;
          case 11:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MENOS);
            }
            // fall through
          case 119: break;
          case 12:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DIV);
            }
            // fall through
          case 120: break;
          case 13:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ENTERO);
            }
            // fall through
          case 121: break;
          case 14:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MENOR);
            }
            // fall through
          case 122: break;
          case 15:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.IGUAL);
            }
            // fall through
          case 123: break;
          case 16:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MAYOR);
            }
            // fall through
          case 124: break;
          case 17:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ID);
            }
            // fall through
          case 125: break;
          case 18:
            { /* Ignora los saltos de linea */
            }
            // fall through
          case 126: break;
          case 19:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.NOT);
            }
            // fall through
          case 127: break;
          case 20:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MOD);
            }
            // fall through
          case 128: break;
          case 21:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DOS_PUNTOS);
            }
            // fall through
          case 129: break;
          case 22:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.LLAVE_A);
            }
            // fall through
          case 130: break;
          case 23:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.LLAVE_C);
            }
            // fall through
          case 131: break;
          case 24:
            { Symbol sim = symbol(yytext(), yytext().length()); 
                                                            if(sim!=null){
                                                                return sim;
                                                            }
            }
            // fall through
          case 132: break;
          case 25:
            { /* ignora los saltos de linea */
            }
            // fall through
          case 133: break;
          case 26:
            { cadena.setLength(0); yybegin(STRING);
            }
            // fall through
          case 134: break;
          case 27:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.HASHTAG);
            }
            // fall through
          case 135: break;
          case 28:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PUNTO);
            }
            // fall through
          case 136: break;
          case 29:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.COR_A);
            }
            // fall through
          case 137: break;
          case 30:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.COR_C);
            }
            // fall through
          case 138: break;
          case 31:
            { cadena.append(yytext());
            }
            // fall through
          case 139: break;
          case 32:
            { cambiarEstado();  
                                                if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, (lexema.length() > 1)? sym.CADENA : sym.CARACTER);
                                                }
            }
            // fall through
          case 140: break;
          case 33:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.PUNTO); 
                                                }
            }
            // fall through
          case 141: break;
          case 34:
            { cadena.append("J");
            }
            // fall through
          case 142: break;
          case 35:
            { cadena.append("P");
            }
            // fall through
          case 143: break;
          case 36:
            { cadena.append("V");
            }
            // fall through
          case 144: break;
          case 37:
            { /* se ignoran los comentarios */
            }
            // fall through
          case 145: break;
          case 38:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MENORIGUAL);
            }
            // fall through
          case 146: break;
          case 39:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DISTINTO);
            }
            // fall through
          case 147: break;
          case 40:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MAYORIGUAL);
            }
            // fall through
          case 148: break;
          case 41:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.AS);
            }
            // fall through
          case 149: break;
          case 42:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DO);
            }
            // fall through
          case 150: break;
          case 43:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.IF);
            }
            // fall through
          case 151: break;
          case 44:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.OR);
            }
            // fall through
          case 152: break;
          case 45:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.TO);
            }
            // fall through
          case 153: break;
          case 46:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.AND);
            }
            // fall through
          case 154: break;
          case 47:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.AUMENTO);
            }
            // fall through
          case 155: break;
          case 48:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DISMINUCION);
            }
            // fall through
          case 156: break;
          case 49:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.COMPARADOR);
            }
            // fall through
          case 157: break;
          case 50:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.IN);
            }
            // fall through
          case 158: break;
          case 51:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PY);
            }
            // fall through
          case 159: break;
          case 52:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.VB);
            }
            // fall through
          case 160: break;
          case 53:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.COMODIN_CARACTER); 
                                                }
            }
            // fall through
          case 161: break;
          case 54:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.COMODIN_ENTERO); 
                                                }
            }
            // fall through
          case 162: break;
          case 55:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.COMODIN_FLOTANTE); 
                                                }
            }
            // fall through
          case 163: break;
          case 56:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.PY); 
                                                }
            }
            // fall through
          case 164: break;
          case 57:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.VB);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.VB); 
                                                }
            }
            // fall through
          case 165: break;
          case 58:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.CARACTER);
            }
            // fall through
          case 166: break;
          case 59:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.FLOTANTE);
            }
            // fall through
          case 167: break;
          case 60:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DIM);
            }
            // fall through
          case 168: break;
          case 61:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.END);
            }
            // fall through
          case 169: break;
          case 62:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.FOR);
            }
            // fall through
          case 170: break;
          case 63:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.SUB);
            }
            // fall through
          case 171: break;
          case 64:
            { return symbol(yyline+1, yycolumn+1, yytext().substring(1,2), sym.CARACTER);
            }
            // fall through
          case 172: break;
          case 65:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PR_ENTERO);
            }
            // fall through
          case 173: break;
          case 66:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DEF);
            }
            // fall through
          case 174: break;
          case 67:
            { return symbol(yyline+1, yycolumn+1, "%%VB", sym.SEPARADOR_VB);
            }
            // fall through
          case 175: break;
          case 68:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.CASE);
            }
            // fall through
          case 176: break;
          case 69:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PR_CARACTER);
            }
            // fall through
          case 177: break;
          case 70:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ELSE);
            }
            // fall through
          case 178: break;
          case 71:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.LOOP);
            }
            // fall through
          case 179: break;
          case 72:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.NEXT);
            }
            // fall through
          case 180: break;
          case 73:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.STEP);
            }
            // fall through
          case 181: break;
          case 74:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.THEN);
            }
            // fall through
          case 182: break;
          case 75:
            { seccionActual=2; yybegin(PYTHON); return symbol(yyline+1, yycolumn+1, "%%PY", sym.SEPARADOR_PY);
            }
            // fall through
          case 183: break;
          case 76:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.VOID);
            }
            // fall through
          case 184: break;
          case 77:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ELIF);
            }
            // fall through
          case 185: break;
          case 78:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PASS);
            }
            // fall through
          case 186: break;
          case 79:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.JAVA);
            }
            // fall through
          case 187: break;
          case 80:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MAIN);
            }
            // fall through
          case 188: break;
          case 81:
            { if(cadena.length() > 0){
                                                    String lexema = cadena.toString();
                                                    cadena.setLength(0);
                                                    yypushback(yylength());
                                                    return symbol(yyline+1, (yycolumn+1)-lexema.length(), lexema, sym.CADENA);
                                                }else{
                                                    return symbol(yyline+1, yycolumn+1, yytext(), sym.JAVA); 
                                                }
            }
            // fall through
          case 189: break;
          case 82:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.BYVAL);
            }
            // fall through
          case 190: break;
          case 83:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.WHILE);
            }
            // fall through
          case 191: break;
          case 84:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.BREAK);
            }
            // fall through
          case 192: break;
          case 85:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.CLASS);
            }
            // fall through
          case 193: break;
          case 86:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PR_FLOTANTE);
            }
            // fall through
          case 194: break;
          case 87:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.THIS);
            }
            // fall through
          case 195: break;
          case 88:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MENSAJE);
            }
            // fall through
          case 196: break;
          case 89:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.RANGE);
            }
            // fall through
          case 197: break;
          case 90:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.CONST);
            }
            // fall through
          case 198: break;
          case 91:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ESPERAR_TECLA);
            }
            // fall through
          case 199: break;
          case 92:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.SCANF);
            }
            // fall through
          case 200: break;
          case 93:
            { seccionActual=1; yybegin(JAVA); return symbol(yyline+1, yycolumn+1, "%%JAVA", sym.SEPARADOR_JAVA);
            }
            // fall through
          case 201: break;
          case 94:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.ELSEIF);
            }
            // fall through
          case 202: break;
          case 95:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PUBLIC);
            }
            // fall through
          case 203: break;
          case 96:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.RETURN);
            }
            // fall through
          case 204: break;
          case 97:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.SELECT);
            }
            // fall through
          case 205: break;
          case 98:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.SWITCH);
            }
            // fall through
          case 206: break;
          case 99:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.LIMPIAR_PANTALLA);
            }
            // fall through
          case 207: break;
          case 100:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.PRINTF);
            }
            // fall through
          case 208: break;
          case 101:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.DEFAULT);
            }
            // fall through
          case 209: break;
          case 102:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.MENSAJELN);
            }
            // fall through
          case 210: break;
          case 103:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.INCLUDE);
            }
            // fall through
          case 211: break;
          case 104:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.FUNCTION);
            }
            // fall through
          case 212: break;
          case 105:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.INTINPUT);
            }
            // fall through
          case 213: break;
          case 106:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.CHARINPUT);
            }
            // fall through
          case 214: break;
          case 107:
            { return symbol(yyline+1, yycolumn+1, yytext(), sym.FLOATINPUT);
            }
            // fall through
          case 215: break;
          case 108:
            { seccionActual=3; yybegin(PRINCIPAL); return symbol(yyline+1, yycolumn+1, "%%PROGRAMA", sym.SEPARADOR_PROGRAMA);
            }
            // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
