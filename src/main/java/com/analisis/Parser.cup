package com.analisis;

import com.analisis.objetos.analisis.ErrorManager;
import com.analisis.objetos.analisis.Pos;
import java_cup.runtime.Symbol;

action code{: :}
parser code{:

    private ErrorManager errores;

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
        System.out.println("No se esperaba un token tipo <"+sym.terminalNames[s.sym]+"> en ("+linea+","+columna+")");
    }

:}

//declaracion de terminales

terminal String NEWLINE, ENTERO, FLOTANTE, CARACTER,DEF, ID, PAR_A, PAR_C, DOS_PUNTOS, IDENT, DEDENT, PUNTOCOMA;
terminal String CADENA, COMA, ELSEIF, INTINPUT, CHARINPUT, FLOATINPUT, ELSE, IF, WHILE, RANGE, IN, FOR, MAS, MENOS;
terminal String POR, DIV, MOD, DISTINTO, COMPARADOR, IGUAL, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, AND, NOT, OR;
terminal String RETURN, PRINT, BYVAL;

terminal String LLAVE_C, LLAVE_A, PR_ENTERO, PR_FLOTANTE, PR_CARACTER, COR_A, COR_C, PRINTF, SCANF, FIN_LINEA, AMPERSON;
terminal String HASHTAG, PUNTO, AS, DO, TO, AUMENTO, DISMINUCION, PY, VB, COMODIN_ENTERO, COMODIN_CARACTER, COMODIN_FLOTANTE;
terminal String DIM, END, SUB, SEPARADOR_VB, SEPARADOR_PY, SEPARADOR_JAVA, CASE, LOOP, NEXT, STEP, THEN, VOID, ELIF, PASS;
terminal String JAVA, MAIN, BREAK, CLASS, THIS, MENSAJE, CONST, ESPERAR_TECLA, PUBLIC, SELECT, SWITCH, LIMPIAR_PANTALLA;
terminal String DEFAULT, MENSAJELN, INCLUDE, FUNCTION, SEPARADOR_PROGRAMA;

//declaracion de no terminales

non terminal codigo, visual, metodosVb, dclMetodosVb, dclMetodoVb, funcionVb, procedimientoVb, bloqueVb, sentenciasVb;
non terminal sentenciaVb, sentenciaSimpleVb, sentenciaIfVb, sinoVb, sentenciaForVb, tipoForVb, aumentoForVb, idNextVb;
non terminal sentenciaWhileVb, sentenciaDoWhileVb, sentenciaSwitchVb, caseVb, contenidoSwitchVb, valorCaseVb;
non terminal sentenciaDeclaracionVb, declaracionVariableVb, masDeclaracionVariableVb, sentenciaAsignacionVb;
non terminal accionAsignacionVb, sentenciaEscribirVb, mensajesVb, mensajeVb, sentenciaReturnVb;
non terminal dclParametrosVb, listadoParametrosVb, parametroVb, expresionArVb, condicionVb, expresionBoolVb;
non terminal llamadaMetodoVb, listadoParametrosEnviadosVb, espaciosVb;

non terminal java, clasesJv, dclClasesJv, dclClaseJv, contenidoClaseJv, sentenciasDeClaseJv, sentenciaDeClaseJv;
non terminal dclMetodoJv, dclParametrosJv, listadoParametrosJv, bloqueJv, sentenciasJv, sentenciaJv;
non terminal sentenciaSimpleJv, sentenciaIfJv, sinoJv, sentenciaForJv, modificadorForJv, sentenciaWhileJv;
non terminal sentenciaSwitchJv, contenidoSwitchJv, valorSwitchJv, bloqueSwichJv, sentenciaDoWhileJv;
non terminal sentenciaDeclaracionJv, listadoAsignacionesJv, asignacionJv, sentenciaAsignacionJv, accionAsignacionJv;
non terminal sentenciaEscribirJv, sentenciaReturnJv, sentenciaBreakJv, expresionArJv, valorTextoLibreriaJv;
non terminal expresionBoolJv, llamadaMetodoJv, listadoParametrosEnviadosJv, expresionMensajeJv;

non terminal python, metodosPy, dclMetodosPy, dclMetodoPy, dclParametrosPy, listadoId, sentenciasPy, sentenciaPy;
non terminal bloquePy, sentenciaSimplePy, escribirPy, mensajesPy, mensajePy, listadoExpresionesArPy;
non terminal sentenciaIfPy, elseIfPy, elsePy, sentenciaWhilePy, sentenciaForPy, rangePy, condicionPy, expresionArPy;
non terminal llamadaMetodoPy, asignacionVarPy, listadoParametrosEnviadosPy, expresionBoolPy;

non terminal principal, secLibrerias, dclLibrerias, dclLibreria, libreria, libreriaC, valorTexto, secConstantes;
non terminal dclConstantes, dclConstante, secVariables, dclVariables, sentenciaDeclaracion, arreglo, listDimensiones;
non terminal listadoDeclaraciones, asignacionValor, listadoDeclaracionesClases, asignacionConstructor;
non terminal accionConstructor, codigoMain, bloque, sentencias, sentencia, sentenciaSimple, sentenciaAsignacion;
non terminal lugarAsignacion, sentenciaEscribir, expresionCadena, listadoExpresiones, expresionCadenaEntrada;
non terminal valorCadena, comodin, sentenciaIngresoDatos, sentenciaLimpiarPantalla, sentenciaEsperarTecla;
non terminal sentenciaBreak, sentenciaIf, sino, sentenciaFor, modificadorFor, sentenciaWhile, sentenciaDoWhile; 
non terminal sentenciaSwitch, contenidoSwitch, valorSwitch, bloqueSwitch, expresionAr, expresionBool, llamadaMetodo;
non terminal listadoParametrosEnviados, parametrosEnviados, sentenciaDeclaracionInicial;

non terminal tiposDeDato, valorAtomico, tiposDeMetodo, publicOpcional, ingresoDatos;

//declaracion de precedencia
precedence left PR_ENTERO, PR_FLOTANTE, PR_CARACTER;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL;
precedence left COMPARADOR, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;

//Reglas gramaticales para el parser de python, las dem√°s no cambiaran tanto
start with codigo;

codigo::=                               visual java python principal;

//producciones de visual vasic
visual::=                               SEPARADOR_VB espaciosVb metodosVb;

metodosVb::=                            dclMetodosVb
                                        |
                                        ;

dclMetodosVb::=                         dclMetodosVb dclMetodoVb
                                        |dclMetodoVb
                                        ;

dclMetodoVb::=                          funcionVb
                                        |procedimientoVb
                                        ;

funcionVb::=                            publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb;

procedimientoVb::=                      publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb;

bloqueVb::=                             sentenciasVb
                                        |
                                        ;

sentenciasVb::=                         sentenciasVb sentenciaVb
                                        |sentenciaVb
                                        ;

sentenciaVb::=                          sentenciaIfVb espaciosVb
                                        |sentenciaForVb espaciosVb
                                        |sentenciaWhileVb espaciosVb
                                        |sentenciaDoWhileVb espaciosVb
                                        |sentenciaSwitchVb espaciosVb
                                        |sentenciaSimpleVb espaciosVb
                                        ;

sentenciaSimpleVb::=                    sentenciaDeclaracionVb 
                                        |sentenciaAsignacionVb 
                                        |ingresoDatos 
                                        |sentenciaEscribirVb 
                                        |llamadaMetodoVb 
                                        |sentenciaReturnVb 
                                        ;

sentenciaIfVb::=                        IF expresionBoolVb THEN sentenciaSimpleVb 
                                        |IF expresionBoolVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb
                                        |IF expresionBoolVb THEN espaciosVb bloqueVb sinoVb END IF
                                        |IF expresionBoolVb espaciosVb bloqueVb sinoVb END IF
                                        ;

sinoVb::=                               ELSEIF condicionVb THEN espaciosVb bloqueVb sinoVb
                                        |ELSEIF condicionVb espaciosVb bloqueVb sinoVb
                                        |ELSE espaciosVb bloqueVb
                                        ;

sentenciaForVb::=                       FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb;

tipoForVb::=                            tiposDeDato
                                        |
                                        ;

aumentoForVb::=                         STEP expresionArVb
                                        |
                                        ;

idNextVb::=                             ID
                                        |
                                        ;

sentenciaWhileVb::=                     WHILE condicionVb espaciosVb bloqueVb END WHILE;

sentenciaDoWhileVb::=                   DO espaciosVb bloqueVb LOOP WHILE condicionVb;

sentenciaSwitchVb::=                    SELECT caseVb expresionArVb espaciosVb contenidoSwitchVb END SELECT;

caseVb::=                               CASE
                                        |
                                        ;

contenidoSwitchVb::=                    contenidoSwitchVb valorCaseVb espaciosVb bloqueVb
                                        |valorCaseVb espaciosVb bloqueVb
                                        ;

valorCaseVb::=                          CASE valorAtomico
                                        |ELSE
                                        ;

sentenciaDeclaracionVb::=               declaracionVariableVb masDeclaracionVariableVb;

declaracionVariableVb::=                DIM listadoId AS tiposDeDato IGUAL expresionArVb
                                        |DIM listadoId AS tiposDeDato
                                        ;

masDeclaracionVariableVb::=             COMA listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb
                                        |COMA listadoId AS tiposDeDato masDeclaracionVariableVb
                                        |
                                        ;

sentenciaAsignacionVb::=                ID IGUAL accionAsignacionVb;

accionAsignacionVb::=                   ingresoDatos
                                        |expresionArVb
                                        ;

sentenciaEscribirVb::=                  MENSAJE PAR_A mensajesVb PAR_C
                                        |MENSAJELN PAR_A mensajesVb PAR_C
                                        ;

mensajesVb::=                           mensajesVb AMPERSON mensajeVb
                                        |mensajeVb
                                        ;

mensajeVb::=                            CADENA
                                        |expresionArVb
                                        ;

sentenciaReturnVb::=                    RETURN expresionArVb;

dclParametrosVb::=                      PAR_A listadoParametrosVb PAR_C
                                        |PAR_A PAR_C
                                        |
                                        ;

listadoParametrosVb::=                  listadoParametrosVb COMA parametroVb
                                        |parametroVb
                                        ;

parametroVb::=                          BYVAL ID AS tiposDeDato
                                        |ID AS tiposDeDato
                                        ;

expresionArVb::=                        expresionArVb MAS expresionArVb
                                        |expresionArVb MENOS expresionArVb
                                        |expresionArVb DIV expresionArVb
                                        |expresionArVb POR expresionArVb
                                        |expresionArVb MOD expresionArVb
                                        |PAR_A expresionArVb PAR_C
                                        |llamadaMetodoVb
                                        |valorAtomico
                                        ;

condicionVb::=                          PAR_A expresionBoolVb PAR_C
                                        |expresionBoolVb
                                        ;

expresionBoolVb::=                      expresionArVb DISTINTO expresionArVb
                                        |expresionArVb COMPARADOR expresionArVb
                                        |expresionArVb MENOR expresionArVb
                                        |expresionArVb MENORIGUAL expresionArVb
                                        |expresionArVb MAYOR expresionArVb
                                        |expresionArVb MAYORIGUAL expresionArVb
                                        |expresionBoolVb AND expresionBoolVb
                                        |expresionBoolVb OR expresionBoolVb
                                        |NOT expresionBoolVb
                                        ;

llamadaMetodoVb::=                      ID PAR_A listadoParametrosEnviadosVb PAR_C
                                        |ID PAR_A PAR_C
                                        ;

listadoParametrosEnviadosVb::=          listadoParametrosEnviadosVb COMA expresionArVb
                                        |expresionArVb
                                        ;

espaciosVb::=                            espaciosVb FIN_LINEA
                                        |FIN_LINEA
                                        ;

//producciones de java 
java::=                                 SEPARADOR_JAVA clasesJv;

clasesJv::=                             dclClasesJv
                                        |
                                        ;

dclClasesJv::=                          dclClasesJv dclClaseJv
                                        |dclClaseJv
                                        ;

dclClaseJv::=                           publicOpcional CLASS ID LLAVE_A contenidoClaseJv LLAVE_C;

contenidoClaseJv::=                     sentenciasDeClaseJv
                                        |
                                        ;

sentenciasDeClaseJv::=                  sentenciasDeClaseJv sentenciaDeClaseJv
                                        |sentenciaDeClaseJv
                                        ;

sentenciaDeClaseJv::=                   sentenciaDeclaracionJv
                                        |dclMetodoJv
                                        ;

dclMetodoJv::=                          publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C;

dclParametrosJv::=                      listadoParametrosJv
                                        |
                                        ;

listadoParametrosJv::=                  listadoParametrosJv COMA tiposDeDato ID
                                        |tiposDeDato ID
                                        ;

bloqueJv::=                             sentenciasJv
                                        |
                                        ;

sentenciasJv::=                         sentenciasJv sentenciaJv
                                        |sentenciaJv
                                        ;

sentenciaJv::=                          sentenciaIfJv
                                        |sentenciaForJv
                                        |sentenciaWhileJv
                                        |sentenciaSwitchJv 
                                        |sentenciaDoWhileJv FIN_LINEA
                                        |sentenciaSimpleJv FIN_LINEA
                                        ;

sentenciaSimpleJv::=                    sentenciaDeclaracionJv
                                        |sentenciaAsignacionJv
                                        |ingresoDatos
                                        |sentenciaEscribirJv
                                        |llamadaMetodoJv
                                        |sentenciaReturnJv
                                        |sentenciaBreakJv
                                        ;

sentenciaIfJv::=                        IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv;

sinoJv::=                               ELSE IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv
                                        |ELSE LLAVE_A bloqueJv LLAVE_C 
                                        |
                                        ;

sentenciaForJv::=                       FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C;

modificadorForJv::=                     IGUAL expresionArJv
                                        |AUMENTO
                                        |DISMINUCION
                                        ;

sentenciaWhileJv::=                     WHILE PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C;

sentenciaSwitchJv::=                    SWITCH PAR_A expresionArJv PAR_C LLAVE_A contenidoSwitchJv LLAVE_C;

contenidoSwitchJv::=                    contenidoSwitchJv valorSwitchJv DOS_PUNTOS bloqueSwichJv
                                        |valorSwitchJv DOS_PUNTOS bloqueSwichJv
                                        ;

valorSwitchJv::=                        CASE ENTERO
                                        |CASE FLOTANTE
                                        |CASE CARACTER
                                        |DEFAULT
                                        ;

bloqueSwichJv::=                        LLAVE_A bloqueJv LLAVE_C
                                        |bloqueJv
                                        ;

sentenciaDoWhileJv::=                   DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv PAR_C;

sentenciaDeclaracionJv::=               tiposDeDato listadoAsignacionesJv;

listadoAsignacionesJv::=                listadoAsignacionesJv asignacionJv
                                        |asignacionJv
                                        ;

asignacionJv::=                         ID IGUAL accionAsignacionJv
                                        |ID
                                        ;

sentenciaAsignacionJv::=                ID IGUAL accionAsignacionJv
                                        |THIS ID IGUAL accionAsignacionJv
                                        ;

accionAsignacionJv::=                   expresionArJv
                                        |ingresoDatos
                                        ;

sentenciaEscribirJv::=                  MENSAJE PAR_A expresionMensajeJv PAR_C
                                        |MENSAJELN PAR_A expresionMensajeJv PAR_C
                                        ;

expresionMensajeJv::=                   expresionMensajeJv MAS expresionMensajeJv
                                        |CADENA
                                        |expresionArJv
                                        ;

sentenciaReturnJv::=                    RETURN expresionArJv;

sentenciaBreakJv::=                     BREAK;

expresionArJv::=                        expresionArJv MAS expresionArJv
                                        |expresionArJv MENOS expresionArJv
                                        |expresionArJv DIV expresionArJv
                                        |expresionArJv POR expresionArJv
                                        |expresionArJv MOD expresionArJv
                                        |PAR_A expresionArJv PAR_C
                                        |llamadaMetodoJv
                                        |valorAtomico
                                        |THIS ID
                                        ;

expresionBoolJv::=                      expresionArJv DISTINTO expresionArJv
                                        |expresionArJv COMPARADOR expresionArJv
                                        |expresionArJv MENOR expresionArJv
                                        |expresionArJv MENORIGUAL expresionArJv
                                        |expresionArJv MAYOR expresionArJv
                                        |expresionArJv MAYORIGUAL expresionArJv
                                        |expresionBoolJv AND expresionBoolJv
                                        |expresionBoolJv OR expresionBoolJv
                                        |NOT expresionBoolJv
                                        ;

llamadaMetodoJv::=                      ID PAR_A listadoParametrosEnviadosJv PAR_C
                                        |ID PAR_A PAR_C
                                        ;

listadoParametrosEnviadosJv::=          listadoParametrosEnviadosJv COMA expresionArJv
                                        |expresionArJv
                                        ;


//producciones de python
python::=                               SEPARADOR_PY NEWLINE metodosPy;

metodosPy::=                            dclMetodosPy
                                        |
                                        ;

dclMetodosPy::=                         dclMetodosPy dclMetodoPy
                                        |dclMetodoPy
                                        ;

dclMetodoPy::=                          DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS bloquePy
                                        ;

dclParametrosPy::=                      listadoId
                                        |
                                        ;

listadoId::=                            listadoId COMA ID
                                        |ID
                                        ;

sentenciasPy::=                         sentenciasPy sentenciaPy
                                        |sentenciaPy
                                        ;

sentenciaPy::=                          sentenciaIfPy NEWLINE
                                        |sentenciaForPy NEWLINE
                                        |sentenciaWhilePy NEWLINE
                                        |sentenciaSimplePy NEWLINE
                                        ;

bloquePy::=                             NEWLINE IDENT sentenciasPy DEDENT
                                        |sentenciaSimplePy
                                        ;

sentenciaSimplePy::=                    asignacionVarPy
                                        |escribirPy
                                        |ingresoDatos
                                        |llamadaMetodoPy
                                        ;

escribirPy::=                           MENSAJE PAR_A mensajesPy PAR_C
                                        ;

mensajesPy::=                            mensajesPy COMA mensajePy
                                        |mensajePy
                                        ;

mensajePy::=                            CADENA
                                        |expresionArPy
                                        ;

listadoExpresionesArPy::=               listadoExpresionesArPy COMA expresionArPy
                                        |expresionArPy
                                        ;

sentenciaIfPy::=                        IF condicionPy DOS_PUNTOS bloquePy elseIfPy elsePy
                                        ;

elseIfPy::=                             elseIfPy ELSEIF condicionPy DOS_PUNTOS bloquePy
                                        |
                                        ;

elsePy::=                               ELSE DOS_PUNTOS bloquePy
                                        ;

sentenciaWhilePy::=                     WHILE condicionPy bloquePy
                                        ;

sentenciaForPy::=                       FOR ID IN rangePy DOS_PUNTOS bloquePy
                                        ;

rangePy::=                              RANGE PAR_A expresionArPy PAR_C
                                        |RANGE PAR_A expresionArPy COMA expresionArPy PAR_C
                                        |RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy PAR_C
                                        ;

condicionPy::=                          PAR_A expresionBoolPy PAR_C
                                        |expresionBoolPy
                                        ;

expresionArPy::=                        expresionArPy MAS expresionArPy
                                        |expresionArPy MENOS expresionArPy
                                        |expresionArPy DIV expresionArPy
                                        |expresionArPy POR expresionArPy
                                        |expresionArPy MOD expresionArPy
                                        |PAR_A expresionArPy PAR_C
                                        |llamadaMetodoPy
                                        |valorAtomico
                                        ;

llamadaMetodoPy::=                      ID PAR_A listadoParametrosEnviadosPy PAR_C
                                        |ID PAR_A PAR_C
                                        ;

asignacionVarPy::=                      listadoId IGUAL listadoExpresionesArPy
                                        |ID IGUAL ingresoDatos
                                        |ID IGUAL expresionArPy
                                        ;

listadoParametrosEnviadosPy::=          listadoParametrosEnviadosPy COMA expresionArPy
                                        |expresionArPy
                                        ;

expresionBoolPy::=                      expresionArPy DISTINTO expresionArPy
                                        |expresionArPy COMPARADOR expresionArPy
                                        |expresionArPy MENOR expresionArPy
                                        |expresionArPy MENORIGUAL expresionArPy
                                        |expresionArPy MAYOR expresionArPy
                                        |expresionArPy MAYORIGUAL expresionArPy
                                        |expresionBoolPy AND expresionBoolPy
                                        |expresionBoolPy OR expresionBoolPy
                                        |NOT expresionBoolPy
                                        ;

//producciones principal
principal::=                            SEPARADOR_PROGRAMA secLibrerias secConstantes secVariables codigoMain;

secLibrerias::=                         dclLibrerias
                                        |
                                        ;

dclLibrerias::=                         dclLibrerias dclLibreria
                                        |dclLibreria
                                        ;

dclLibreria::=                          HASHTAG INCLUDE libreria;

libreria::=                             JAVA valorTextoLibreriaJv
                                        |PY
                                        |VB
                                        |MENOR libreriaC MAYOR
                                        ;

libreriaC::=                            libreriaC PUNTO ID
                                        |ID
                                        ;

valorTextoLibreriaJv::=                 CADENA
                                        |CARACTER
                                        ;

secConstantes::=                        dclConstantes
                                        |
                                        ;

dclConstantes::=                        dclConstantes dclConstante
                                        |dclConstante
                                        ;

dclConstante::=                         CONST tiposDeDato ID IGUAL expresionAr FIN_LINEA;

secVariables::=                         dclVariables
                                        |
                                        ;

dclVariables::=                         dclVariables sentenciaDeclaracionInicial
                                        |sentenciaDeclaracionInicial
                                        ;

sentenciaDeclaracionInicial::=          sentenciaDeclaracion FIN_LINEA;

sentenciaDeclaracion::=                 tiposDeDato listadoDeclaraciones 
                                        |JAVA PUNTO ID listadoDeclaracionesClases 
                                        |tiposDeDato arreglo
                                        ;

arreglo::=                              ID listDimensiones;

listDimensiones::=                      listDimensiones COR_A expresionAr COR_C
                                        |COR_A expresionAr COR_C
                                        ;

listadoDeclaraciones::=                 listadoDeclaraciones COMA ID asignacionValor
                                        |ID asignacionValor
                                        ;
 
asignacionValor::=                      IGUAL expresionAr
                                        |
                                        ;

listadoDeclaracionesClases::=           listadoDeclaracionesClases COMA ID asignacionConstructor
                                        |ID asignacionConstructor
                                        ;

asignacionConstructor::=                accionConstructor
                                        |
                                        ;

accionConstructor::=                    PAR_A listadoParametrosEnviados PAR_C;

codigoMain::=                           VOID MAIN PAR_A PAR_C LLAVE_A bloque LLAVE_C;

bloque::=                               sentencias 
                                        |
                                        ;

sentencias::=                           sentencias sentencia
                                        |sentencia
                                        ;

sentencia::=                            sentenciaIf
                                        |sentenciaFor
                                        |sentenciaWhile
                                        |sentenciaDoWhile
                                        |sentenciaSwitch
                                        |sentenciaSimple FIN_LINEA
                                        ;

sentenciaSimple::=                      sentenciaAsignacion
                                        |sentenciaDeclaracion
                                        |sentenciaEscribir
                                        |sentenciaIngresoDatos
                                        |sentenciaLimpiarPantalla
                                        |sentenciaEsperarTecla
                                        |llamadaMetodo
                                        |sentenciaBreak
                                        ;

sentenciaAsignacion::=                  lugarAsignacion IGUAL expresionAr;

lugarAsignacion::=                      ID
                                        |arreglo
                                        |JAVA PUNTO ID
                                        ;

sentenciaEscribir::=                    PRINTF PAR_A expresionCadena PAR_C
                                        |PRINTF PAR_A expresionCadena COMA listadoExpresiones PAR_C
                                        ;

expresionCadena::=                      expresionCadena valorCadena
                                        |valorCadena
                                        ;

listadoExpresiones::=                   listadoExpresiones COMA expresionAr
                                        |expresionAr
                                        |listadoExpresiones COMA AMPERSON expresionAr
                                        |AMPERSON expresionAr
                                        ;

expresionCadenaEntrada::=               valorTexto comodin
                                        |comodin valorTexto
                                        |valorTexto comodin valorTexto
                                        |comodin
                                        ;

valorCadena::=                          valorTexto
                                        |comodin
                                        ;

valorTexto::=                           CADENA
                                        |CARACTER
                                        ;

comodin::=                              COMODIN_CARACTER
                                        |COMODIN_ENTERO
                                        |COMODIN_FLOTANTE
                                        ;

sentenciaIngresoDatos::=                SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion PAR_C;

sentenciaLimpiarPantalla::=             LIMPIAR_PANTALLA PAR_A PAR_C;

sentenciaEsperarTecla::=                ESPERAR_TECLA PAR_A PAR_C;

sentenciaBreak::=                       BREAK;

sentenciaIf::=                          IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino;

sino::=                                 ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino
                                        |ELSE LLAVE_A bloque LLAVE_C
                                        |
                                        ;

sentenciaFor::=                         FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque LLAVE_C; 

modificadorFor::=                       IGUAL expresionAr
                                        |AUMENTO
                                        |DISMINUCION
                                        ;

sentenciaWhile::=                       WHILE PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C;

sentenciaDoWhile::=                     DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C FIN_LINEA;

sentenciaSwitch::=                      SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch LLAVE_C;

contenidoSwitch::=                      contenidoSwitch valorSwitch DOS_PUNTOS bloqueSwitch 
                                        |valorSwitch DOS_PUNTOS bloqueSwitch
                                        ;

valorSwitch::=                          CASE ENTERO
                                        |CASE FLOTANTE
                                        |CASE CARACTER
                                        |DEFAULT
                                        ;

bloqueSwich::=                          LLAVE_A bloque LLAVE_C
                                        |bloque
                                        ;

expresionAr::=                          expresionAr MAS expresionAr
                                        |expresionAr MENOS expresionAr
                                        |expresionAr DIV expresionAr
                                        |expresionAr POR expresionAr
                                        |expresionAr MOD expresionAr
                                        |PAR_A expresionAr PAR_C
                                        |llamadaMetodo
                                        |valorAtomico
                                        ;

expresionBool::=                        expresionAr DISTINTO expresionAr
                                        |expresionAr COMPARADOR expresionAr
                                        |expresionAr MENOR expresionAr
                                        |expresionAr MENORIGUAL expresionAr
                                        |expresionAr MAYOR expresionAr
                                        |expresionAr MAYORIGUAL expresionAr
                                        |expresionBool AND expresionBool
                                        |expresionBool OR expresionBool
                                        |NOT expresionBool
                                        ;

llamadaMetodo::=                        JAVA PUNTO ID PUNTO ID PAR_A listadoParametrosEnviados PAR_C
                                        |PY PUNTO ID PAR_A listadoParametrosEnviados PAR_C
                                        |VB PUNTO ID PAR_A listadoParametrosEnviados PAR_C
                                        ;

listadoParametrosEnviados::=            parametrosEnviados
                                        |
                                        ;

parametrosEnviados::=                   parametrosEnviados COMA expresionAr
                                        |expresionAr
                                        ;

//produccionesGenerales

ingresoDatos::=                         INTINPUT PAR_A CADENA PAR_C
                                        |CHARINPUT PAR_A CADENA PAR_C
                                        |FLOATINPUT PAR_A CADENA PAR_C
                                        |INTINPUT PAR_A PAR_C
                                        |CHARINPUT PAR_A PAR_C
                                        |FLOATINPUT PAR_A PAR_C
                                        ;

tiposDeDato::=                          PR_ENTERO
                                        |PR_FLOTANTE
                                        |PR_CARACTER
                                        ;

valorAtomico::=                         ENTERO
                                        |FLOTANTE
                                        |CARACTER
                                        |MENOS ENTERO
                                        |ID
                                        ;

tiposDeMetodo::=                        VOID
                                        |tiposDeDato
                                        ;

publicOpcional::=                       PUBLIC
                                        |
                                        ;