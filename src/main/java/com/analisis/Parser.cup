package com.analisis;

import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import com.analisis.objetos.nodos.*;
import com.analisis.objetos.analisis.*;
import com.analisis.objetos.basicos.Dato;
import com.analisis.objetos.basicos.Llamadas.*;
import com.analisis.objetos.estructuras.ColeccionInstr;
import com.analisis.objetos.basicos.lugaresAsignacion.*;
import com.analisis.objetos.basicos.accionesAsignacion.*;
import com.analisis.objetos.instrucciones.instruccionesmlg.*;

action code{: :}
parser code{:

    private ErrorManager errores;
    private ColeccionInstr coleccionInstr; 

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
        coleccionInstr = new ColeccionInstr();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
        System.out.println("No se esperaba un token tipo <"+sym.terminalNames[s.sym]+"> en ("+linea+","+columna+")");
    }

    public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        errores.getErrores().remove(errores.getErrores().size()-1);
        errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }

    public ColeccionInstr getColeccionInstr(){ return coleccionInstr; }

:}

//declaracion de terminales

terminal String NEWLINE, ENTERO, FLOTANTE, CARACTER,DEF, ID, PAR_A, PAR_C, DOS_PUNTOS, IDENT, DEDENT, PUNTOCOMA;
terminal String CADENA, COMA, ELSEIF, INTINPUT, CHARINPUT, FLOATINPUT, ELSE, IF, WHILE, RANGE, IN, FOR, MAS, MENOS;
terminal String POR, DIV, MOD, DISTINTO, COMPARADOR, IGUAL, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, AND, NOT, OR;
terminal String RETURN, PRINT, BYVAL;

terminal String LLAVE_C, LLAVE_A, PR_ENTERO, PR_FLOTANTE, PR_CARACTER, COR_A, COR_C, PRINTF, SCANF, FIN_LINEA, AMPERSON;
terminal String HASHTAG, PUNTO, AS, DO, TO, AUMENTO, DISMINUCION, PY, VB, COMODIN_ENTERO, COMODIN_CARACTER, COMODIN_FLOTANTE;
terminal String DIM, END, SUB, SEPARADOR_VB, SEPARADOR_PY, SEPARADOR_JAVA, CASE, LOOP, NEXT, STEP, THEN, VOID, ELIF, PASS;
terminal String JAVA, MAIN, BREAK, CLASS, THIS, MENSAJE, CONST, ESPERAR_TECLA, PUBLIC, SELECT, SWITCH, LIMPIAR_PANTALLA;
terminal String DEFAULT, MENSAJELN, INCLUDE, FUNCTION, SEPARADOR_PROGRAMA;

//declaracion de no terminales
non terminal Instruccion funcionVb, procedimientoVb, sentenciaIfVb, sentenciaForVb, sentenciaWhileVb, sentenciaDoWhileVb;
non terminal Instruccion sentenciaAsignacionVb, sentenciaEscribirVb, sentenciaReturnVb, sentenciaSwitchVb, sinoVb;

non terminal Llamada llamadaMetodoVb;

non terminal AccionIngreso ingresoDatos;

non terminal List<Instruccion> bloqueVb, sentenciasVb, sentenciaSimpleVb, declaracionVariableVb, masDeclaracionVariableVb;
non terminal List<Instruccion> sentenciaVb, sentenciaDeclaracionVb;

non terminal String tipoForVb, tiposDeDato, idNextVb;

non terminal NodoAritmetico expresionArVb, expresionArJv, expresionArPy, expresionAr, aumentoForVb, mensajeVb;
non terminal NodoBooleano condicionVb, expresionBoolVb, condicionPy, expresionBoolPy, expresionBoolJv, expresionBool;

non terminal List<CaseInstr> contenidoSwitchVb;

non terminal Dato valorCaseVb, valorAtomico, parametroVb;

non terminal Accion accionAsignacionVb;

non terminal List<Dato> dclParametrosVb, listadoParametrosVb;

non terminal Object codigo, visual, metodosVb, dclMetodosVb, dclMetodoVb, caseVb, espaciosVb;

non terminal List<NodoAritmetico> listadoParametrosEnviados, listadoParametrosEnviadosJv, listadoParametrosEnviadosPy;
non terminal List<NodoAritmetico> listadoParametrosEnviadosVb, listadoExpresionesArPy, listadoExpresiones, parametrosEnviados;

non terminal Concat mensajesPy, mensajesVb;

non terminal java, clasesJv, dclClasesJv, dclClaseJv, contenidoClaseJv, sentenciasDeClaseJv, sentenciaDeClaseJv;
non terminal dclMetodoJv, dclParametrosJv, listadoParametrosJv, bloqueJv, sentenciasJv, sentenciaJv;
non terminal sentenciaSimpleJv, sentenciaIfJv, sinoJv, sentenciaForJv, modificadorForJv, sentenciaWhileJv;
non terminal sentenciaSwitchJv, contenidoSwitchJv, valorSwitchJv, bloqueSwichJv, sentenciaDoWhileJv;
non terminal sentenciaDeclaracionJv, listadoAsignacionesJv, asignacionJv, sentenciaAsignacionJv, accionAsignacionJv;
non terminal sentenciaEscribirJv, sentenciaReturnJv, sentenciaBreakJv, valorTextoLibreriaJv;
non terminal llamadaMetodoJv, expresionMensajeJv;

non terminal python, metodosPy, dclMetodosPy, dclMetodoPy, dclParametrosPy, listadoId, sentenciasPy, sentenciaPy;
non terminal bloquePy, sentenciaSimplePy, escribirPy, mensajePy;
non terminal sentenciaIfPy, elseIfPy, elsePy, sentenciaWhilePy, sentenciaForPy, rangePy;
non terminal llamadaMetodoPy, asignacionVarPy;

non terminal principal, secLibrerias, dclLibrerias, dclLibreria, libreria, libreriaC, valorTexto, secConstantes;
non terminal dclConstantes, dclConstante, secVariables, dclVariables, sentenciaDeclaracion, arreglo, listDimensiones;
non terminal listadoDeclaraciones, asignacionValor, listadoDeclaracionesClases, asignacionConstructor;
non terminal accionConstructor, codigoMain, bloque, sentencias, sentencia, sentenciaSimple, sentenciaAsignacion;
non terminal lugarAsignacion, sentenciaEscribir, expresionCadena, expresionCadenaEntrada;
non terminal valorCadena, comodin, sentenciaIngresoDatos, sentenciaLimpiarPantalla, sentenciaEsperarTecla;
non terminal sentenciaBreak, sentenciaIf, sino, sentenciaFor, modificadorFor, sentenciaWhile, sentenciaDoWhile; 
non terminal sentenciaSwitch, contenidoSwitch, valorSwitch, bloqueSwitch, llamadaMetodo;
non terminal sentenciaDeclaracionInicial, cadenaExpresion;

non terminal tiposDeMetodo, publicOpcional, ingreso;

//declaracion de precedencia
precedence left PR_ENTERO, PR_FLOTANTE, PR_CARACTER, COMA;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL;
precedence left COMPARADOR, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;

//Reglas gramaticales para el parser de python, las dem√°s no cambiaran tanto
start with codigo;

codigo::=                               visual java python principal;

//producciones de visual vasic
visual::=                               SEPARADOR_VB espaciosVb metodosVb;

metodosVb::=                            dclMetodosVb
                                        |
                                        ;

dclMetodosVb::=                         dclMetodosVb dclMetodoVb
                                        |dclMetodoVb
                                        ;

dclMetodoVb::=                          funcionVb:metodoInstr {: coleccionInstr.getInstruccionesVb().add(metodoInstr); :}
                                        |procedimientoVb:metodoInstr {: coleccionInstr.getInstruccionesVb().add(metodoInstr); :}
                                        ;

funcionVb::=                            publicOpcional FUNCTION:pos ID:id dclParametrosVb:parametros AS tiposDeDato:tipo espaciosVb bloqueVb:instrucciones END FUNCTION espaciosVb {:
                                            if(id!=null&&tipo!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |publicOpcional FUNCTION ID dclParametrosVb error:e espaciosVb bloqueVb END FUNCTION espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico el tipo para la funcion declarada, se esperaba un tipo.", eleft, eright); :}
                                        |publicOpcional FUNCTION error:e dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico un identificador para la funcion declarada, se esperaba un identificador.", eleft, eright); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada FUNCTION.",new Pos(eleft,eright)); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada END.",new Pos(eleft,eright)); :}
                                        |publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato error:e bloqueVb END FUNCTION {: agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); :}
                                        ;

procedimientoVb::=                      publicOpcional SUB:pos ID:id dclParametrosVb:parametros espaciosVb bloqueVb:instrucciones END SUB espaciosVb {:
                                            if(id!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.VOID,id,parametros,instrucciones,new Pos(posleft,posright));
                                            }
                                        :}
                                        |publicOpcional SUB error:e dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb {: agregarError("Sintactico",(String) e,"No se especifico un identificador para el procedimiento declarado, se esperaba un identificador.", eleft, eright); :}
                                        |publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END error:e {: agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada SUB.",new Pos(eleft,eright)); :}
                                        |publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb error:e {: agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada END.",new Pos(eleft,eright)); :}
                                        |publicOpcional SUB ID dclParametrosVb error:e bloqueVb END SUB {: agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); :}
                                        ;

bloqueVb::=                             sentenciasVb:instrucciones {:
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        :}
                                        | {:
                                            RESULT = new ArrayList();
                                        :}
                                        ;

sentenciasVb::=                         sentenciasVb:instrucciones sentenciaVb:instruccion {:
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaVb::=                          sentenciaIfVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhileVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaDoWhileVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSwitchVb:instruccion espaciosVb {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimpleVb:instrucciones espaciosVb {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

sentenciaSimpleVb::=                    sentenciaDeclaracionVb:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |sentenciaAsignacionVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:accionIngreso {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accionIngreso!=null) instrucciones.add(new IngresoInstr(accionIngreso, new Pos(accionIngresoleft, accionIngresoright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaEscribirVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoVb:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaReturnVb:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaIfVb::=                        IF:pos condicionVb:condicion THEN sentenciaSimpleVb:instrucciones {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion THEN sentenciaSimpleVb:instrucciones ELSE sentenciaSimpleVb:instruccionesSino END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccionesSino!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,new SinoInstr(instruccionesSino,new Pos(instruccionesSinoleft,instruccionesSinoright), new Pos(posleft,posright)));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion THEN espaciosVb bloqueVb:instrucciones sinoVb:instruccion END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones sinoVb:instruccion END IF {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF condicionVb espaciosVb bloqueVb sinoVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); :}
                                        |IF condicionVb THEN espaciosVb sentenciaSimpleVb ELSE sentenciaSimpleVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada IF.",new Pos(eleft,eright)); :}
                                        |IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END error:e {: agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); :}
                                        |IF error:e THEN sentenciaSimpleVb ELSE sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF condicionVb error:e sentenciaSimpleVb ELSE sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); :}
                                        |IF error:e THEN espaciosVb bloqueVb sinoVb END IF {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF error:e THEN sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |IF condicionVb error:e sentenciaSimpleVb {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); :}
                                        ;

sinoVb::=                               ELSEIF:pos condicionVb:condicion THEN espaciosVb bloqueVb:instrucciones sinoVb:instruccion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSEIF:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones sinoVb:instruccion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE:pos espaciosVb bloqueVb:instrucciones {:
                                            if(pos!=null&&instrucciones!=null){
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSEIF error:e espaciosVb bloqueVb sinoVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |ELSEIF error:e THEN espaciosVb bloqueVb sinoVb {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |
                                        ;

sentenciaForVb::=                       FOR:pos ID:id tipoForVb:tipo IGUAL expresionArVb:expInicial TO expresionArVb:expFinal aumentoForVb:expAumento espaciosVb bloqueVb:instrucciones NEXT idNextVb:id2 {:
                                            if(pos!=null&&id!=null&&expInicial!=null&&expFinal!=null&&instrucciones!=null){
                                                RESULT = new ForInstr(
                                                    new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expInicial, new Pos(expInicialleft,expInicialright)), new Pos(idleft,idright)),
                                                    new MenorIgual(new Hoja(new Dato(CONST.ID, id), new Pos(idleft, idright)), expFinal, new Pos(idleft,idright)),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(new Mas(new Hoja(new Dato(CONST.ID, id),new Pos(idleft,idright)),(expAumento!=null)?expAumento:new Hoja(new Dato(CONST.ENTERO,"1"),new Pos(expFinalleft,expFinalright))))),
                                                    new Pos(posleft,posright),
                                                    instrucciones
                                                );
                                            }
                                        :}
                                        |FOR error:e tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); :}
                                        |FOR ID tipoForVb error:e TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"No se declaro un valor de inicio.", eleft, eright); :}//error no hay valor de inicio
                                        |FOR ID tipoForVb IGUAL expresionArVb error:e aumentoForVb espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"No se declaro un valor de finalizacion.", eleft, eright); :} //error no hay valor de fin
                                        |FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb error:e espaciosVb bloqueVb NEXT idNextVb {: agregarError("Sintactico",(String) e,"Se esperaba un valor de aumento para cada ciclo del for.", eleft, eright); :} //error se esperaba en todo caso un paso de aumento
                                        ;

tipoForVb::=                            tiposDeDato:tipo {:
                                            RESULT = tipo;
                                        :}
                                        | 
                                        ;

aumentoForVb::=                         STEP expresionArVb:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |
                                        ;

idNextVb::=                             ID:id {:
                                            RESULT = id;
                                        :}
                                        |
                                        ;

sentenciaWhileVb::=                     WHILE:pos condicionVb:condicion espaciosVb bloqueVb:instrucciones END WHILE {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |WHILE error:e espaciosVb bloqueVb END WHILE {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |WHILE condicionVb espaciosVb bloqueVb END error:e  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        ;

sentenciaDoWhileVb::=                   DO:pos espaciosVb bloqueVb:instrucciones LOOP WHILE condicionVb:condicion {:
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |DO espaciosVb bloqueVb LOOP error:e condicionVb  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        |DO espaciosVb bloqueVb LOOP WHILE error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        ;

sentenciaSwitchVb::=                    SELECT:pos caseVb expresionArVb:expresion espaciosVb contenidoSwitchVb:casos END SELECT {:
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        :}
                                        |SELECT caseVb error:e espaciosVb contenidoSwitch END SELECT  {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |SELECT caseVb expresionArVb espaciosVb contenidoSwitch END error:e  {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada SELECT.", eleft, eright); :}
                                        ;

caseVb::=                               CASE
                                        |
                                        ;

contenidoSwitchVb::=                    contenidoSwitchVb:casos valorCaseVb:dato espaciosVb bloqueVb:instrucciones {:
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |contenidoSwitchVb error:e espaciosVb bloqueVb  {: agregarError("Sintactico",(String) e,"Se esperaba un caso.", eleft, eright); :}
                                        |valorCaseVb:dato espaciosVb bloqueVb:instrucciones {:
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |error:e espaciosVb bloqueVb  {: agregarError("Sintactico",(String) e,"Se esperaba un caso .", eleft, eright); :}
                                        ;

valorCaseVb::=                          CASE ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, valor); :}
                                        |CASE FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, valor); :}
                                        |CASE CARACTER:valor {: RESULT = new Dato(CONST.CARACTER, valor); :}
                                        |CASE MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, "-"+valor); :}
                                        |CASE MENOS FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, "-"+valor); :}
                                        |CASE error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un valor primitivo constante.", eleft, eright); :}
                                        |ELSE {: RESULT = new Dato(CONST.VOID, null); :}
                                        ;

sentenciaDeclaracionVb::=               declaracionVariableVb:instrucciones masDeclaracionVariableVb:masInstrucciones {:
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(masInstrucciones!=null){
                                                for(Instruccion instruccion = masInstrucciones){
                                                    instrucciones.add(instruccion);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        ;

declaracionVariableVb::=                DIM:pos listadoId:listadoIds AS tiposDeDato:tipo IGUAL expresionArVb:expresion masDeclaracionVariableVb:listadoVariables{:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |DIM:pos listadoId:listadoids AS tiposDeDato:tipo masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null) listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |DIM listadoId error:e  {: agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) declarada(s).", eleft, eright); :}
                                        ;

masDeclaracionVariableVb::=             COMA:pos listadoId:listadoIds AS tiposDeDato:tipo IGUAL expresionArVb:expresion masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |COMA:pos listadoId:listadoIds AS tiposDeDato:tipo masDeclaracionVariableVb:listadoVariables {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |COMA listadoId error:e masDeclaracionVariableVb  {: agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) delcarada(s).", eleft, eright); :}
                                        |
                                        ;

sentenciaAsignacionVb::=                ID:id IGUAL accionAsignacionVb:accionAsignacion {:
                                            if(id!=null && accionAsignacion!=null){
                                                RESULT = new AsignacionInstr(
                                                    new LugarVariable(id, new Pos(idleft,idright)),
                                                    accionAsignacion,
                                                    new Pos(idleft,idright)
                                                );
                                            }
                                        :}
                                        |ID error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una asignacion ( = expresion).", eleft, eright); :}
                                        |ID IGUAL error:e {: agregarError("Sintactico",(String)e, "Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        ;

accionAsignacionVb::=                   ingresoDatos:accion {: RESULT = accion; :}
                                        |expresionArVb:expresion {: RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); :}
                                        ;

sentenciaEscribirVb::=                  MENSAJE:pos PAR_A mensajesVb:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        :}
                                        |MENSAJELN:pos PAR_A mensajesVb:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                            }
                                        :}
                                        |MENSAJE:e PAR_A PAR_C  {: agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); :}
                                        |MENSAJELN:e PAR_A PAR_C  {: agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); :}
                                        ;

mensajesVb::=                           mensajesVb:concat AMPERSON mensajeVb:mensaje {:
                                            if(concat==null) new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        |mensajeVb:mensaje {:
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                        :}
                                        ;

mensajeVb::=                            CADENA:cadena {:
                                            if(cadena!=null) RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos());
                                        :}
                                        |expresionArVb:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |error:e  {: agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); :}
                                        ;

sentenciaReturnVb::=                    RETURN:pos expresionArVb:expresion {:
                                            if(pos!=null&&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        :}
                                        |RETURN error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

dclParametrosVb::=                      PAR_A listadoParametrosVb:parametros PAR_C {: RESULT = (parametros!=null) parametros : new ArrayList(); :}
                                        |PAR_A PAR_C {: RESULT = new ArrayList(); :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

listadoParametrosVb::=                  listadoParametrosVb:parametros COMA parametroVb:parametro {:
                                            if(parametros==null) parametros = new ArrayList();
                                            if(parametro!=null) parametros.add(parametro);
                                            RESULT = parametros;
                                        :}
                                        |parametroVb:parametro {:
                                            List<Dato> datos = new ArrayList();
                                            if(parametro!=null) datos.add(parametro);
                                            RESULT = datos;
                                        :}
                                        ;

parametroVb::=                          BYVAL ID:id AS tiposDeDato:tipo {: RESULT = new Dato(tipo, id); :}
                                        |ID:id AS tiposDeDato:tipo {: RESULT = new Dato(tipo, id); :}
                                        |ID error:e {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |BYVAL ID error:e {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una declaracion de variable.", eleft, eright); :}
                                        ;

expresionArVb::=                        expresionArVb:expresionI MAS:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENOS:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI DIV:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI POR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MOD:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArVb:expresion PAR_C {:
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoVb:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        :}
                                        ;

condicionVb::=                          PAR_A expresionBoolVb:condicion PAR_C {: RESULT = condicion; :}
                                        |expresionBoolVb:condicion {: RESULT = condicion; :}
                                        ;

expresionBoolVb::=                      expresionArVb:expresionI DISTINTO:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI IGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENOR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MENORIGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MAYOR:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArVb:expresionI MAYORIGUAL:pos expresionArVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolVb:expresionI AND:pos expresionBoolVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolVb:expresionI OR:pos expresionBoolVb:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolVb:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodoVb::=                      ID:id PAR_A listadoParametrosEnviadosVb:parametros PAR_C {: if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id,parametros, new Pos(idleft,idright)); :}
                                        |ID:id PAR_A PAR_C {: RESULT = new LlamadaDeAmbito(id,new ArrayList(),new Pos(idleft,idright)); :}
                                        ;

listadoParametrosEnviadosVb::=          listadoParametrosEnviadosVb:expresiones COMA expresionArVb:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoParametrosEnviadosVb COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |expresionArVb:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

espaciosVb::=                            espaciosVb FIN_LINEA
                                        |FIN_LINEA
                                        ;

//producciones de java 
java::=                                 SEPARADOR_JAVA clasesJv;

clasesJv::=                             dclClasesJv
                                        |
                                        ;

dclClasesJv::=                          dclClasesJv dclClaseJv
                                        |dclClaseJv
                                        ;

dclClaseJv::=                           publicOpcional CLASS:pos ID:id LLAVE_A contenidoClaseJv:instrucciones LLAVE_C {:
                                            if(id!=null&&pos!=null){
                                                coleccionInstr.getInstruccionesJv().add(new ClaseInstr(id,(instrucciones!=null)?instrucciones:new ArrayList(),new Pos(posleft,posright)));
                                            }
                                        :}
                                        |publicOpcional error:e ID LLAVE_A contenidoClaseJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba la palabra clave Class", eleft, eright); :}
                                        |publicOpcional CLASS error:e LLAVE_A contenidoClaseJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se especifico el identificador para la clase, se esperaba un identificador.", eleft, eright); :}
                                        |publicOpcional CLASS ID error:e {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo (contenido de la clase).", eleft, eright); :}
                                        ;

contenidoClaseJv::=                     sentenciasDeClaseJv:instrucciones {: RESULT = instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

sentenciasDeClaseJv::=                  sentenciasDeClaseJv:instrucciones sentenciaDeClaseJv:instruccion {:
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaDeClaseJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaDeClaseJv::=                   sentenciaDeclaracionJv:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |dclMetodoJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

dclMetodoJv::=                          publicOpcional tiposDeMetodo:tipo ID:id PAR_A dclParametrosJv:parametros PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(tipo!=null&&id!=null&&instrucciones!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(idleft,idright));
                                            }
                                        :}
                                        |publicOpcional error:e ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se especifico el tipo del procedimiento/funcion declarado", eleft, eright); :}
                                        |publicOpcional tiposDeMetodo error:e PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se especifico un identificador para el metodo, se esperaba un identificador", eleft, eright); :}
                                        |publicOpcional tiposDeMetodo ID error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un listado de parametros (lleno o vacio) dentro de parentesis.", eleft, eright); :}
                                        |publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C error:e 
                                        ;

dclParametrosJv::=                      listadoParametrosJv
                                        |
                                        ;

listadoParametrosJv::=                  listadoParametrosJv:parametros COMA tiposDeDato:tipo ID:id {:
                                            if(parametros==null)parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        :}
                                        |tiposDeDato:tipo ID:id {:
                                            List<Dato> parametros = new ArrayList();
                                            if(id!=null&&tipo!=null) parametros.add(new Dato(tipo,id));
                                            RESULT = parametros;
                                        :}
                                        |listadoParametrosJv COMA error:e ID {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        |listadoParametrosJv COMA tiposDeDato error:e {: agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); :}
                                        |tiposDeDato error:e {: agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); :}
                                        |error:e ID {: agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); :}
                                        ;

bloqueJv::=                             sentenciasJv:instrucciones {: RESULT = instrucciones; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

sentenciasJv::=                         sentenciasJv:instrucciones sentenciaJv:instruccion {:
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaJv::=                          sentenciaIfJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhileJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSwitchJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaDoWhileJv:instruccion FIN_LINEA {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimpleJv:instrucciones FIN_LINEA {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        ;

sentenciaSimpleJv::=                    sentenciaDeclaracionJv:instrucciones {:
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        :}
                                        |sentenciaAsignacionJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:ingreso {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(ingreso!=null)instrucciones.add(new IngresoInstr(ingreso, new Pos(ingresoleft,ingresoright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaEscribirJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoJv:llamada {:
                                            :instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null)instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaReturnJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaBreakJv:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaIfJv::=                        IF:pos PAR_A expresionBoolJv:condicion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C sinoJv:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF:pos PAR_A expresionBoolJv:condicion PAR_C sentenciaSimpleJv:instruccion FIN_LINEA {:
                                            if(pos!=null&&condicion!=null){
                                                List<Instruccion> instrucciones = new ArrayList();
                                                if(instruccion!=null) instrucciones.add(instruccion);
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); :}
                                        |IF error:e LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |IF PAR_A expresionBoolJv PAR_C error:e sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo o una sentencia simple", eleft, eright); :}
                                        ;

sinoJv::=                               ELSE:pos IF PAR_A expresionBoolJv:condicion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C sinoJv:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion,instrucciones,instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE:pos LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE IF PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); :}
                                        |ELSE IF error:e LLAVE_A bloqueJv LLAVE_C sinoJv {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto", eleft, eright); :}
                                        |ELSE IF PAR_A expresionBoolJv PAR_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); :}
                                        |ELSE error:e {: agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); :}
                                        |
                                        ;

sentenciaForJv::=                       FOR:pos PAR_A tiposDeDato:tipo ID:id IGUAL expresionArJv:expresion FIN_LINEA expresionBoolJv:condicion FIN_LINEA ID:id2 modificadorForJv:instruccionFor PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            AccionAsignacion accionAsignacion = null;
                                            if((id).equals(id2)){
                                                if(instruccionFor instanceof Hoja){
                                                    if(((Hoja)instruccionFor).getValor().getTipo().equals("AUMENTO")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Mas(
                                                                new Hoja(new Dato(CONST.IDENTIFICADOR,id2, new Pos(id2left,id2right))),
                                                                new Hoja(new Dato(CONST.TIPO_ENTERO,1)),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else if(((Hoja)instruccionFor).getValor().getTipo().equals("DISMINUCION")){
                                                        accionAsignacion = new AccionExpresion(
                                                            new Menos(
                                                                new Hoja(new Dato(CONST.IDENTIFICADOR,id2, new Pos(idleft,idright))),
                                                                new Hoja(new Dato(CONST.TIPO_ENTERO,-1, new Pos(id2left,id2right))),
                                                                new Pos(id2left,id2right)
                                                            ),
                                                            new Pos(id2left,id2right)
                                                        );
                                                    }else{
                                                        accionAsignacion = new AccionExpresion(instruccionFor, new Ubicacion(instruccionForleft,instruccionForright));
                                                    }
                                                }
                                                if(pos!=null && id!=null && expresion!=null && condicion!=null && instruccionFor!=null && instrucciones!=null){
                                                    instruccionesRetorno.add(new ForInstr(
                                                        new DeclaracionInstr(
                                                            tipo,
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new Pos(posleft,posright),
                                                            false
                                                        ),
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                            new Pos(posleft,posright)
                                                        ),
                                                        condicion,
                                                        new AsignacionInstr(
                                                            new LugarVariable(id, new Pos(idleft,idright)),
                                                            accionAsignacion,
                                                            new Pos(posleft,posright)
                                                        ),
                                                        new Pos(posleft,posright),
                                                        instrucciones
                                                    ));
                                                }    
                                            }else{
                                                listErrores.add(new ErrorAnalisis("Semantico",id2,"No se ha utilizado la misma variable para la ejecuci√≥n del for.", id2left, id2right));
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |FOR PAR_A tiposDeDato ID error:e FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se asign√≥ un valor de inicio para el ciclo.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato error:e FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"No se declaro el identificador a evaluar con cada iteracion.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA error:e FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |FOR error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        ;

modificadorForJv::=                     IGUAL expresionArJv:expresion {:
                                            RESULT = expresion;
                                        :}
                                        |AUMENTO:val {:
                                            RESULT = new Hoja(new Dato("AUMENTO",null),new Pos(valleft,valright));
                                        :}
                                        |DISMINUCION:val {:
                                            RESULT = new Hoja(new Dato("DISMINUCION",null), new Pos(valleft,valright));
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una asignaci√≥n o un modificador (++, --).", eleft, eright); :}
                                        ;

sentenciaWhileJv::=                     WHILE:pos PAR_A expresionBoolJv:expresion PAR_C LLAVE_A bloqueJv:instrucciones LLAVE_C {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                instruccionesRetorno.add(new DoWhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                ));
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}   
                                        |WHILE error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |WHILE PAR_A error:e PAR_C LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |WHILE PAR_A expresionBoolJv error:e LLAVE_A bloqueJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        ;

sentenciaSwitchJv::=                    SWITCH:pos PAR_A expresionArJv:expresion PAR_C LLAVE_A contenidoSwitchJv:casos LLAVE_C {:
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        :}
                                        |SWITCH error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |SWITCH PAR_A error:e PAR_C LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |SWITCH PAR_A expresionArJv error:e LLAVE_A contenidoSwitchJv LLAVE_C {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        ;

contenidoSwitchJv::=                    contenidoSwitchJv:casos valorSwitchJv:dato DOS_PUNTOS bloqueSwichJv:instrucciones {:
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |valorSwitchJv:dato DOS_PUNTOS bloqueSwichJv:instrucciones {:
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null) casos.add(new CaseInstr(dato,(instrucciones!=null)instrucciones:new ArrayList(), new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        :}
                                        |contenidoSwitchJv error:e DOS_PUNTOS bloqueSwichJv {: agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); :}
                                        |error:e DOS_PUNTOS bloqueSwichJv {: agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); :}                                        
                                        ;

valorSwitchJv::=                        CASE ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, valor); :}
                                        |CASE FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, valor); :}
                                        |CASE CARACTER:valor {: RESULT = new Dato(CONST.CARACTER, valor); :}
                                        |CASE MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO, "-"+valor); :}
                                        |CASE MENOS FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE, "-"+valor); :}
                                        |DEFAULT {: RESULT = new Dato(CONST.VOID,null); :}
                                        ;

bloqueSwichJv::=                        LLAVE_A bloqueJv:instrucciones LLAVE_C {: RESULT = (instrucciones==null) new ArrayList() : instrucciones; :}
                                        |bloqueJv:instrucciones {: RESULT = (instrucciones==null) new ArrayList() : instrucciones; :}
                                        ;

sentenciaDoWhileJv::=                   DO:pos LLAVE_A bloqueJv:instrucciones LLAVE_C WHILE PAR_A expresionBoolJv:expresion PAR_C {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(pos!=null && expresion!=null && instrucciones!=null){
                                                instruccionesRetorno.add(new DoWhileInstr(
                                                    expresion,
                                                    instrucciones,
                                                    new Pos(posleft,posright)
                                                ));
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}   
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C WHILE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |DO LLAVE_A bloqueJv LLAVE_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); :}
                                        ;

sentenciaDeclaracionJv::=               tiposDeDato:tipo listadoAsignacionesJv:instrucciones {:
                                            for(Instruccion instruccion : instrucciones){
                                                if(instruccion instanceof DeclaracionInstr){
                                                    ((DeclaracionInstr)instruccion).setTipo(tipo);
                                                    ((DeclaracionInstr)instruccion).setPosicion(new Posicion(tipoleft,tiporight));
                                                }
                                            }
                                        :}
                                        ;

listadoAsignacionesJv::=                listadoAsignacionesJv:instruccionesRetorno asignacionJv:instrucciones {:
                                            if(instruccionesRetorno==null)instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion: instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |asignacionJv:instrucciones {:
                                            RESULT = (instrucciones==null) new ArrayList() : instrucciones;
                                        :}
                                        ;

asignacionJv::=                         ID:id IGUAL accionAsignacionJv:accion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr(null,LugarVariable(id, new Pos(idleft,idright)),null,false));
                                            instrucciones.add(new AsignacionInstr(LugarVariable(id, new Pos(idleft,idright)),accion,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        :}
                                        |ID:id {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(new DeclaracionInstr());
                                            RESULT = instrucciones;
                                        :}
                                        ;

sentenciaAsignacionJv::=                ID:id IGUAL accionAsignacionJv:accion {:
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        :}
                                        |THIS ID:id IGUAL accionAsignacionJv:accion {:
                                            if(id!=null&accion!=null) RESULT = new AsignacionInstr(new LugarVariableGlobal(id, new Pos(idleft,idright)),accion, new Pos(idleft,idright));
                                        :}
                                        ;

accionAsignacionJv::=                   expresionArJv:expresion {: RESULT = AccionExpresion(expresion, new Pos(expresionleft,expresionright)); :}
                                        |ingresoDatos:ingreso {: RESULT = ingreso; :}
                                        ;

sentenciaEscribirJv::=                  MENSAJE PAR_A expresionMensajeJv:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        :}
                                        |MENSAJELN PAR_A expresionMensajeJv:mensajes PAR_C {:
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                            }
                                        :}
                                        |MENSAJE PAR_A expresionMensajeJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |MENSAJE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); :}
                                        |MENSAJE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |MENSAJELN PAR_A expresionMensajeJv error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |MENSAJELN PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); :}
                                        |MENSAJELN error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}                                        
                                        ;

expresionMensajeJv::=                   expresionMensajeJv:concat MAS cadenaExpresionJv:expresion {:
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(expresion!=null)concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        :}
                                        |cadenaExpresionJv:expresion {:
                                            Concat concat = new Concat(new Pos(expresionleft,expresionright));
                                            if(expresion!=null) concat.getMensajes().add(expresion);
                                            RESULT = concat;
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); :}
                                        ;

cadenaExpresionJv::=                     CADENA:cadena {:
                                            RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright));
                                        :}
                                        |expresionArJv:expresion {:
                                            RESULT = expresion;
                                        :}
                                        ;

sentenciaReturnJv::=                    RETURN:pos expresionArJv:expresion {:
                                            if(pos!=null&&expresion!=null) RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                        :}
                                        |RETURN error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

sentenciaBreakJv::=                     BREAK:pos {: RESULT = new BreakInstr(); :};

expresionArJv::=                        expresionArJv:expresionI MAS:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENOS:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI DIV:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI POR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MOD:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArJv:expresion PAR_C {:
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoJv:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        :}
                                        |THIS ID:id {:
                                            if(id!=null){
                                                RESULT = new Hoja(new Dato(CONST.ID_GLOBAL,id), new Pos(idleft,idright));
                                            }
                                        :}
                                        ;

expresionBoolJv::=                      expresionArJv:expresionI DISTINTO:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI COMPARADOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MENORIGUAL:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MAYOR:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArJv:expresionI MAYORIGUAL:pos expresionArJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolJv:expresionI AND:pos expresionBoolJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolJv:expresionI OR:pos expresionBoolJv:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolJv:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodoJv::=                      ID:id PAR_A listadoParametrosEnviadosJv:expresiones PAR_C {: if(expresiones!=null&&id!=null) RESULT = new LlamadaDeAmbito(id,expresiones, new Pos(idleft,idright)); :}
                                        |ID:id PAR_A PAR_C {: RESULT = new LlamadaDeAmbito(id,new ArrayList(), new Pos(idleft,idright)); :}
                                        ;

listadoParametrosEnviadosJv::=          listadoParametrosEnviadosJv:expresiones COMA expresionArJv:expresion {:
                                            if(expresiones==null)expresiones = new ArrayList();
                                            if(expresion!=null)expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionArJv:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoParametrosEnviadosJv COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;


//producciones de python
python::=                               SEPARADOR_PY NEWLINE metodosPy;

metodosPy::=                            dclMetodosPy
                                        |
                                        ;

dclMetodosPy::=                         dclMetodosPy dclMetodoPy
                                        |dclMetodoPy
                                        ;

dclMetodoPy::=                          DEF:pos ID:id PAR_A dclParametrosPy:parametros PAR_C DOS_PUNTOS bloquePy:instrucciones {:
                                            coleccionInstr.getInstruccionesPy().add(new MetodoInstr(CONST.INDEFINIDO,id,parametros,instrucciones, new Pos(posleft,posright)));
                                        :}
                                        |DEF error:e {: agregarError("Sintactico",(String) e,"Se esperaba un identificador para la declaracion del metodo.", eleft, eright); :}
                                        |DEF ID error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |DEF ID PAR_A dclParametrosPy error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |DEF ID PAR_A dclParametrosPy PAR_C error:e {: agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); :}            
                                        |DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS error:e {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        ;

dclParametrosPy::=                      listadoId:parametros {: RESULT = (parametros!=null)? parametros : new ArrayList(); :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

listadoId::=                            listadoId:parametros COMA ID:id {:
                                            if(parametros==null) parametros = new ArrayList();
                                            if(id!=null) parametros.add(new Dato(CONST.INDEFINIDO, id));
                                            RESULT = parametros; 
                                        :}
                                        |listadoId COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); :}
                                        |ID:id {:
                                            List<Dato> parametros = new ArrayList();
                                            if(id!=null) parametros.add(new Dato(CONST.INDEFINIDO, id));
                                            RESULT = parametros;
                                        :}
                                        ;

sentenciasPy::=                         sentenciasPy:instruccionesRetorno sentenciaPy:instrucciones {:
                                            if(instruccionesRetorno==null) instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |sentenciaPy:instrucciones {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        ;

sentenciaPy::=                          sentenciaIfPy:instruccion NEWLINE {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaForPy:instruccion NEWLINE {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaWhilePy:instruccion NEWLINE {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion !=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimplePy:instrucciones NEWLINE {:
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(instrucciones!=null){
                                                for(Instruccion instruccion : instrucciones) instruccionesRetorno.add(instruccion);
                                            }
                                            RESULT = instruccionesRetorno;
                                        :}
                                        |error
                                        ;

bloquePy::=                             NEWLINE IDENT sentenciasPy:instrucciones DEDENT {:
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        :}
                                        |sentenciaSimplePy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            instrucciones.add(instruccion);
                                        :}
                                        ;

sentenciaSimplePy::=                    asignacionVarPy:instrucciones {:
                                            RESULT = instrucciones;
                                        :}
                                        |escribirPy:instruccion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        :}
                                        |ingresoDatos:accion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accion!=null) instrucciones.add(new IngresoInstr(accion, new Pos(accionleft,accionright)));
                                            RESULT = instrucciones;
                                        :}
                                        |llamadaMetodoPy:llamada {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        :}
                                        ;

escribirPy::=                           MENSAJE:pos PAR_A mensajesPy:concat PAR_C {:
                                            if(pos!=null&&concat!=null) RESULT = new MensajeInstr(concat, new Pos(posleft,posright));
                                        :}
                                        |MENSAJE PAR_A error:e  {: agregarError("Sintactico",(String) e,"Se esperaba un mensaje para mostrar en pantalla.", eleft, eright); :}
                                        |MENSAJE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |MENSAJE PAR_A mensajesPy error:e {: agregarError("Sintactico",(String) e,".", eleft, eright); :}
                                        ;

mensajesPy::=                            mensajesPy:concat COMA mensajePy:mensaje {:
                                            if(concat==null) concat = new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        |mensajePy:mensaje {:
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        :}
                                        ;

mensajePy::=                            CADENA:cadena {: RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos(cadenaleft,cadenaright)); :}
                                        |expresionArPy:expresion {: RESULT = expresion; :}
                                        ;

listadoExpresionesArPy::=               listadoExpresionesArPy:expresiones COMA expresionArPy:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |listadoExpresionesArPy COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        |expresionArPy:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); :}
                                        ;

sentenciaIfPy::=                        IF:pos condicionPy:condicion DOS_PUNTOS bloquePy:instrucciones elseIfPy:instruccionSino {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |IF condicionPy DOS_PUNTOS error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        |IF condicionPy error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); :}
                                        |IF error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        ;

elseIfPy::=                             ELSEIF:pos condicionPy:condicion DOS_PUNTOS bloquePy:instrucciones elseIfPy:instruccion {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new SiInstr(condicion, instrucciones, instruccionSino, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSEIF condicionPy DOS_PUNTOS error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        |ELSEIF condicionPy error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); :}
                                        |ELSEIF error:e elseIfPy {: agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); :}
                                        |elsePy:instruccionSino
                                        |
                                        ;

elsePy::=                               ELSE:pos DOS_PUNTOS bloquePy:instrucciones {:
                                            if(pos!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |ELSE DOS_PUNTOS error:e {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        |ELSE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); :}
                                        ;

sentenciaWhilePy::=                     WHILE:pos condicionPy:condicion bloquePy:instrucciones {:
                                            if(pos!=null&&condicion!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |WHILE condicionPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        ;

sentenciaForPy::=                       FOR:pos ID:id IN rangePy:rango DOS_PUNTOS bloquePy:instrucciones {:
                                            if(pos!=null&&id!=null&&rango!=null){
                                                if(instrucciones==null) instrucciones = new ArrayList();
                                                RESULT = new ForInstr(id,idleft,idright,rango,instrucciones, new Pos(posleft,posright));
                                            }
                                        :}
                                        |FOR ID IN rangePy DOS_PUNTOS error:e {: agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); :}
                                        |FOR ID IN rangePy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); :}
                                        |FOR ID IN error:e {: agregarError("Sintactico",(String) e,"Se esperaba la funcion range.", eleft, eright); :}
                                        |FOR ID error:e {: agregarError("Sintactico",(String) e,"Se esperaba el token 'in'.", eleft, eright); :}
                                        |FOR error:e {: agregarError("Sintactico",(String) e,"Se esperaba un identificador para el ciclo for.", eleft, eright); :}
                                        ;

rangePy::=                              RANGE PAR_A expresionArPy:e1 PAR_C {:
                                            if(e1!=null) RESULT = new RangePy(e1);
                                        :}
                                        |RANGE PAR_A expresionArPy:e1 COMA expresionArPy:e2 PAR_C {:
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2);
                                        :}
                                        |RANGE PAR_A expresionArPy:e1 COMA expresionArPy:e2 COMA expresionArPy:e3 PAR_C {:
                                            if(e1!=null&&e2!=null) RESULT = new RangePy(e1,e2,e3);
                                        :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy COMA error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE PAR_A expresionArPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); :}
                                        |RANGE PAR_A error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); :}
                                        |RANGE error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        ;

condicionPy::=                          PAR_A expresionBoolPy:condicion PAR_C {: RESULT = condicion; :}
                                        |PAR_A expresionBoolPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); :}
                                        |PAR_A error:e {: agregarError("Sintactico",(String) e,"Se espraba una expresion booleana.", eleft, eright); :}
                                        |expresionBoolPy:condicion {: RESULT = condicion; :}
                                        |error:e {: agregarError("Sintactico",(String) e,"Se esperaba una expresion boolana.", eleft, eright); :}
                                        ;

expresionArPy::=                        expresionArPy:expresionI MAS:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENOS:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI DIV:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI POR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MOD:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionArPy:expresion PAR_C {:
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodoPy:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        :}
                                        ;

llamadaMetodoPy::=                      ID:id PAR_A listadoParametrosEnviadosPy:parametros PAR_C {:
                                            if(id!=null&&parametros!=null) RESULT = new LlamadaDeAmbito(id, parametros, new Pos(idleft,idright));
                                        :}
                                        |ID PAR_A listadoParametrosEnviadosPy error:e {: agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); :}
                                        |ID:id PAR_A PAR_C {:
                                            if(id!=null) RESULT = new LlamadaDeAmbito(id, new ArrayList(), new Pos(idleft,idright));
                                        :}
                                        ;

asignacionVarPy::=                      listadoId:listadoI IGUAL listadoExpresionesArPy:listadoE {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(listadoE!=null && listadoI!=null){
                                                if(listadoI.size() < listadoE.size()){
                                                    errores.agregarError("Semantico","En la expresion No."+(listadoI.size()+1),"Hay m√°s expresiones de las esperadas, se esperaba un listado de ("+listadoI.size()+") expresiones.", new Pos(listadoEleft,listadoEright));
                                                }else{
                                                    for(int i=0; i < listadoE.size(); i++){
                                                        instrucciones.add(new AsignacionInstr(
                                                            new LugarVariable(listadoI.get(i), new Pos(listadoIleft,listadoIright)),
                                                            new AccionExpresion(listadoE.get(i), new Pos(listadoEleft,listadoEright)),
                                                            new Pos(listadoIleft,listadoIright)
                                                        ));
                                                    }
                                                }
                                            }
                                            RESULT = instrucciones;
                                        :}
                                        |listadoId error:e {: agregarError("Sintactico",(String) e,"Se esperaba un token igual (=).", eleft, eright); :}
                                        |ID:id IGUAL ingresoDatos:ingreso 
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&expresion!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),ingreso,new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        |ID:id IGUAL expresionArPy:expresion {:
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(id!=null&&expresion!=null) instrucciones.add(new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)),new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),new Pos(idleft,idright)));
                                            RESULT = instrucciones;
                                        :}
                                        ;

listadoParametrosEnviadosPy::=          listadoParametrosEnviadosPy:expresiones COMA expresionArPy:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionArPy:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresion;
                                        :}
                                        ;

expresionBoolPy::=                      expresionArPy:expresionI DISTINTO:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI COMPARADOR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENOR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MENORIGUAL:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MAYOR:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionArPy:expresionI MAYORIGUAL:pos expresionArPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolPy:expresionI AND:pos expresionBoolPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBoolPy:expresionI OR:pos expresionBoolPy:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBoolPy:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;
//producciones principal
principal::=                            SEPARADOR_PROGRAMA secLibrerias secConstantes secVariables codigoMain;

secLibrerias::=                         dclLibrerias
                                        |
                                        ;

dclLibrerias::=                         dclLibrerias dclLibreria
                                        |dclLibreria
                                        ;

dclLibreria::=                          HASHTAG INCLUDE libreria
                                        |HASHTAG INCLUDE error:e {: agregarError("Sintactico",(String) e,"Se esperaba una libreria", eleft, eright); :}
                                        |HASHTAG error:e {: agregarError("Sintactico",(String) e,"Se esperaba una palabra reservada include.", eleft, eright); :}
                                        ;

libreria::=                             JAVA PUNTO valorTextoLibreriaJv
                                        |JAVA error:e {: agregarError("Sintactico",(String)e,"Se esperaba las clases a importar.",eleft,eright); :}
                                        |PY
                                        |VB
                                        |MENOR libreriaC MAYOR
                                        |MENOR libreriaC error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '>'",eleft,eright); :}
                                        |MENOR error:e {: agregarError("Sintactico",(String)e,"Se esperaba el formato de una libreria de C.",eleft,eright); :}
                                        ;

libreriaC::=                            libreriaC PUNTO ID
                                        |ID
                                        ;

valorTextoLibreriaJv::=                 CADENA
                                        |CARACTER
                                        ;

secConstantes::=                        dclConstantes
                                        |
                                        ;

dclConstantes::=                        dclConstantes dclConstante
                                        |dclConstante
                                        ;

dclConstante::=                         CONST tiposDeDato ID IGUAL expresionAr FIN_LINEA
                                        |CONST tiposDeDato ID IGUAL expresionAr error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'",eleft,eright); :}
                                        |CONST tiposDeDato ID IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion para asignar a la variable.",eleft,eright); :}
                                        |CONST tiposDeDato ID error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '='",eleft,eright); :}
                                        |CONST tiposDeDato error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); :}
                                        |CONST error:e {: agregarError("Sintactico",(String)e,"Se esperaba un tipo de dato para la variable declarada.",eleft,eright); :}
                                        ;

secVariables::=                         dclVariables
                                        |
                                        ;

dclVariables::=                         dclVariables sentenciaDeclaracionInicial
                                        |sentenciaDeclaracionInicial
                                        ;

sentenciaDeclaracionInicial::=          sentenciaDeclaracion FIN_LINEA
                                        |sentenciaDeclaracion error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'.",eleft,eright); :}
                                        ;

sentenciaDeclaracion::=                 tiposDeDato listadoDeclaraciones
                                        |JAVA PUNTO ID listadoDeclaracionesClases 
                                        |tiposDeDato arreglo
                                        |tiposDeDato error:e {: agregarError("Sintactico",(String)e,"Se esperaba un listado de identificadores o la estructura de un arreglo.",eleft,eright); :}
                                        |JAVA PUNTO error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador referente a una clase declarada en la seccion de java.",eleft,eright); :}
                                        |JAVA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token punto '.'.",eleft,eright); :}
                                        ;

arreglo::=                              ID listDimensiones
                                        ;

listDimensiones::=                      listDimensiones COR_A expresionAr COR_C
                                        |COR_A expresionAr COR_C
                                        |COR_A error:e COR_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        |listDimensiones COR_A error:e COR_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        ;

listadoDeclaraciones::=                 listadoDeclaraciones COMA ID asignacionValor
                                        |ID asignacionValor
                                        |listadoDeclaraciones COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); :}
                                        ;
 
asignacionValor::=                      IGUAL expresionAr
                                        |IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        |
                                        ;

listadoDeclaracionesClases::=           listadoDeclaracionesClases COMA ID asignacionConstructor
                                        |ID asignacionConstructor
                                        |listadoDeclaracionesClases COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un identificador",eleft,eright); :}
                                        ;

asignacionConstructor::=                accionConstructor
                                        |
                                        ;

accionConstructor::=                    PAR_A listadoParametrosEnviados PAR_C
                                        |PAR_A listadoParametrosEnviados error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        ;

codigoMain::=                           VOID MAIN PAR_A PAR_C LLAVE_A bloque LLAVE_C
                                        |VOID MAIN PAR_A PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |VOID MAIN PAR_A PAR_C error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta",eleft,eright); :}
                                        |VOID MAIN PAR_A error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |VOID MAIN error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |VOID error:e bloque {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada 'main'.",eleft,eright); :}
                                        ;

bloque::=                               sentencias 
                                        |
                                        ;

sentencias::=                           sentencias sentencia
                                        |sentencia
                                        ;

sentencia::=                            sentenciaIf
                                        |sentenciaFor
                                        |sentenciaWhile
                                        |sentenciaDoWhile
                                        |sentenciaSwitch
                                        |sentenciaSimple FIN_LINEA
                                        ;

sentenciaSimple::=                      sentenciaAsignacion
                                        |sentenciaDeclaracion
                                        |sentenciaEscribir
                                        |sentenciaIngresoDatos
                                        |sentenciaLimpiarPantalla
                                        |sentenciaEsperarTecla
                                        |llamadaMetodo
                                        |sentenciaBreak
                                        ;

sentenciaAsignacion::=                  lugarAsignacion IGUAL expresionAr
                                        |lugarAsignacion IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion arimetica.",eleft,eright); :}
                                        |lugarAsignacion error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '='.",eleft,eright); :}
                                        ;

lugarAsignacion::=                      ID
                                        |arreglo
                                        |JAVA PUNTO ID
                                        ;

sentenciaEscribir::=                    PRINTF PAR_A expresionCadena PAR_C
                                        |PRINTF PAR_A expresionCadena COMA listadoExpresiones PAR_C
                                        |PRINTF PAR_A expresionCadena error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |PRINTF PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba contenido para mostrar en pantalla.",eleft,eright); :}
                                        |PRINTF error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |PRINTF PAR_A expresionCadena COMA listadoExpresiones error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |PRINTF PAR_A expresionCadena COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un listado de expresiones.",eleft,eright); :}
                                        ;

expresionCadena::=                      expresionCadena valorCadena
                                        |valorCadena
                                        ;

listadoExpresiones::=                   listadoExpresiones COMA expresionAr
                                        |expresionAr
                                        |listadoExpresiones COMA AMPERSON expresionAr
                                        |AMPERSON expresionAr
                                        |AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresiona aritmetica.",eleft,eright); :}
                                        |listadoExpresiones COMA AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        |listadoExpresiones COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); :}
                                        ;

expresionCadenaEntrada::=               valorTexto comodin
                                        |comodin valorTexto
                                        |valorTexto comodin valorTexto
                                        |comodin
                                        |valorTexto error:e {: agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); :}
                                        |error:e valorTexto {: agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); :}
                                        |valorTexto error:e valorTexto {: agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); :}
                                        |error:e {: agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); :}
                                        ;

valorCadena::=                          valorTexto
                                        |comodin
                                        ;

valorTexto::=                           CADENA
                                        |CARACTER
                                        ;

comodin::=                              COMODIN_CARACTER
                                        |COMODIN_ENTERO
                                        |COMODIN_FLOTANTE
                                        ;

sentenciaIngresoDatos::=                SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion PAR_C
                                        |SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada COMA AMPERSON error:e {: agregarError("Sintactico",(String)e,"Se esperaba un lugar para asignar el valor leido.",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada COMA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un token '&'",eleft,eright); :}
                                        |SCANF PAR_A expresionCadenaEntrada error:e {: agregarError("Sintactico",(String)e,"Se esperaba una coma.",eleft,eright); :}
                                        |SCANF PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una cadena para ingresar texto.",eleft,eright); :}
                                        |SCANF error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaLimpiarPantalla::=             LIMPIAR_PANTALLA PAR_A PAR_C
                                        |LIMPIAR_PANTALLA PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |LIMPIAR_PANTALLA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaEsperarTecla::=                ESPERAR_TECLA PAR_A PAR_C
                                        |ESPERAR_TECLA PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ESPERAR_TECLA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaBreak::=                       BREAK;

sentenciaIf::=                          IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino
                                        |IF PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |IF PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |IF PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |IF PAR_A error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |IF error:e LLAVE_A bloque LLAVE_C{: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sino::=                                 ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino
                                        |ELSE LLAVE_A bloque LLAVE_C
                                        |
                                        |ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |ELSE IF PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |ELSE IF PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ELSE IF PAR_A error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |ELSE IF error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        |ELSE LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |ELSE error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        ;

sentenciaFor::=                         FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque LLAVE_C
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esparaba una llave cerrada.",eleft,eright); :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"",eleft,eright); :}
                                        ; 

modificadorFor::=                       IGUAL expresionAr
                                        |IGUAL error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica",eleft,eright); :}
                                        |AUMENTO
                                        |DISMINUCION
                                        |error:e {: agregarError("Sintactico",(String)e,"Se esperaba un modificador para la variable.",eleft,eright); :}
                                        ;

sentenciaWhile::=                       WHILE PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C
                                        |WHILE PAR_A expresionBool PAR_C LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |WHILE PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); :}
                                        |WHILE PAR_A expresionBool error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |WHILE PAR_A error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana",eleft,eright); :}
                                        |WHILE error:e LLAVE_A bloque LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

sentenciaDoWhile::=                     DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C FIN_LINEA
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba un fin de linea.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C WHILE error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto",eleft,eright); :}
                                        |DO LLAVE_A bloque LLAVE_C error:e {: agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada while.",eleft,eright); :}
                                        |DO LLAVE_A bloque error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        ;

sentenciaSwitch::=                      SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch LLAVE_C
                                        |SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch error:e {: agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); :}
                                        |SWITCH PAR_A expresionAr PAR_C LLAVE_A error:e {: agregarError("Sintactico",(String)e,"Se esperaban casos.",eleft,eright); :}
                                        |SWITCH PAR_A expresionAr error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |SWITCH PAR_A error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba una expresion.",eleft,eright); :}
                                        |SWITCH error:e LLAVE_A contenidoSwitch LLAVE_C {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

contenidoSwitch::=                      contenidoSwitch valorSwitch DOS_PUNTOS bloqueSwitch 
                                        |valorSwitch DOS_PUNTOS bloqueSwitch
                                        |valorSwitch DOS_PUNTOS error:e {: agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); :}
                                        |contenidoSwitch valorSwitch DOS_PUNTOS error:e {: agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); :}
                                        ;

valorSwitch::=                          CASE ENTERO
                                        |CASE FLOTANTE
                                        |CASE CARACTER
                                        |DEFAULT
                                        |error:e {: agregarError("Sintactico",(String)e,"Se esperaba un valor para un caso de un switch.",eleft,eright); :}
                                        ;

bloqueSwich::=                          LLAVE_A bloque LLAVE_C
                                        |bloque
                                        ;

expresionAr::=                          expresionAr:expresionI MAS:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENOS:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI DIV:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI POR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MOD:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |PAR_A expresionAr:expresion PAR_C {:
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        :}
                                        |llamadaMetodo:llamada {:
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        :}
                                        |valorAtomico:dato {:
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        :}
                                        ;

expresionBool::=                        expresionAr:expresionI DISTINTO:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI COMPARADOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MENORIGUAL:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MAYOR:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionAr:expresionI MAYORIGUAL:pos expresionAr:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBool:expresionI AND:pos expresionBool:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |expresionBool:expresionI OR:pos expresionBool:expresionD {:
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        :}
                                        |NOT:pos expresionBool:expresion{:
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        :}
                                        ;

llamadaMetodo::=                        JAVA:pos PUNTO ID:idVariable PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaJava(idVariable,id,parametros,new Pos(posleft,posright));
                                        :}
                                        |PY:pos PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaPython(id,parametros,new Pos(posleft,posright));
                                        :}
                                        |VB:pos PUNTO ID:id PAR_A listadoParametrosEnviados:parametros PAR_C {:
                                            RESULT = new LlamadaVisual(id,parametros,new Pos(posleft,posright));
                                        :}
                                        ;

listadoParametrosEnviados::=            parametrosEnviados:parametros {: RESULT = (parametros==null) new ArrayList(): parametros; :}
                                        | {: RESULT = new ArrayList(); :}
                                        ;

parametrosEnviados::=                   parametrosEnviados:expresiones COMA expresionAr:expresion {:
                                            if(expresiones==null) expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        |expresionAr:expresion {:
                                            List<NodoAritmetico> expresiones = new ArrayList();
                                            if(expresion!=null) expresiones.add(expresion);
                                            RESULT = expresiones;
                                        :}
                                        ;

//produccionesGenerales

ingresoDatos::=                         ingreso:ingreso PAR_A CADENA:cadena PAR_C {:
                                            RESULT = new AccionIngreso(new Hoja(new Dato(CONST.CADENA, cadena),new Pos(cadenaleft,cadenaright)),ingreso,new Pos(ingresoleft,ingresoright));
                                        :}
                                        |ingreso:ingreso PAR_A PAR_C {:
                                            RESULT = new AccionIngreso(null,ingreso, new Pos(ingresoleft,ingresoright));
                                        :}
                                        |ingreso PAR_A CADENA error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); :}
                                        |ingreso PAR_A error:e {: agregarError("Sintactico",(String)e,"Se esperaba una cadena, o que estuviese vacio.",eleft,eright); :}
                                        |ingreso error:e {: agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); :}
                                        ;

ingreso::=                              INTINPUT:valor {: RESULT = valor; :}
                                        |CHARINPUT:valor {: RESULT = valor; :}
                                        |FLOATINPUT:valor {: RESULT = valor; :}
                                        ;

tiposDeDato::=                          PR_ENTERO:valor {: RESULT = valor; :}
                                        |PR_FLOTANTE:valor {: RESULT = valor; :}
                                        |PR_CARACTER:valor {: RESULT = valor; :}
                                        ;

valorAtomico::=                         ENTERO:valor {: RESULT = new Dato(CONST.ENTERO,valor); :}
                                        |FLOTANTE:valor {: RESULT = new Dato(CONST.FLOTANTE,valor); :}
                                        |CARACTER:valor {: RESULT = new Dato(CONST.CARACTER,valor); :}
                                        |MENOS ENTERO:valor {: RESULT = new Dato(CONST.ENTERO,valor); :}
                                        |ID:valor {: RESULT = new Dato(CONST.ID,valor); :}
                                        ;

tiposDeMetodo::=                        VOID:valor {: RESULT = valor; :}
                                        |tiposDeDato:valor {: RESULT = valor; :}
                                        ;

publicOpcional::=                       PUBLIC
                                        |
                                        ;