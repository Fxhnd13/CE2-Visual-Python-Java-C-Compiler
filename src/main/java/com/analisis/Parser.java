
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.analisis;

import com.analisis.objetos.analisis.ErrorManager;
import com.analisis.objetos.analisis.Pos;
import com.analisis.objetos.estructuras.ColeccionInstr;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0267\000\002\002\004\000\002\002\006\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\015\000\002\007\014\000\002\007\015\000\002" +
    "\007\014\000\002\007\013\000\002\007\014\000\002\010" +
    "\013\000\002\010\013\000\002\010\012\000\002\010\011" +
    "\000\002\010\012\000\002\011\003\000\002\011\002\000" +
    "\002\012\004\000\002\012\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\006\000\002\015\012\000\002" +
    "\015\012\000\002\015\011\000\002\015\011\000\002\015" +
    "\013\000\002\015\012\000\002\015\010\000\002\015\010" +
    "\000\002\015\012\000\002\015\006\000\002\015\006\000" +
    "\002\016\010\000\002\016\007\000\002\016\005\000\002" +
    "\016\007\000\002\016\010\000\002\016\002\000\002\017" +
    "\016\000\002\017\016\000\002\017\015\000\002\017\015" +
    "\000\002\017\016\000\002\020\003\000\002\020\002\000" +
    "\002\021\004\000\002\021\002\000\002\022\003\000\002" +
    "\022\002\000\002\023\010\000\002\023\010\000\002\023" +
    "\010\000\002\024\010\000\002\024\010\000\002\024\010" +
    "\000\002\025\011\000\002\025\011\000\002\025\011\000" +
    "\002\026\003\000\002\026\002\000\002\027\006\000\002" +
    "\027\006\000\002\027\005\000\002\027\005\000\002\030" +
    "\004\000\002\030\004\000\002\030\003\000\002\031\004" +
    "\000\002\032\010\000\002\032\006\000\002\032\005\000" +
    "\002\033\011\000\002\033\007\000\002\033\006\000\002" +
    "\034\005\000\002\034\004\000\002\035\003\000\002\035" +
    "\003\000\002\036\006\000\002\036\006\000\002\036\005" +
    "\000\002\036\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\004\000\002\041\004\000\002\042\005\000\002\042" +
    "\004\000\002\042\002\000\002\043\005\000\002\043\003" +
    "\000\002\044\006\000\002\044\005\000\002\044\004\000" +
    "\002\044\005\000\002\044\003\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\045\003" +
    "\000\002\046\005\000\002\046\003\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\004\000\002\050\006\000\002\050\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\003\000" +
    "\002\051\003\000\002\052\004\000\002\052\003\000\002" +
    "\053\004\000\002\054\003\000\002\054\002\000\002\055" +
    "\004\000\002\055\003\000\002\056\010\000\002\056\010" +
    "\000\002\056\010\000\002\056\006\000\002\057\003\000" +
    "\002\057\002\000\002\060\004\000\002\060\003\000\002" +
    "\061\003\000\002\061\003\000\002\062\013\000\002\062" +
    "\013\000\002\062\013\000\002\062\011\000\002\062\011" +
    "\000\002\063\003\000\002\063\002\000\002\064\006\000" +
    "\002\064\004\000\002\064\006\000\002\064\006\000\002" +
    "\064\004\000\002\064\004\000\002\065\003\000\002\065" +
    "\002\000\002\066\004\000\002\066\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\004\000\002\067\004\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\071\012" +
    "\000\002\071\010\000\002\071\012\000\002\071\010\000" +
    "\002\071\010\000\002\072\013\000\002\072\006\000\002" +
    "\072\013\000\002\072\011\000\002\072\010\000\002\072" +
    "\004\000\002\072\002\000\002\073\021\000\002\073\020" +
    "\000\002\073\017\000\002\073\021\000\002\073\007\000" +
    "\002\073\021\000\002\074\004\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\075\011\000\002\075" +
    "\007\000\002\075\011\000\002\075\011\000\002\076\011" +
    "\000\002\076\007\000\002\076\011\000\002\076\011\000" +
    "\002\077\006\000\002\077\005\000\002\077\006\000\002" +
    "\077\005\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\003\000\002\101\005\000\002\101\003" +
    "\000\002\102\012\000\002\102\012\000\002\102\011\000" +
    "\002\102\010\000\002\102\007\000\002\103\004\000\002" +
    "\104\004\000\002\104\003\000\002\105\005\000\002\105" +
    "\003\000\002\106\005\000\002\106\006\000\002\107\003" +
    "\000\002\107\003\000\002\110\006\000\002\110\006\000" +
    "\002\110\006\000\002\110\005\000\002\110\004\000\002" +
    "\110\006\000\002\110\005\000\002\110\004\000\002\120" +
    "\005\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\111\004\000\002\111\004\000\002\112\003\000" +
    "\002\113\005\000\002\113\005\000\002\113\005\000\002" +
    "\113\005\000\002\113\005\000\002\113\005\000\002\113" +
    "\003\000\002\113\003\000\002\113\004\000\002\115\005" +
    "\000\002\115\005\000\002\115\005\000\002\115\005\000" +
    "\002\115\005\000\002\115\005\000\002\115\005\000\002" +
    "\115\005\000\002\115\004\000\002\116\006\000\002\116" +
    "\005\000\002\117\005\000\002\117\003\000\002\117\005" +
    "\000\002\117\003\000\002\121\005\000\002\122\003\000" +
    "\002\122\002\000\002\123\004\000\002\123\003\000\002" +
    "\124\011\000\002\124\004\000\002\124\005\000\002\124" +
    "\007\000\002\124\010\000\002\124\011\000\002\125\003" +
    "\000\002\125\002\000\002\126\005\000\002\126\005\000" +
    "\002\126\003\000\002\127\004\000\002\127\003\000\002" +
    "\130\004\000\002\130\004\000\002\130\004\000\002\130" +
    "\004\000\002\130\003\000\002\131\006\000\002\131\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\133\006\000\002\133\005\000\002" +
    "\133\004\000\002\133\006\000\002\134\005\000\002\134" +
    "\003\000\002\135\003\000\002\135\003\000\002\136\005" +
    "\000\002\136\005\000\002\136\003\000\002\136\003\000" +
    "\002\137\007\000\002\137\007\000\002\137\006\000\002" +
    "\137\005\000\002\140\007\000\002\140\007\000\002\140" +
    "\006\000\002\140\005\000\002\140\003\000\002\140\002" +
    "\000\002\141\005\000\002\141\005\000\002\141\004\000" +
    "\002\142\005\000\002\142\005\000\002\143\010\000\002" +
    "\143\010\000\002\143\007\000\002\143\006\000\002\143" +
    "\005\000\002\143\004\000\002\144\006\000\002\144\010" +
    "\000\002\144\012\000\002\144\012\000\002\144\011\000" +
    "\002\144\010\000\002\144\007\000\002\144\006\000\002" +
    "\144\005\000\002\144\004\000\002\145\005\000\002\145" +
    "\005\000\002\145\004\000\002\145\003\000\002\145\003" +
    "\000\002\146\005\000\002\146\005\000\002\146\005\000" +
    "\002\146\005\000\002\146\005\000\002\146\005\000\002" +
    "\146\003\000\002\146\003\000\002\147\006\000\002\147" +
    "\006\000\002\147\005\000\002\150\005\000\002\150\004" +
    "\000\002\150\005\000\002\150\005\000\002\151\005\000" +
    "\002\151\003\000\002\152\005\000\002\152\005\000\002" +
    "\152\005\000\002\152\005\000\002\152\005\000\002\152" +
    "\005\000\002\152\005\000\002\152\005\000\002\152\004" +
    "\000\002\153\007\000\002\154\003\000\002\154\002\000" +
    "\002\155\004\000\002\155\003\000\002\156\005\000\002" +
    "\156\005\000\002\156\004\000\002\157\005\000\002\157" +
    "\004\000\002\157\003\000\002\157\003\000\002\157\005" +
    "\000\002\157\005\000\002\157\004\000\002\160\005\000" +
    "\002\160\003\000\002\114\003\000\002\114\003\000\002" +
    "\162\003\000\002\162\002\000\002\163\004\000\002\163" +
    "\003\000\002\164\010\000\002\164\010\000\002\164\007" +
    "\000\002\164\006\000\002\164\005\000\002\164\004\000" +
    "\002\165\003\000\002\165\002\000\002\166\004\000\002" +
    "\166\003\000\002\237\004\000\002\237\004\000\002\167" +
    "\004\000\002\167\006\000\002\167\004\000\002\167\004" +
    "\000\002\167\005\000\002\167\004\000\002\170\004\000" +
    "\002\171\006\000\002\171\005\000\002\171\005\000\002" +
    "\171\006\000\002\172\006\000\002\172\004\000\002\172" +
    "\005\000\002\173\004\000\002\173\004\000\002\173\002" +
    "\000\002\174\006\000\002\174\004\000\002\174\005\000" +
    "\002\175\003\000\002\175\002\000\002\176\005\000\002" +
    "\176\005\000\002\177\011\000\002\177\011\000\002\177" +
    "\010\000\002\177\007\000\002\177\006\000\002\177\005" +
    "\000\002\200\003\000\002\200\002\000\002\201\004\000" +
    "\002\201\003\000\002\202\003\000\002\202\003\000\002" +
    "\202\003\000\002\202\003\000\002\202\003\000\002\202" +
    "\004\000\002\203\003\000\002\203\003\000\002\203\003" +
    "\000\002\203\003\000\002\203\003\000\002\203\003\000" +
    "\002\203\003\000\002\203\003\000\002\204\005\000\002" +
    "\204\005\000\002\204\004\000\002\205\003\000\002\205" +
    "\003\000\002\205\005\000\002\206\006\000\002\206\010" +
    "\000\002\206\006\000\002\206\005\000\002\206\004\000" +
    "\002\206\010\000\002\206\007\000\002\207\004\000\002" +
    "\207\003\000\002\210\005\000\002\210\003\000\002\210" +
    "\006\000\002\210\004\000\002\210\004\000\002\210\006" +
    "\000\002\210\005\000\002\211\004\000\002\211\004\000" +
    "\002\211\005\000\002\211\003\000\002\211\004\000\002" +
    "\211\004\000\002\211\005\000\002\211\003\000\002\212" +
    "\003\000\002\212\003\000\002\161\003\000\002\161\003" +
    "\000\002\213\003\000\002\213\003\000\002\213\003\000" +
    "\002\214\011\000\002\214\011\000\002\214\010\000\002" +
    "\214\007\000\002\214\006\000\002\214\005\000\002\214" +
    "\004\000\002\215\005\000\002\215\005\000\002\215\004" +
    "\000\002\216\005\000\002\216\005\000\002\216\004\000" +
    "\002\217\003\000\002\220\012\000\002\220\011\000\002" +
    "\220\007\000\002\220\011\000\002\220\010\000\002\220" +
    "\007\000\002\221\013\000\002\221\006\000\002\221\002" +
    "\000\002\221\012\000\002\221\010\000\002\221\012\000" +
    "\002\221\011\000\002\221\010\000\002\221\006\000\002" +
    "\221\004\000\002\222\020\000\002\222\020\000\002\222" +
    "\016\000\002\222\020\000\002\222\017\000\002\223\004" +
    "\000\002\223\004\000\002\223\003\000\002\223\003\000" +
    "\002\223\003\000\002\224\011\000\002\224\011\000\002" +
    "\224\007\000\002\224\011\000\002\224\010\000\002\224" +
    "\007\000\002\225\013\000\002\225\013\000\002\225\012" +
    "\000\002\225\011\000\002\225\010\000\002\225\007\000" +
    "\002\225\006\000\002\226\011\000\002\226\011\000\002" +
    "\226\010\000\002\226\011\000\002\226\010\000\002\226" +
    "\007\000\002\227\006\000\002\227\005\000\002\227\005" +
    "\000\002\227\006\000\002\230\004\000\002\230\004\000" +
    "\002\230\004\000\002\230\003\000\002\230\003\000\002" +
    "\232\005\000\002\232\005\000\002\232\005\000\002\232" +
    "\005\000\002\232\005\000\002\232\005\000\002\232\003" +
    "\000\002\232\003\000\002\233\005\000\002\233\005\000" +
    "\002\233\005\000\002\233\005\000\002\233\005\000\002" +
    "\233\005\000\002\233\005\000\002\233\005\000\002\233" +
    "\004\000\002\234\012\000\002\234\010\000\002\234\010" +
    "\000\002\235\003\000\002\235\002\000\002\236\005\000" +
    "\002\236\003\000\002\244\006\000\002\244\005\000\002" +
    "\244\006\000\002\244\005\000\002\244\004\000\002\245" +
    "\003\000\002\245\003\000\002\245\003\000\002\240\003" +
    "\000\002\240\003\000\002\240\003\000\002\241\003\000" +
    "\002\241\003\000\002\241\003\000\002\241\004\000\002" +
    "\241\003\000\002\242\003\000\002\242\003\000\002\243" +
    "\003\000\002\243\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0528\000\004\110\004\001\002\000\004\067\u03c8\001" +
    "\002\000\004\112\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\111\u0188\001\002\000" +
    "\012\003\ufd9b\111\uff71\126\ufd9b\133\014\001\002\000\012" +
    "\003\ufd9b\111\uff72\126\ufd9b\133\014\001\002\000\012\003" +
    "\uff6f\111\uff6f\126\uff6f\133\uff6f\001\002\000\022\003\ufd9c" +
    "\060\ufd9c\061\ufd9c\062\ufd9c\107\ufd9c\120\ufd9c\126\ufd9c\142" +
    "\ufd9c\001\002\000\004\111\uff73\001\002\000\006\003\017" +
    "\126\020\001\002\000\004\011\u0183\001\002\000\006\003" +
    "\022\011\021\001\002\000\006\003\u017f\057\u0180\001\002" +
    "\000\004\057\023\001\002\000\020\003\ufd9b\056\uff69\060" +
    "\034\061\025\062\032\120\ufd9b\133\014\001\002\000\020" +
    "\003\uff67\056\uff67\060\uff67\061\uff67\062\uff67\120\uff67\133" +
    "\uff67\001\002\000\016\003\ufda5\011\ufda5\013\ufda5\021\ufda5" +
    "\043\ufda5\067\ufda5\001\002\000\004\056\u017e\001\002\000" +
    "\020\003\uff65\056\uff65\060\uff65\061\uff65\062\uff65\120\uff65" +
    "\133\uff65\001\002\000\020\003\ufd9b\056\uff6a\060\034\061" +
    "\025\062\032\120\ufd9b\133\014\001\002\000\014\003\122" +
    "\060\034\061\025\062\032\120\124\001\002\000\016\003" +
    "\ufda4\011\ufda4\013\ufda4\021\ufda4\043\ufda4\067\ufda4\001\002" +
    "\000\004\011\036\001\002\000\016\003\ufda6\011\ufda6\013" +
    "\ufda6\021\ufda6\043\ufda6\067\ufda6\001\002\000\020\003\uff66" +
    "\056\uff66\060\uff66\061\uff66\062\uff66\120\uff66\133\uff66\001" +
    "\002\000\026\003\uff15\011\uff15\043\042\056\uff15\060\uff15" +
    "\061\uff15\062\uff15\067\uff15\120\uff15\133\uff15\001\002\000" +
    "\024\003\uff19\011\036\056\uff19\060\uff19\061\uff19\062\uff19" +
    "\067\uff19\120\uff19\133\uff19\001\002\000\024\003\uff17\011" +
    "\uff17\056\uff17\060\uff17\061\uff17\062\uff17\067\uff17\120\uff17" +
    "\133\uff17\001\002\000\024\003\uff18\011\uff18\056\uff18\060" +
    "\uff18\061\uff18\062\uff18\067\uff18\120\uff18\133\uff18\001\002" +
    "\000\026\005\050\006\052\007\062\011\055\012\044\023" +
    "\051\024\043\025\057\035\046\127\056\001\002\000\006" +
    "\003\ufda8\012\ufda8\001\002\000\020\005\050\006\052\007" +
    "\062\011\055\012\044\035\046\127\056\001\002\000\006" +
    "\003\110\012\111\001\002\000\004\005\107\001\002\000" +
    "\062\003\ufefa\011\ufefa\013\ufefa\021\ufefa\034\ufefa\035\ufefa" +
    "\036\ufefa\037\ufefa\040\ufefa\041\ufefa\042\ufefa\044\ufefa\045" +
    "\ufefa\046\ufefa\047\ufefa\050\ufefa\052\ufefa\056\ufefa\060\ufefa" +
    "\061\ufefa\062\ufefa\067\ufefa\120\ufefa\133\ufefa\001\002\000" +
    "\122\003\ufda3\004\ufda3\010\ufda3\011\ufda3\013\ufda3\014\ufda3" +
    "\021\ufda3\022\ufda3\023\ufda3\024\ufda3\025\ufda3\026\ufda3\034" +
    "\ufda3\035\ufda3\036\ufda3\037\ufda3\040\ufda3\041\ufda3\042\ufda3" +
    "\044\ufda3\045\ufda3\046\ufda3\047\ufda3\050\ufda3\052\ufda3\056" +
    "\ufda3\060\ufda3\061\ufda3\062\ufda3\064\ufda3\067\ufda3\070\ufda3" +
    "\075\ufda3\106\ufda3\116\ufda3\117\ufda3\120\ufda3\130\ufda3\133" +
    "\ufda3\143\ufda3\001\002\000\006\003\ufda9\012\ufda9\001\002" +
    "\000\122\003\ufda2\004\ufda2\010\ufda2\011\ufda2\013\ufda2\014" +
    "\ufda2\021\ufda2\022\ufda2\023\ufda2\024\ufda2\025\ufda2\026\ufda2" +
    "\034\ufda2\035\ufda2\036\ufda2\037\ufda2\040\ufda2\041\ufda2\042" +
    "\ufda2\044\ufda2\045\ufda2\046\ufda2\047\ufda2\050\ufda2\052\ufda2" +
    "\056\ufda2\060\ufda2\061\ufda2\062\ufda2\064\ufda2\067\ufda2\070" +
    "\ufda2\075\ufda2\106\ufda2\116\ufda2\117\ufda2\120\ufda2\130\ufda2" +
    "\133\ufda2\143\ufda2\001\002\000\024\003\uff11\011\uff11\056" +
    "\uff11\060\uff11\061\uff11\062\uff11\067\uff11\120\uff11\133\uff11" +
    "\001\002\000\062\003\ufefb\011\ufefb\013\ufefb\021\ufefb\034" +
    "\ufefb\035\ufefb\036\ufefb\037\ufefb\040\ufefb\041\ufefb\042\ufefb" +
    "\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\052\ufefb\056" +
    "\ufefb\060\ufefb\061\ufefb\062\ufefb\067\ufefb\120\ufefb\133\ufefb" +
    "\001\002\000\064\003\ufd9f\011\ufd9f\012\076\013\ufd9f\021" +
    "\ufd9f\034\ufd9f\035\ufd9f\036\ufd9f\037\ufd9f\040\ufd9f\041\ufd9f" +
    "\042\ufd9f\044\ufd9f\045\ufd9f\046\ufd9f\047\ufd9f\050\ufd9f\052" +
    "\ufd9f\056\ufd9f\060\ufd9f\061\ufd9f\062\ufd9f\067\ufd9f\120\ufd9f" +
    "\133\ufd9f\001\002\000\004\011\075\001\002\000\006\003" +
    "\ufda7\012\ufda7\001\002\000\024\003\uff16\011\uff16\056\uff16" +
    "\060\uff16\061\uff16\062\uff16\067\uff16\120\uff16\133\uff16\001" +
    "\002\000\036\003\uff12\011\uff12\034\064\035\065\036\067" +
    "\037\066\040\063\056\uff12\060\uff12\061\uff12\062\uff12\067" +
    "\uff12\120\uff12\133\uff12\001\002\000\122\003\ufda1\004\ufda1" +
    "\010\ufda1\011\ufda1\013\ufda1\014\ufda1\021\ufda1\022\ufda1\023" +
    "\ufda1\024\ufda1\025\ufda1\026\ufda1\034\ufda1\035\ufda1\036\ufda1" +
    "\037\ufda1\040\ufda1\041\ufda1\042\ufda1\044\ufda1\045\ufda1\046" +
    "\ufda1\047\ufda1\050\ufda1\052\ufda1\056\ufda1\060\ufda1\061\ufda1" +
    "\062\ufda1\064\ufda1\067\ufda1\070\ufda1\075\ufda1\106\ufda1\116" +
    "\ufda1\117\ufda1\120\ufda1\130\ufda1\133\ufda1\143\ufda1\001\002" +
    "\000\020\005\050\006\052\007\062\011\055\012\044\035" +
    "\046\127\056\001\002\000\020\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\020\005" +
    "\050\006\052\007\062\011\055\012\044\035\046\127\056" +
    "\001\002\000\020\005\050\006\052\007\062\011\055\012" +
    "\044\035\046\127\056\001\002\000\020\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\127\056\001\002\000" +
    "\062\003\ufefe\011\ufefe\013\ufefe\021\ufefe\034\ufefe\035\ufefe" +
    "\036\ufefe\037\ufefe\040\ufefe\041\ufefe\042\ufefe\044\ufefe\045" +
    "\ufefe\046\ufefe\047\ufefe\050\ufefe\052\ufefe\056\ufefe\060\ufefe" +
    "\061\ufefe\062\ufefe\067\ufefe\120\ufefe\133\ufefe\001\002\000" +
    "\062\003\ufeff\011\ufeff\013\ufeff\021\ufeff\034\ufeff\035\ufeff" +
    "\036\ufeff\037\ufeff\040\ufeff\041\ufeff\042\ufeff\044\ufeff\045" +
    "\ufeff\046\ufeff\047\ufeff\050\ufeff\052\ufeff\056\ufeff\060\ufeff" +
    "\061\ufeff\062\ufeff\067\ufeff\120\ufeff\133\ufeff\001\002\000" +
    "\062\003\uff00\011\uff00\013\uff00\021\uff00\034\uff00\035\uff00" +
    "\036\067\037\066\040\063\041\uff00\042\uff00\044\uff00\045" +
    "\uff00\046\uff00\047\uff00\050\uff00\052\uff00\056\uff00\060\uff00" +
    "\061\uff00\062\uff00\067\uff00\120\uff00\133\uff00\001\002\000" +
    "\062\003\uff01\011\uff01\013\uff01\021\uff01\034\uff01\035\uff01" +
    "\036\067\037\066\040\063\041\uff01\042\uff01\044\uff01\045" +
    "\uff01\046\uff01\047\uff01\050\uff01\052\uff01\056\uff01\060\uff01" +
    "\061\uff01\062\uff01\067\uff01\120\uff01\133\uff01\001\002\000" +
    "\062\003\ufefd\011\ufefd\013\ufefd\021\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\037\ufefd\040\ufefd\041\ufefd\042\ufefd\044\ufefd\045" +
    "\ufefd\046\ufefd\047\ufefd\050\ufefd\052\ufefd\056\ufefd\060\ufefd" +
    "\061\ufefd\062\ufefd\067\ufefd\120\ufefd\133\ufefd\001\002\000" +
    "\062\003\ufef9\011\ufef9\013\ufef9\021\ufef9\034\ufef9\035\ufef9" +
    "\036\ufef9\037\ufef9\040\ufef9\041\ufef9\042\ufef9\044\ufef9\045" +
    "\ufef9\046\ufef9\047\ufef9\050\ufef9\052\ufef9\056\ufef9\060\ufef9" +
    "\061\ufef9\062\ufef9\067\ufef9\120\ufef9\133\ufef9\001\002\000" +
    "\024\003\100\005\050\006\052\007\062\011\055\012\044" +
    "\013\102\035\046\127\056\001\002\000\006\013\104\021" +
    "\103\001\002\000\006\013\ufeea\021\ufeea\001\002\000\020" +
    "\013\ufeec\021\ufeec\034\064\035\065\036\067\037\066\040" +
    "\063\001\002\000\062\003\ufeee\011\ufeee\013\ufeee\021\ufeee" +
    "\034\ufeee\035\ufeee\036\ufeee\037\ufeee\040\ufeee\041\ufeee\042" +
    "\ufeee\044\ufeee\045\ufeee\046\ufeee\047\ufeee\050\ufeee\052\ufeee" +
    "\056\ufeee\060\ufeee\061\ufeee\062\ufeee\067\ufeee\120\ufeee\133" +
    "\ufeee\001\002\000\022\003\105\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\062\003" +
    "\ufeef\011\ufeef\013\ufeef\021\ufeef\034\ufeef\035\ufeef\036\ufeef" +
    "\037\ufeef\040\ufeef\041\ufeef\042\ufeef\044\ufeef\045\ufeef\046" +
    "\ufeef\047\ufeef\050\ufeef\052\ufeef\056\ufeef\060\ufeef\061\ufeef" +
    "\062\ufeef\067\ufeef\120\ufeef\133\ufeef\001\002\000\006\013" +
    "\ufeeb\021\ufeeb\001\002\000\020\013\ufeed\021\ufeed\034\064" +
    "\035\065\036\067\037\066\040\063\001\002\000\122\003" +
    "\ufda0\004\ufda0\010\ufda0\011\ufda0\013\ufda0\014\ufda0\021\ufda0" +
    "\022\ufda0\023\ufda0\024\ufda0\025\ufda0\026\ufda0\034\ufda0\035" +
    "\ufda0\036\ufda0\037\ufda0\040\ufda0\041\ufda0\042\ufda0\044\ufda0" +
    "\045\ufda0\046\ufda0\047\ufda0\050\ufda0\052\ufda0\056\ufda0\060" +
    "\ufda0\061\ufda0\062\ufda0\064\ufda0\067\ufda0\070\ufda0\075\ufda0" +
    "\106\ufda0\116\ufda0\117\ufda0\120\ufda0\130\ufda0\133\ufda0\143" +
    "\ufda0\001\002\000\040\003\ufdaa\004\ufdaa\010\ufdaa\011\ufdaa" +
    "\022\ufdaa\026\ufdaa\056\ufdaa\060\ufdaa\061\ufdaa\062\ufdaa\067" +
    "\ufdaa\106\ufdaa\120\ufdaa\133\ufdaa\143\ufdaa\001\002\000\010" +
    "\003\113\013\112\020\114\001\002\000\040\003\ufdad\004" +
    "\ufdad\010\ufdad\011\ufdad\022\ufdad\026\ufdad\056\ufdad\060\ufdad" +
    "\061\ufdad\062\ufdad\067\ufdad\106\ufdad\120\ufdad\133\ufdad\143" +
    "\ufdad\001\002\000\040\003\ufdab\004\ufdab\010\ufdab\011\ufdab" +
    "\022\ufdab\026\ufdab\056\ufdab\060\ufdab\061\ufdab\062\ufdab\067" +
    "\ufdab\106\ufdab\120\ufdab\133\ufdab\143\ufdab\001\002\000\006" +
    "\003\116\013\115\001\002\000\040\003\ufdae\004\ufdae\010" +
    "\ufdae\011\ufdae\022\ufdae\026\ufdae\056\ufdae\060\ufdae\061\ufdae" +
    "\062\ufdae\067\ufdae\106\ufdae\120\ufdae\133\ufdae\143\ufdae\001" +
    "\002\000\040\003\ufdac\004\ufdac\010\ufdac\011\ufdac\022\ufdac" +
    "\026\ufdac\056\ufdac\060\ufdac\061\ufdac\062\ufdac\067\ufdac\106" +
    "\ufdac\120\ufdac\133\ufdac\143\ufdac\001\002\000\016\013\120" +
    "\034\064\035\065\036\067\037\066\040\063\001\002\000" +
    "\062\003\ufefc\011\ufefc\013\ufefc\021\ufefc\034\ufefc\035\ufefc" +
    "\036\ufefc\037\ufefc\040\ufefc\041\ufefc\042\ufefc\044\ufefc\045" +
    "\ufefc\046\ufefc\047\ufefc\050\ufefc\052\ufefc\056\ufefc\060\ufefc" +
    "\061\ufefc\062\ufefc\067\ufefc\120\ufefc\133\ufefc\001\002\000" +
    "\006\003\u016b\011\u016a\001\002\000\004\011\125\001\002" +
    "\000\006\003\ufd9d\011\ufd9d\001\002\000\006\003\ufd9e\011" +
    "\ufd9e\001\002\000\004\012\126\001\002\000\014\003\127" +
    "\013\uff5e\060\034\061\025\062\032\001\002\000\004\011" +
    "\u0169\001\002\000\004\013\143\001\002\000\006\003\142" +
    "\011\141\001\002\000\006\013\uff5f\021\133\001\002\000" +
    "\012\003\134\060\034\061\025\062\032\001\002\000\004" +
    "\011\140\001\002\000\006\003\137\011\136\001\002\000" +
    "\006\013\uff5d\021\uff5d\001\002\000\006\013\uff5a\021\uff5a" +
    "\001\002\000\006\013\uff5b\021\uff5b\001\002\000\006\013" +
    "\uff5c\021\uff5c\001\002\000\006\013\uff59\021\uff59\001\002" +
    "\000\004\057\144\001\002\000\046\011\157\023\051\024" +
    "\043\025\057\027\155\030\146\033\174\053\151\056\uff56" +
    "\060\034\061\025\062\032\074\162\125\165\127\160\130" +
    "\177\135\153\140\163\001\002\000\004\067\uff4a\001\002" +
    "\000\006\003\u0156\012\u0157\001\002\000\004\067\uff4d\001" +
    "\002\000\004\067\u0155\001\002\000\022\003\u0153\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\127\056\001" +
    "\002\000\004\056\u0152\001\002\000\006\003\u011c\012\u011d" +
    "\001\002\000\054\003\uff51\011\uff51\023\uff51\024\uff51\025" +
    "\uff51\027\uff51\030\uff51\033\uff51\053\uff51\056\uff51\060\uff51" +
    "\061\uff51\062\uff51\074\uff51\113\uff51\125\uff51\127\uff51\130" +
    "\uff51\135\uff51\137\uff51\140\uff51\001\002\000\006\003\355" +
    "\012\356\001\002\000\004\067\uff49\001\002\000\006\012" +
    "\076\043\353\001\002\000\004\011\350\001\002\000\054" +
    "\003\uff57\011\157\023\051\024\043\025\057\027\155\030" +
    "\146\033\174\053\151\056\uff57\060\034\061\025\062\032" +
    "\074\162\113\uff57\125\165\127\160\130\177\135\153\137" +
    "\uff57\140\163\001\002\000\004\057\334\001\002\000\006" +
    "\003\326\012\327\001\002\000\054\003\uff53\011\uff53\023" +
    "\uff53\024\uff53\025\uff53\027\uff53\030\uff53\033\uff53\053\uff53" +
    "\056\uff53\060\uff53\061\uff53\062\uff53\074\uff53\113\uff53\125" +
    "\uff53\127\uff53\130\uff53\135\uff53\137\uff53\140\uff53\001\002" +
    "\000\004\067\uff02\001\002\000\004\067\uff4c\001\002\000" +
    "\054\003\uff50\011\uff50\023\uff50\024\uff50\025\uff50\027\uff50" +
    "\030\uff50\033\uff50\053\uff50\056\uff50\060\uff50\061\uff50\062" +
    "\uff50\074\uff50\113\uff50\125\uff50\127\uff50\130\uff50\135\uff50" +
    "\137\uff50\140\uff50\001\002\000\004\067\uff4b\001\002\000" +
    "\054\003\uff54\011\uff54\023\uff54\024\uff54\025\uff54\027\uff54" +
    "\030\uff54\033\uff54\053\uff54\056\uff54\060\uff54\061\uff54\062" +
    "\uff54\074\uff54\113\uff54\125\uff54\127\uff54\130\uff54\135\uff54" +
    "\137\uff54\140\uff54\001\002\000\004\067\uff47\001\002\000" +
    "\004\067\325\001\002\000\006\003\213\012\214\001\002" +
    "\000\004\067\uff48\001\002\000\054\003\uff52\011\uff52\023" +
    "\uff52\024\uff52\025\uff52\027\uff52\030\uff52\033\uff52\053\uff52" +
    "\056\uff52\060\uff52\061\uff52\062\uff52\074\uff52\113\uff52\125" +
    "\uff52\127\uff52\130\uff52\135\uff52\137\uff52\140\uff52\001\002" +
    "\000\006\003\200\012\201\001\002\000\004\067\uff0c\001" +
    "\002\000\024\003\204\005\050\006\052\007\062\011\055" +
    "\012\044\020\202\035\046\127\056\001\002\000\010\003" +
    "\uff07\013\uff07\034\uff07\001\002\000\010\003\210\013\207" +
    "\034\206\001\002\000\012\003\uff05\013\uff05\034\uff05\067" +
    "\uff0d\001\002\000\020\003\uff06\013\uff06\034\064\035\065" +
    "\036\067\037\066\040\063\001\002\000\024\003\212\005" +
    "\050\006\052\007\062\011\055\012\044\020\202\035\046" +
    "\127\056\001\002\000\004\067\uff10\001\002\000\004\067" +
    "\uff0e\001\002\000\010\003\uff08\013\uff08\034\uff08\001\002" +
    "\000\010\003\uff05\013\uff05\034\uff05\001\002\000\004\057" +
    "\322\001\002\000\010\060\034\061\025\062\032\001\002" +
    "\000\006\003\217\011\216\001\002\000\006\003\261\043" +
    "\262\001\002\000\004\067\220\001\002\000\022\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\051\222\127" +
    "\056\001\002\000\010\050\241\052\242\067\245\001\002" +
    "\000\022\005\050\006\052\007\062\011\055\012\044\035" +
    "\046\051\222\127\056\001\002\000\030\034\064\035\065" +
    "\036\067\037\066\040\063\041\231\042\230\044\225\045" +
    "\224\046\227\047\226\001\002\000\020\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\127\056\001\002\000" +
    "\020\005\050\006\052\007\062\011\055\012\044\035\046" +
    "\127\056\001\002\000\020\005\050\006\052\007\062\011" +
    "\055\012\044\035\046\127\056\001\002\000\020\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\127\056\001" +
    "\002\000\020\005\050\006\052\007\062\011\055\012\044" +
    "\035\046\127\056\001\002\000\020\005\050\006\052\007" +
    "\062\011\055\012\044\035\046\127\056\001\002\000\026" +
    "\003\ufef8\013\ufef8\034\064\035\065\036\067\037\066\040" +
    "\063\050\ufef8\052\ufef8\067\ufef8\001\002\000\026\003\ufef7" +
    "\013\ufef7\034\064\035\065\036\067\037\066\040\063\050" +
    "\ufef7\052\ufef7\067\ufef7\001\002\000\026\003\ufef4\013\ufef4" +
    "\034\064\035\065\036\067\037\066\040\063\050\ufef4\052" +
    "\ufef4\067\ufef4\001\002\000\026\003\ufef3\013\ufef3\034\064" +
    "\035\065\036\067\037\066\040\063\050\ufef3\052\ufef3\067" +
    "\ufef3\001\002\000\026\003\ufef6\013\ufef6\034\064\035\065" +
    "\036\067\037\066\040\063\050\ufef6\052\ufef6\067\ufef6\001" +
    "\002\000\026\003\ufef5\013\ufef5\034\064\035\065\036\067" +
    "\037\066\040\063\050\ufef5\052\ufef5\067\ufef5\001\002\000" +
    "\014\003\ufef0\013\ufef0\050\ufef0\052\ufef0\067\ufef0\001\002" +
    "\000\022\005\050\006\052\007\062\011\055\012\044\035" +
    "\046\051\222\127\056\001\002\000\022\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\051\222\127\056\001" +
    "\002\000\014\003\ufef1\013\ufef1\050\241\052\ufef1\067\ufef1" +
    "\001\002\000\014\003\ufef2\013\ufef2\050\ufef2\052\ufef2\067" +
    "\ufef2\001\002\000\004\011\246\001\002\000\012\003\250" +
    "\043\251\076\247\077\253\001\002\000\006\003\uff33\013" +
    "\uff33\001\002\000\006\003\uff31\013\uff31\001\002\000\020" +
    "\005\050\006\052\007\062\011\055\012\044\035\046\127" +
    "\056\001\002\000\004\013\254\001\002\000\006\003\uff32" +
    "\013\uff32\001\002\000\004\057\255\001\002\000\046\011" +
    "\157\023\051\024\043\025\057\027\155\030\146\033\174" +
    "\053\151\056\uff56\060\034\061\025\062\032\074\162\125" +
    "\165\127\160\130\177\135\153\140\163\001\002\000\004" +
    "\056\257\001\002\000\054\003\uff38\011\uff38\023\uff38\024" +
    "\uff38\025\uff38\027\uff38\030\uff38\033\uff38\053\uff38\056\uff38" +
    "\060\uff38\061\uff38\062\uff38\074\uff38\113\uff38\125\uff38\127" +
    "\uff38\130\uff38\135\uff38\137\uff38\140\uff38\001\002\000\020" +
    "\003\uff34\013\uff34\034\064\035\065\036\067\037\066\040" +
    "\063\001\002\000\004\067\311\001\002\000\020\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\127\056\001" +
    "\002\000\016\034\064\035\065\036\067\037\066\040\063" +
    "\067\264\001\002\000\024\003\266\005\050\006\052\007" +
    "\062\011\055\012\044\035\046\051\222\127\056\001\002" +
    "\000\010\050\241\052\242\067\276\001\002\000\004\067" +
    "\267\001\002\000\004\011\270\001\002\000\012\003\250" +
    "\043\251\076\247\077\253\001\002\000\004\013\272\001" +
    "\002\000\004\057\273\001\002\000\046\011\157\023\051" +
    "\024\043\025\057\027\155\030\146\033\174\053\151\056" +
    "\uff56\060\034\061\025\062\032\074\162\125\165\127\160" +
    "\130\177\135\153\140\163\001\002\000\004\056\275\001" +
    "\002\000\054\003\uff37\011\uff37\023\uff37\024\uff37\025\uff37" +
    "\027\uff37\030\uff37\033\uff37\053\uff37\056\uff37\060\uff37\061" +
    "\uff37\062\uff37\074\uff37\113\uff37\125\uff37\127\uff37\130\uff37" +
    "\135\uff37\137\uff37\140\uff37\001\002\000\004\011\277\001" +
    "\002\000\012\003\250\043\251\076\247\077\253\001\002" +
    "\000\006\003\302\013\301\001\002\000\004\057\306\001" +
    "\002\000\004\057\303\001\002\000\046\011\157\023\051" +
    "\024\043\025\057\027\155\030\146\033\174\053\151\056" +
    "\uff56\060\034\061\025\062\032\074\162\125\165\127\160" +
    "\130\177\135\153\140\163\001\002\000\004\056\305\001" +
    "\002\000\054\003\uff35\011\uff35\023\uff35\024\uff35\025\uff35" +
    "\027\uff35\030\uff35\033\uff35\053\uff35\056\uff35\060\uff35\061" +
    "\uff35\062\uff35\074\uff35\113\uff35\125\uff35\127\uff35\130\uff35" +
    "\135\uff35\137\uff35\140\uff35\001\002\000\046\011\157\023" +
    "\051\024\043\025\057\027\155\030\146\033\174\053\151" +
    "\056\uff56\060\034\061\025\062\032\074\162\125\165\127" +
    "\160\130\177\135\153\140\163\001\002\000\004\056\310" +
    "\001\002\000\054\003\uff3a\011\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\027\uff3a\030\uff3a\033\uff3a\053\uff3a\056\uff3a\060\uff3a" +
    "\061\uff3a\062\uff3a\074\uff3a\113\uff3a\125\uff3a\127\uff3a\130" +
    "\uff3a\135\uff3a\137\uff3a\140\uff3a\001\002\000\022\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\051\222\127" +
    "\056\001\002\000\010\050\241\052\242\067\313\001\002" +
    "\000\004\011\314\001\002\000\012\003\250\043\251\076" +
    "\247\077\253\001\002\000\004\013\316\001\002\000\004" +
    "\057\317\001\002\000\046\011\157\023\051\024\043\025" +
    "\057\027\155\030\146\033\174\053\151\056\uff56\060\034" +
    "\061\025\062\032\074\162\125\165\127\160\130\177\135" +
    "\153\140\163\001\002\000\004\056\321\001\002\000\054" +
    "\003\uff39\011\uff39\023\uff39\024\uff39\025\uff39\027\uff39\030" +
    "\uff39\033\uff39\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39" +
    "\074\uff39\113\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137" +
    "\uff39\140\uff39\001\002\000\046\011\157\023\051\024\043" +
    "\025\057\027\155\030\146\033\174\053\151\056\uff56\060" +
    "\034\061\025\062\032\074\162\125\165\127\160\130\177" +
    "\135\153\140\163\001\002\000\004\056\324\001\002\000" +
    "\054\003\uff36\011\uff36\023\uff36\024\uff36\025\uff36\027\uff36" +
    "\030\uff36\033\uff36\053\uff36\056\uff36\060\uff36\061\uff36\062" +
    "\uff36\074\uff36\113\uff36\125\uff36\127\uff36\130\uff36\135\uff36" +
    "\137\uff36\140\uff36\001\002\000\054\003\uff4f\011\uff4f\023" +
    "\uff4f\024\uff4f\025\uff4f\027\uff4f\030\uff4f\033\uff4f\053\uff4f" +
    "\056\uff4f\060\uff4f\061\uff4f\062\uff4f\074\uff4f\113\uff4f\125" +
    "\uff4f\127\uff4f\130\uff4f\135\uff4f\137\uff4f\140\uff4f\001\002" +
    "\000\004\067\uff09\001\002\000\024\003\331\005\050\006" +
    "\052\007\062\011\055\012\044\020\202\035\046\127\056" +
    "\001\002\000\010\003\333\013\332\034\206\001\002\000" +
    "\012\003\uff05\013\uff05\034\uff05\067\uff0a\001\002\000\004" +
    "\067\uff0f\001\002\000\004\067\uff0b\001\002\000\046\011" +
    "\157\023\051\024\043\025\057\027\155\030\146\033\174" +
    "\053\151\056\uff56\060\034\061\025\062\032\074\162\125" +
    "\165\127\160\130\177\135\153\140\163\001\002\000\004" +
    "\056\336\001\002\000\006\003\337\030\340\001\002\000" +
    "\004\067\uff1a\001\002\000\006\003\341\012\342\001\002" +
    "\000\004\067\uff1b\001\002\000\024\003\344\005\050\006" +
    "\052\007\062\011\055\012\044\035\046\051\222\127\056" +
    "\001\002\000\012\003\346\013\345\050\241\052\242\001" +
    "\002\000\004\067\uff1c\001\002\000\004\067\uff1e\001\002" +
    "\000\004\067\uff1d\001\002\000\054\003\uff55\011\uff55\023" +
    "\uff55\024\uff55\025\uff55\027\uff55\030\uff55\033\uff55\053\uff55" +
    "\056\uff55\060\uff55\061\uff55\062\uff55\074\uff55\113\uff55\125" +
    "\uff55\127\uff55\130\uff55\135\uff55\137\uff55\140\uff55\001\002" +
    "\000\004\043\351\001\002\000\026\005\050\006\052\007" +
    "\062\011\055\012\044\023\051\024\043\025\057\035\046" +
    "\127\056\001\002\000\004\067\uff13\001\002\000\026\005" +
    "\050\006\052\007\062\011\055\012\044\023\051\024\043" +
    "\025\057\035\046\127\056\001\002\000\004\067\uff14\001" +
    "\002\000\004\057\u0118\001\002\000\024\003\360\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\051\222\127" +
    "\056\001\002\000\010\013\u010f\050\241\052\242\001\002" +
    "\000\004\013\361\001\002\000\004\057\362\001\002\000" +
    "\046\011\157\023\051\024\043\025\057\027\155\030\146" +
    "\033\174\053\151\056\uff56\060\034\061\025\062\032\074" +
    "\162\125\165\127\160\130\177\135\153\140\163\001\002" +
    "\000\004\056\364\001\002\000\056\003\uff3b\011\uff3b\023" +
    "\uff3b\024\uff3b\025\uff3b\026\366\027\uff3b\030\uff3b\033\uff3b" +
    "\053\uff3b\056\uff3b\060\uff3b\061\uff3b\062\uff3b\074\uff3b\113" +
    "\uff3b\125\uff3b\127\uff3b\130\uff3b\135\uff3b\137\uff3b\140\uff3b" +
    "\001\002\000\054\003\uff44\011\uff44\023\uff44\024\uff44\025" +
    "\uff44\027\uff44\030\uff44\033\uff44\053\uff44\056\uff44\060\uff44" +
    "\061\uff44\062\uff44\074\uff44\113\uff44\125\uff44\127\uff44\130" +
    "\uff44\135\uff44\137\uff44\140\uff44\001\002\000\010\003\367" +
    "\027\370\057\371\001\002\000\054\003\uff3c\011\uff3c\023" +
    "\uff3c\024\uff3c\025\uff3c\027\uff3c\030\uff3c\033\uff3c\053\uff3c" +
    "\056\uff3c\060\uff3c\061\uff3c\062\uff3c\074\uff3c\113\uff3c\125" +
    "\uff3c\127\uff3c\130\uff3c\135\uff3c\137\uff3c\140\uff3c\001\002" +
    "\000\006\003\374\012\375\001\002\000\046\011\157\023" +
    "\051\024\043\025\057\027\155\030\146\033\174\053\151" +
    "\056\uff56\060\034\061\025\062\032\074\162\125\165\127" +
    "\160\130\177\135\153\140\163\001\002\000\004\056\373" +
    "\001\002\000\054\003\uff40\011\uff40\023\uff40\024\uff40\025" +
    "\uff40\027\uff40\030\uff40\033\uff40\053\uff40\056\uff40\060\uff40" +
    "\061\uff40\062\uff40\074\uff40\113\uff40\125\uff40\127\uff40\130" +
    "\uff40\135\uff40\137\uff40\140\uff40\001\002\000\004\057\u010b" +
    "\001\002\000\024\003\377\005\050\006\052\007\062\011" +
    "\055\012\044\035\046\051\222\127\056\001\002\000\010" +
    "\013\u0105\050\241\052\242\001\002\000\004\013\u0100\001" +
    "\002\000\004\057\u0101\001\002\000\046\011\157\023\051" +
    "\024\043\025\057\027\155\030\146\033\174\053\151\056" +
    "\uff56\060\034\061\025\062\032\074\162\125\165\127\160" +
    "\130\177\135\153\140\163\001\002\000\004\056\u0103\001" +
    "\002\000\056\003\uff3b\011\uff3b\023\uff3b\024\uff3b\025\uff3b" +
    "\026\366\027\uff3b\030\uff3b\033\uff3b\053\uff3b\056\uff3b\060" +
    "\uff3b\061\uff3b\062\uff3b\074\uff3b\113\uff3b\125\uff3b\127\uff3b" +
    "\130\uff3b\135\uff3b\137\uff3b\140\uff3b\001\002\000\054\003" +
    "\uff3f\011\uff3f\023\uff3f\024\uff3f\025\uff3f\027\uff3f\030\uff3f" +
    "\033\uff3f\053\uff3f\056\uff3f\060\uff3f\061\uff3f\062\uff3f\074" +
    "\uff3f\113\uff3f\125\uff3f\127\uff3f\130\uff3f\135\uff3f\137\uff3f" +
    "\140\uff3f\001\002\000\006\003\u0106\057\u0107\001\002\000" +
    "\054\003\uff3d\011\uff3d\023\uff3d\024\uff3d\025\uff3d\027\uff3d" +
    "\030\uff3d\033\uff3d\053\uff3d\056\uff3d\060\uff3d\061\uff3d\062" +
    "\uff3d\074\uff3d\113\uff3d\125\uff3d\127\uff3d\130\uff3d\135\uff3d" +
    "\137\uff3d\140\uff3d\001\002\000\046\011\157\023\051\024" +
    "\043\025\057\027\155\030\146\033\174\053\151\056\uff56" +
    "\060\034\061\025\062\032\074\162\125\165\127\160\130" +
    "\177\135\153\140\163\001\002\000\004\056\u0109\001\002" +
    "\000\056\003\uff3b\011\uff3b\023\uff3b\024\uff3b\025\uff3b\026" +
    "\366\027\uff3b\030\uff3b\033\uff3b\053\uff3b\056\uff3b\060\uff3b" +
    "\061\uff3b\062\uff3b\074\uff3b\113\uff3b\125\uff3b\127\uff3b\130" +
    "\uff3b\135\uff3b\137\uff3b\140\uff3b\001\002\000\054\003\uff41" +
    "\011\uff41\023\uff41\024\uff41\025\uff41\027\uff41\030\uff41\033" +
    "\uff41\053\uff41\056\uff41\060\uff41\061\uff41\062\uff41\074\uff41" +
    "\113\uff41\125\uff41\127\uff41\130\uff41\135\uff41\137\uff41\140" +
    "\uff41\001\002\000\046\011\157\023\051\024\043\025\057" +
    "\027\155\030\146\033\174\053\151\056\uff56\060\034\061" +
    "\025\062\032\074\162\125\165\127\160\130\177\135\153" +
    "\140\163\001\002\000\004\056\u010d\001\002\000\056\003" +
    "\uff3b\011\uff3b\023\uff3b\024\uff3b\025\uff3b\026\366\027\uff3b" +
    "\030\uff3b\033\uff3b\053\uff3b\056\uff3b\060\uff3b\061\uff3b\062" +
    "\uff3b\074\uff3b\113\uff3b\125\uff3b\127\uff3b\130\uff3b\135\uff3b" +
    "\137\uff3b\140\uff3b\001\002\000\054\003\uff3e\011\uff3e\023" +
    "\uff3e\024\uff3e\025\uff3e\027\uff3e\030\uff3e\033\uff3e\053\uff3e" +
    "\056\uff3e\060\uff3e\061\uff3e\062\uff3e\074\uff3e\113\uff3e\125" +
    "\uff3e\127\uff3e\130\uff3e\135\uff3e\137\uff3e\140\uff3e\001\002" +
    "\000\036\003\u0111\011\157\023\051\024\043\025\057\053" +
    "\151\057\u0112\060\034\061\025\062\032\125\165\127\160" +
    "\130\177\140\163\001\002\000\004\067\u0117\001\002\000" +
    "\056\003\uff3b\011\uff3b\023\uff3b\024\uff3b\025\uff3b\026\366" +
    "\027\uff3b\030\uff3b\033\uff3b\053\uff3b\056\uff3b\060\uff3b\061" +
    "\uff3b\062\uff3b\074\uff3b\113\uff3b\125\uff3b\127\uff3b\130\uff3b" +
    "\135\uff3b\137\uff3b\140\uff3b\001\002\000\046\011\157\023" +
    "\051\024\043\025\057\027\155\030\146\033\174\053\151" +
    "\056\uff56\060\034\061\025\062\032\074\162\125\165\127" +
    "\160\130\177\135\153\140\163\001\002\000\004\056\u0114" +
    "\001\002\000\056\003\uff3b\011\uff3b\023\uff3b\024\uff3b\025" +
    "\uff3b\026\366\027\uff3b\030\uff3b\033\uff3b\053\uff3b\056\uff3b" +
    "\060\uff3b\061\uff3b\062\uff3b\074\uff3b\113\uff3b\125\uff3b\127" +
    "\uff3b\130\uff3b\135\uff3b\137\uff3b\140\uff3b\001\002\000\054" +
    "\003\uff46\011\uff46\023\uff46\024\uff46\025\uff46\027\uff46\030" +
    "\uff46\033\uff46\053\uff46\056\uff46\060\uff46\061\uff46\062\uff46" +
    "\074\uff46\113\uff46\125\uff46\127\uff46\130\uff46\135\uff46\137" +
    "\uff46\140\uff46\001\002\000\054\003\uff42\011\uff42\023\uff42" +
    "\024\uff42\025\uff42\027\uff42\030\uff42\033\uff42\053\uff42\056" +
    "\uff42\060\uff42\061\uff42\062\uff42\074\uff42\113\uff42\125\uff42" +
    "\127\uff42\130\uff42\135\uff42\137\uff42\140\uff42\001\002\000" +
    "\054\003\uff45\011\uff45\023\uff45\024\uff45\025\uff45\027\uff45" +
    "\030\uff45\033\uff45\053\uff45\056\uff45\060\uff45\061\uff45\062" +
    "\uff45\074\uff45\113\uff45\125\uff45\127\uff45\130\uff45\135\uff45" +
    "\137\uff45\140\uff45\001\002\000\046\011\157\023\051\024" +
    "\043\025\057\027\155\030\146\033\174\053\151\056\uff56" +
    "\060\034\061\025\062\032\074\162\125\165\127\160\130" +
    "\177\135\153\140\163\001\002\000\004\056\u011a\001\002" +
    "\000\056\003\uff3b\011\uff3b\023\uff3b\024\uff3b\025\uff3b\026" +
    "\366\027\uff3b\030\uff3b\033\uff3b\053\uff3b\056\uff3b\060\uff3b" +
    "\061\uff3b\062\uff3b\074\uff3b\113\uff3b\125\uff3b\127\uff3b\130" +
    "\uff3b\135\uff3b\137\uff3b\140\uff3b\001\002\000\054\003\uff43" +
    "\011\uff43\023\uff43\024\uff43\025\uff43\027\uff43\030\uff43\033" +
    "\uff43\053\uff43\056\uff43\060\uff43\061\uff43\062\uff43\074\uff43" +
    "\113\uff43\125\uff43\127\uff43\130\uff43\135\uff43\137\uff43\140" +
    "\uff43\001\002\000\004\057\u014f\001\002\000\022\003\u011e" +
    "\005\050\006\052\007\062\011\055\012\044\035\046\127" +
    "\056\001\002\000\004\013\u013d\001\002\000\020\003\u0121" +
    "\013\u0120\034\064\035\065\036\067\037\066\040\063\001" +
    "\002\000\004\057\u013a\001\002\000\004\057\u0122\001\002" +
    "\000\010\003\u0125\113\u0127\137\u0123\001\002\000\004\014" +
    "\uff21\001\002\000\012\003\u0133\056\u0134\113\u0127\137\u0123" +
    "\001\002\000\004\014\u0131\001\002\000\004\014\u012b\001" +
    "\002\000\010\005\u012a\006\u0129\007\u0128\001\002\000\004" +
    "\014\uff22\001\002\000\004\014\uff23\001\002\000\004\014" +
    "\uff24\001\002\000\056\003\uff56\011\157\023\051\024\043" +
    "\025\057\027\155\030\146\033\174\053\151\056\uff56\057" +
    "\u012d\060\034\061\025\062\032\074\162\113\uff56\125\165" +
    "\127\160\130\177\135\153\137\uff56\140\163\001\002\000" +
    "\012\003\uff1f\056\uff1f\113\uff1f\137\uff1f\001\002\000\046" +
    "\011\157\023\051\024\043\025\057\027\155\030\146\033" +
    "\174\053\151\056\uff56\060\034\061\025\062\032\074\162" +
    "\125\165\127\160\130\177\135\153\140\163\001\002\000" +
    "\012\003\uff27\056\uff27\113\uff27\137\uff27\001\002\000\004" +
    "\056\u0130\001\002\000\012\003\uff20\056\uff20\113\uff20\137" +
    "\uff20\001\002\000\056\003\uff56\011\157\023\051\024\043" +
    "\025\057\027\155\030\146\033\174\053\151\056\uff56\057" +
    "\u012d\060\034\061\025\062\032\074\162\113\uff56\125\165" +
    "\127\160\130\177\135\153\137\uff56\140\163\001\002\000" +
    "\012\003\uff25\056\uff25\113\uff25\137\uff25\001\002\000\004" +
    "\014\u0138\001\002\000\054\003\uff29\011\uff29\023\uff29\024" +
    "\uff29\025\uff29\027\uff29\030\uff29\033\uff29\053\uff29\056\uff29" +
    "\060\uff29\061\uff29\062\uff29\074\uff29\113\uff29\125\uff29\127" +
    "\uff29\130\uff29\135\uff29\137\uff29\140\uff29\001\002\000\004" +
    "\014\u0136\001\002\000\056\003\uff56\011\157\023\051\024" +
    "\043\025\057\027\155\030\146\033\174\053\151\056\uff56" +
    "\057\u012d\060\034\061\025\062\032\074\162\113\uff56\125" +
    "\165\127\160\130\177\135\153\137\uff56\140\163\001\002" +
    "\000\012\003\uff28\056\uff28\113\uff28\137\uff28\001\002\000" +
    "\056\003\uff56\011\157\023\051\024\043\025\057\027\155" +
    "\030\146\033\174\053\151\056\uff56\057\u012d\060\034\061" +
    "\025\062\032\074\162\113\uff56\125\165\127\160\130\177" +
    "\135\153\137\uff56\140\163\001\002\000\012\003\uff26\056" +
    "\uff26\113\uff26\137\uff26\001\002\000\010\003\u0125\113\u0127" +
    "\137\u0123\001\002\000\012\003\u0133\056\u013c\113\u0127\137" +
    "\u0123\001\002\000\054\003\uff2c\011\uff2c\023\uff2c\024\uff2c" +
    "\025\uff2c\027\uff2c\030\uff2c\033\uff2c\053\uff2c\056\uff2c\060" +
    "\uff2c\061\uff2c\062\uff2c\074\uff2c\113\uff2c\125\uff2c\127\uff2c" +
    "\130\uff2c\135\uff2c\137\uff2c\140\uff2c\001\002\000\004\057" +
    "\u013e\001\002\000\010\003\u0141\113\u0143\137\u0140\001\002" +
    "\000\012\003\u0141\056\u014b\113\u0143\137\u0140\001\002\000" +
    "\004\014\ufdc8\001\002\000\004\014\ufdc7\001\002\000\004" +
    "\014\u0147\001\002\000\010\005\u0146\006\u0144\007\u0145\001" +
    "\002\000\004\014\ufdca\001\002\000\004\014\ufdc9\001\002" +
    "\000\004\014\ufdcb\001\002\000\004\003\u0148\001\002\000" +
    "\014\003\ufdcd\056\ufdcd\106\ufdcd\113\ufdcd\137\ufdcd\001\002" +
    "\000\014\003\ufdce\056\ufdce\106\ufdce\113\ufdce\137\ufdce\001" +
    "\002\000\004\014\u014c\001\002\000\054\003\uff2a\011\uff2a" +
    "\023\uff2a\024\uff2a\025\uff2a\027\uff2a\030\uff2a\033\uff2a\053" +
    "\uff2a\056\uff2a\060\uff2a\061\uff2a\062\uff2a\074\uff2a\113\uff2a" +
    "\125\uff2a\127\uff2a\130\uff2a\135\uff2a\137\uff2a\140\uff2a\001" +
    "\002\000\004\003\u014d\001\002\000\014\003\ufdcc\056\ufdcc" +
    "\106\ufdcc\113\ufdcc\137\ufdcc\001\002\000\014\003\ufdcf\056" +
    "\ufdcf\106\ufdcf\113\ufdcf\137\ufdcf\001\002\000\010\003\u0141" +
    "\113\u0143\137\u0140\001\002\000\012\003\u0141\056\u0151\113" +
    "\u0143\137\u0140\001\002\000\054\003\uff2b\011\uff2b\023\uff2b" +
    "\024\uff2b\025\uff2b\027\uff2b\030\uff2b\033\uff2b\053\uff2b\056" +
    "\uff2b\060\uff2b\061\uff2b\062\uff2b\074\uff2b\113\uff2b\125\uff2b" +
    "\127\uff2b\130\uff2b\135\uff2b\137\uff2b\140\uff2b\001\002\000" +
    "\020\003\uff63\056\uff63\060\uff63\061\uff63\062\uff63\120\uff63" +
    "\133\uff63\001\002\000\004\067\uff03\001\002\000\016\034" +
    "\064\035\065\036\067\037\066\040\063\067\uff04\001\002" +
    "\000\054\003\uff4e\011\uff4e\023\uff4e\024\uff4e\025\uff4e\027" +
    "\uff4e\030\uff4e\033\uff4e\053\uff4e\056\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\074\uff4e\113\uff4e\125\uff4e\127\uff4e\130\uff4e\135" +
    "\uff4e\137\uff4e\140\uff4e\001\002\000\004\057\u0166\001\002" +
    "\000\024\003\u0159\005\050\006\052\007\062\011\055\012" +
    "\044\035\046\051\222\127\056\001\002\000\012\003\u015f" +
    "\013\u015e\050\241\052\242\001\002\000\004\013\u015a\001" +
    "\002\000\004\057\u015b\001\002\000\046\011\157\023\051" +
    "\024\043\025\057\027\155\030\146\033\174\053\151\056" +
    "\uff56\060\034\061\025\062\032\074\162\125\165\127\160" +
    "\130\177\135\153\140\163\001\002\000\004\056\u015d\001" +
    "\002\000\054\003\uff2e\011\uff2e\023\uff2e\024\uff2e\025\uff2e" +
    "\027\uff2e\030\uff2e\033\uff2e\053\uff2e\056\uff2e\060\uff2e\061" +
    "\uff2e\062\uff2e\074\uff2e\113\uff2e\125\uff2e\127\uff2e\130\uff2e" +
    "\135\uff2e\137\uff2e\140\uff2e\001\002\000\004\057\u0163\001" +
    "\002\000\004\057\u0160\001\002\000\046\011\157\023\051" +
    "\024\043\025\057\027\155\030\146\033\174\053\151\056" +
    "\uff56\060\034\061\025\062\032\074\162\125\165\127\160" +
    "\130\177\135\153\140\163\001\002\000\004\056\u0162\001" +
    "\002\000\054\003\uff2d\011\uff2d\023\uff2d\024\uff2d\025\uff2d" +
    "\027\uff2d\030\uff2d\033\uff2d\053\uff2d\056\uff2d\060\uff2d\061" +
    "\uff2d\062\uff2d\074\uff2d\113\uff2d\125\uff2d\127\uff2d\130\uff2d" +
    "\135\uff2d\137\uff2d\140\uff2d\001\002\000\046\011\157\023" +
    "\051\024\043\025\057\027\155\030\146\033\174\053\151" +
    "\056\uff56\060\034\061\025\062\032\074\162\125\165\127" +
    "\160\130\177\135\153\140\163\001\002\000\004\056\u0165" +
    "\001\002\000\054\003\uff30\011\uff30\023\uff30\024\uff30\025" +
    "\uff30\027\uff30\030\uff30\033\uff30\053\uff30\056\uff30\060\uff30" +
    "\061\uff30\062\uff30\074\uff30\113\uff30\125\uff30\127\uff30\130" +
    "\uff30\135\uff30\137\uff30\140\uff30\001\002\000\046\011\157" +
    "\023\051\024\043\025\057\027\155\030\146\033\174\053" +
    "\151\056\uff56\060\034\061\025\062\032\074\162\125\165" +
    "\127\160\130\177\135\153\140\163\001\002\000\004\056" +
    "\u0168\001\002\000\054\003\uff2f\011\uff2f\023\uff2f\024\uff2f" +
    "\025\uff2f\027\uff2f\030\uff2f\033\uff2f\053\uff2f\056\uff2f\060" +
    "\uff2f\061\uff2f\062\uff2f\074\uff2f\113\uff2f\125\uff2f\127\uff2f" +
    "\130\uff2f\135\uff2f\137\uff2f\140\uff2f\001\002\000\006\013" +
    "\uff58\021\uff58\001\002\000\006\003\u0172\012\u0173\001\002" +
    "\000\004\012\u016c\001\002\000\014\003\127\013\uff5e\060" +
    "\034\061\025\062\032\001\002\000\004\013\u016e\001\002" +
    "\000\004\057\u016f\001\002\000\046\011\157\023\051\024" +
    "\043\025\057\027\155\030\146\033\174\053\151\056\uff56" +
    "\060\034\061\025\062\032\074\162\125\165\127\160\130" +
    "\177\135\153\140\163\001\002\000\004\056\u0171\001\002" +
    "\000\020\003\uff62\056\uff62\060\uff62\061\uff62\062\uff62\120" +
    "\uff62\133\uff62\001\002\000\004\057\u017a\001\002\000\014" +
    "\003\127\013\uff5e\060\034\061\025\062\032\001\002\000" +
    "\004\013\u0175\001\002\000\006\003\u0176\057\u0177\001\002" +
    "\000\020\003\uff60\056\uff60\060\uff60\061\uff60\062\uff60\120" +
    "\uff60\133\uff60\001\002\000\046\011\157\023\051\024\043" +
    "\025\057\027\155\030\146\033\174\053\151\056\uff56\060" +
    "\034\061\025\062\032\074\162\125\165\127\160\130\177" +
    "\135\153\140\163\001\002\000\004\056\u0179\001\002\000" +
    "\020\003\uff64\056\uff64\060\uff64\061\uff64\062\uff64\120\uff64" +
    "\133\uff64\001\002\000\046\011\157\023\051\024\043\025" +
    "\057\027\155\030\146\033\174\053\151\056\uff56\060\034" +
    "\061\025\062\032\074\162\125\165\127\160\130\177\135" +
    "\153\140\163\001\002\000\004\056\u017c\001\002\000\020" +
    "\003\uff61\056\uff61\060\uff61\061\uff61\062\uff61\120\uff61\133" +
    "\uff61\001\002\000\020\003\uff68\056\uff68\060\uff68\061\uff68" +
    "\062\uff68\120\uff68\133\uff68\001\002\000\012\003\uff6c\111" +
    "\uff6c\126\uff6c\133\uff6c\001\002\000\012\003\uff6b\111\uff6b" +
    "\126\uff6b\133\uff6b\001\002\000\020\003\ufd9b\056\uff69\060" +
    "\034\061\025\062\032\120\ufd9b\133\014\001\002\000\004" +
    "\056\u0182\001\002\000\012\003\uff6e\111\uff6e\126\uff6e\133" +
    "\uff6e\001\002\000\004\057\u0184\001\002\000\020\003\ufd9b" +
    "\056\uff69\060\034\061\025\062\032\120\ufd9b\133\014\001" +
    "\002\000\004\056\u0186\001\002\000\012\003\uff6d\111\uff6d" +
    "\126\uff6d\133\uff6d\001\002\000\012\003\uff70\111\uff70\126" +
    "\uff70\133\uff70\001\002\000\004\004\u0316\001\002\000\004" +
    "\143\u018b\001\002\000\004\002\000\001\002\000\020\060" +
    "\ufe80\061\ufe80\062\ufe80\071\u018d\120\ufe80\123\ufe80\131\ufe80" +
    "\001\002\000\020\060\ufe81\061\ufe81\062\ufe81\071\u018d\120" +
    "\ufe81\123\ufe81\131\ufe81\001\002\000\006\003\u0301\141\u0302" +
    "\001\002\000\016\060\ufe6e\061\ufe6e\062\ufe6e\120\ufe6e\123" +
    "\ufe6e\131\u0190\001\002\000\020\060\ufe7e\061\ufe7e\062\ufe7e" +
    "\071\ufe7e\120\ufe7e\123\ufe7e\131\ufe7e\001\002\000\012\003" +
    "\u02f7\060\034\061\025\062\032\001\002\000\014\060\034" +
    "\061\025\062\032\120\ufe64\123\u0195\001\002\000\016\060" +
    "\ufe6c\061\ufe6c\062\ufe6c\120\ufe6c\123\ufe6c\131\ufe6c\001\002" +
    "\000\016\060\ufe6f\061\ufe6f\062\ufe6f\120\ufe6f\123\ufe6f\131" +
    "\u0190\001\002\000\016\060\ufe6d\061\ufe6d\062\ufe6d\120\ufe6d" +
    "\123\ufe6d\131\ufe6d\001\002\000\006\003\u02c6\072\u02f5\001" +
    "\002\000\014\060\034\061\025\062\032\120\ufe65\123\u0195" +
    "\001\002\000\004\120\u01dd\001\002\000\006\003\u01da\067" +
    "\u01db\001\002\000\006\003\u019c\011\u019b\001\002\000\014" +
    "\060\ufe62\061\ufe62\062\ufe62\120\ufe62\123\ufe62\001\002\000" +
    "\014\003\ufe4f\021\ufe4f\043\u01a2\063\u01cf\067\ufe4f\001\002" +
    "\000\006\003\ufe5c\067\ufe5c\001\002\000\006\003\ufe5d\067" +
    "\ufe5d\001\002\000\010\003\ufe5f\021\u019f\067\ufe5f\001\002" +
    "\000\006\003\u01a1\011\u01a0\001\002\000\012\003\ufe4f\021" +
    "\ufe4f\043\u01a2\067\ufe4f\001\002\000\010\003\ufe52\021\ufe52" +
    "\067\ufe52\001\002\000\026\003\u01ac\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5" +
    "\001\002\000\010\003\ufe54\021\ufe54\067\ufe54\001\002\000" +
    "\024\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046" +
    "\100\u01a9\101\u01a6\123\u01a5\001\002\000\004\072\u01c5\001" +
    "\002\000\004\072\u01c0\001\002\000\046\003\ufdbf\013\ufdbf" +
    "\021\ufdbf\034\ufdbf\035\ufdbf\036\ufdbf\037\ufdbf\040\ufdbf\041" +
    "\ufdbf\042\ufdbf\044\ufdbf\045\ufdbf\046\ufdbf\047\ufdbf\050\ufdbf" +
    "\052\ufdbf\064\ufdbf\067\ufdbf\001\002\000\022\003\ufe51\021" +
    "\ufe51\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\067\ufe51" +
    "\001\002\000\004\072\u01ad\001\002\000\046\003\ufdc0\013" +
    "\ufdc0\021\ufdc0\034\ufdc0\035\ufdc0\036\ufdc0\037\ufdc0\040\ufdc0" +
    "\041\ufdc0\042\ufdc0\044\ufdc0\045\ufdc0\046\ufdc0\047\ufdc0\050" +
    "\ufdc0\052\ufdc0\064\ufdc0\067\ufdc0\001\002\000\046\003\ufd9f" +
    "\013\ufd9f\021\ufd9f\034\ufd9f\035\ufd9f\036\ufd9f\037\ufd9f\040" +
    "\ufd9f\041\ufd9f\042\ufd9f\044\ufd9f\045\ufd9f\046\ufd9f\047\ufd9f" +
    "\050\ufd9f\052\ufd9f\064\ufd9f\067\ufd9f\001\002\000\010\003" +
    "\ufe50\021\ufe50\067\ufe50\001\002\000\004\011\u01ae\001\002" +
    "\000\004\012\u01af\001\002\000\026\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\013\ufdb1\035\046\100\u01a9\101\u01a6" +
    "\123\u01a5\001\002\000\004\013\u01bf\001\002\000\022\003" +
    "\ufdaf\013\ufdaf\021\ufdaf\034\u01b6\035\u01b7\036\u01b9\037\u01b8" +
    "\040\u01b5\001\002\000\010\003\ufdb2\013\ufdb2\021\u01b3\001" +
    "\002\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\022\003" +
    "\ufdb0\013\ufdb0\021\ufdb0\034\u01b6\035\u01b7\036\u01b9\037\u01b8" +
    "\040\u01b5\001\002\000\024\005\050\006\052\007\062\011" +
    "\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5\001\002" +
    "\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\024\005\050" +
    "\006\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101" +
    "\u01a6\123\u01a5\001\002\000\024\005\050\006\052\007\062" +
    "\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5\001" +
    "\002\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\046\003" +
    "\ufdc3\013\ufdc3\021\ufdc3\034\ufdc3\035\ufdc3\036\ufdc3\037\ufdc3" +
    "\040\ufdc3\041\ufdc3\042\ufdc3\044\ufdc3\045\ufdc3\046\ufdc3\047" +
    "\ufdc3\050\ufdc3\052\ufdc3\064\ufdc3\067\ufdc3\001\002\000\046" +
    "\003\ufdc4\013\ufdc4\021\ufdc4\034\ufdc4\035\ufdc4\036\ufdc4\037" +
    "\ufdc4\040\ufdc4\041\ufdc4\042\ufdc4\044\ufdc4\045\ufdc4\046\ufdc4" +
    "\047\ufdc4\050\ufdc4\052\ufdc4\064\ufdc4\067\ufdc4\001\002\000" +
    "\046\003\ufdc5\013\ufdc5\021\ufdc5\034\ufdc5\035\ufdc5\036\u01b9" +
    "\037\u01b8\040\u01b5\041\ufdc5\042\ufdc5\044\ufdc5\045\ufdc5\046" +
    "\ufdc5\047\ufdc5\050\ufdc5\052\ufdc5\064\ufdc5\067\ufdc5\001\002" +
    "\000\046\003\ufdc6\013\ufdc6\021\ufdc6\034\ufdc6\035\ufdc6\036" +
    "\u01b9\037\u01b8\040\u01b5\041\ufdc6\042\ufdc6\044\ufdc6\045\ufdc6" +
    "\046\ufdc6\047\ufdc6\050\ufdc6\052\ufdc6\064\ufdc6\067\ufdc6\001" +
    "\002\000\046\003\ufdc2\013\ufdc2\021\ufdc2\034\ufdc2\035\ufdc2" +
    "\036\ufdc2\037\ufdc2\040\ufdc2\041\ufdc2\042\ufdc2\044\ufdc2\045" +
    "\ufdc2\046\ufdc2\047\ufdc2\050\ufdc2\052\ufdc2\064\ufdc2\067\ufdc2" +
    "\001\002\000\046\003\ufdb4\013\ufdb4\021\ufdb4\034\ufdb4\035" +
    "\ufdb4\036\ufdb4\037\ufdb4\040\ufdb4\041\ufdb4\042\ufdb4\044\ufdb4" +
    "\045\ufdb4\046\ufdb4\047\ufdb4\050\ufdb4\052\ufdb4\064\ufdb4\067" +
    "\ufdb4\001\002\000\004\011\u01c1\001\002\000\004\012\u01c2" +
    "\001\002\000\026\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\013\ufdb1\035\046\100\u01a9\101\u01a6\123\u01a5\001\002" +
    "\000\004\013\u01c4\001\002\000\046\003\ufdb3\013\ufdb3\021" +
    "\ufdb3\034\ufdb3\035\ufdb3\036\ufdb3\037\ufdb3\040\ufdb3\041\ufdb3" +
    "\042\ufdb3\044\ufdb3\045\ufdb3\046\ufdb3\047\ufdb3\050\ufdb3\052" +
    "\ufdb3\064\ufdb3\067\ufdb3\001\002\000\004\011\u01c6\001\002" +
    "\000\004\072\u01c7\001\002\000\004\011\u01c8\001\002\000" +
    "\004\012\u01c9\001\002\000\026\005\050\006\052\007\062" +
    "\011\u01ab\012\u01a4\013\ufdb1\035\046\100\u01a9\101\u01a6\123" +
    "\u01a5\001\002\000\004\013\u01cb\001\002\000\046\003\ufdb5" +
    "\013\ufdb5\021\ufdb5\034\ufdb5\035\ufdb5\036\ufdb5\037\ufdb5\040" +
    "\ufdb5\041\ufdb5\042\ufdb5\044\ufdb5\045\ufdb5\046\ufdb5\047\ufdb5" +
    "\050\ufdb5\052\ufdb5\064\ufdb5\067\ufdb5\001\002\000\016\013" +
    "\u01cd\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\001\002" +
    "\000\046\003\ufdc1\013\ufdc1\021\ufdc1\034\ufdc1\035\ufdc1\036" +
    "\ufdc1\037\ufdc1\040\ufdc1\041\ufdc1\042\ufdc1\044\ufdc1\045\ufdc1" +
    "\046\ufdc1\047\ufdc1\050\ufdc1\052\ufdc1\064\ufdc1\067\ufdc1\001" +
    "\002\000\014\003\ufe59\013\ufe59\043\ufe59\063\u01d5\067\ufe59" +
    "\001\002\000\026\003\u01d2\005\050\006\052\007\062\011" +
    "\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5\001\002" +
    "\000\010\003\ufe53\021\ufe53\067\ufe53\001\002\000\016\034" +
    "\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\064\u01d4\001\002" +
    "\000\004\064\u01d3\001\002\000\014\003\ufe56\013\ufe56\043" +
    "\ufe56\063\ufe56\067\ufe56\001\002\000\014\003\ufe57\013\ufe57" +
    "\043\ufe57\063\ufe57\067\ufe57\001\002\000\026\003\u01d7\005" +
    "\050\006\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a9" +
    "\101\u01a6\123\u01a5\001\002\000\016\034\u01b6\035\u01b7\036" +
    "\u01b9\037\u01b8\040\u01b5\064\u01d9\001\002\000\004\064\u01d8" +
    "\001\002\000\014\003\ufe55\013\ufe55\043\ufe55\063\ufe55\067" +
    "\ufe55\001\002\000\014\003\ufe58\013\ufe58\043\ufe58\063\ufe58" +
    "\067\ufe58\001\002\000\014\060\ufe60\061\ufe60\062\ufe60\120" +
    "\ufe60\123\ufe60\001\002\000\014\060\ufe61\061\ufe61\062\ufe61" +
    "\120\ufe61\123\ufe61\001\002\000\004\002\ufe82\001\002\000" +
    "\006\003\u01de\124\u01df\001\002\000\046\002\ufe40\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\006\003\u01e0\012" +
    "\u01e1\001\002\000\046\002\ufe40\011\u01f2\027\u01f0\030\u01fb" +
    "\033\u01ec\060\034\061\025\062\032\065\u01f5\066\u01e7\074" +
    "\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6" +
    "\136\u01ea\001\002\000\006\003\u01e3\013\u01e2\001\002\000" +
    "\006\003\u02ec\057\u02ed\001\002\000\046\002\ufe40\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\067\ufe33\001" +
    "\002\000\052\002\ufe3a\003\ufe3a\011\ufe3a\027\ufe3a\030\ufe3a" +
    "\033\ufe3a\056\ufe3a\060\ufe3a\061\ufe3a\062\ufe3a\065\ufe3a\066" +
    "\ufe3a\074\ufe3a\100\ufe3a\101\ufe3a\123\ufe3a\125\ufe3a\132\ufe3a" +
    "\135\ufe3a\136\ufe3a\001\002\000\052\002\ufe3d\003\ufe3d\011" +
    "\ufe3d\027\ufe3d\030\ufe3d\033\ufe3d\056\ufe3d\060\ufe3d\061\ufe3d" +
    "\062\ufe3d\065\ufe3d\066\ufe3d\074\ufe3d\100\ufe3d\101\ufe3d\123" +
    "\ufe3d\125\ufe3d\132\ufe3d\135\ufe3d\136\ufe3d\001\002\000\006" +
    "\003\u02d5\012\u02d6\001\002\000\006\003\u02c6\072\u02c5\001" +
    "\002\000\052\002\ufe3c\003\ufe3c\011\ufe3c\027\ufe3c\030\ufe3c" +
    "\033\ufe3c\056\ufe3c\060\ufe3c\061\ufe3c\062\ufe3c\065\ufe3c\066" +
    "\ufe3c\074\ufe3c\100\ufe3c\101\ufe3c\123\ufe3c\125\ufe3c\132\ufe3c" +
    "\135\ufe3c\136\ufe3c\001\002\000\006\003\u02c1\012\u02c2\001" +
    "\002\000\004\067\ufe32\001\002\000\004\012\u02a5\001\002" +
    "\000\004\002\ufe44\001\002\000\004\067\ufe31\001\002\000" +
    "\004\067\ufe37\001\002\000\006\003\u0274\012\u0275\001\002" +
    "\000\004\067\ufe36\001\002\000\012\003\ufe2c\013\ufe2c\043" +
    "\ufe2c\063\u01cf\001\002\000\052\002\ufe41\003\ufe41\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\056\ufe41\060\034\061\025\062" +
    "\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8" +
    "\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\067" +
    "\ufdfd\001\002\000\006\003\u0255\012\u0256\001\002\000\006" +
    "\003\u0241\012\u0242\001\002\000\006\003\u023d\012\u023e\001" +
    "\002\000\052\002\ufe39\003\ufe39\011\ufe39\027\ufe39\030\ufe39" +
    "\033\ufe39\056\ufe39\060\ufe39\061\ufe39\062\ufe39\065\ufe39\066" +
    "\ufe39\074\ufe39\100\ufe39\101\ufe39\123\ufe39\125\ufe39\132\ufe39" +
    "\135\ufe39\136\ufe39\001\002\000\004\067\ufe30\001\002\000" +
    "\004\067\u023c\001\002\000\006\003\u0228\012\u0229\001\002" +
    "\000\052\002\ufe3e\003\ufe3e\011\ufe3e\027\ufe3e\030\ufe3e\033" +
    "\ufe3e\056\ufe3e\060\ufe3e\061\ufe3e\062\ufe3e\065\ufe3e\066\ufe3e" +
    "\074\ufe3e\100\ufe3e\101\ufe3e\123\ufe3e\125\ufe3e\132\ufe3e\135" +
    "\ufe3e\136\ufe3e\001\002\000\004\067\ufe35\001\002\000\052" +
    "\002\ufe3b\003\ufe3b\011\ufe3b\027\ufe3b\030\ufe3b\033\ufe3b\056" +
    "\ufe3b\060\ufe3b\061\ufe3b\062\ufe3b\065\ufe3b\066\ufe3b\074\ufe3b" +
    "\100\ufe3b\101\ufe3b\123\ufe3b\125\ufe3b\132\ufe3b\135\ufe3b\136" +
    "\ufe3b\001\002\000\004\067\ufe34\001\002\000\006\003\u0224" +
    "\043\u0225\001\002\000\004\057\u0203\001\002\000\010\003" +
    "\ufe2b\013\ufe2b\043\ufe2b\001\002\000\050\003\ufe40\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062" +
    "\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8" +
    "\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\006\003" +
    "\u0205\056\u0206\001\002\000\052\002\ufdd6\003\ufdd6\011\ufdd6" +
    "\027\ufdd6\030\ufdd6\033\ufdd6\056\ufdd6\060\ufdd6\061\ufdd6\062" +
    "\ufdd6\065\ufdd6\066\ufdd6\074\ufdd6\100\ufdd6\101\ufdd6\123\ufdd6" +
    "\125\ufdd6\132\ufdd6\135\ufdd6\136\ufdd6\001\002\000\006\003" +
    "\u0207\030\u0208\001\002\000\052\002\ufdd7\003\ufdd7\011\ufdd7" +
    "\027\ufdd7\030\ufdd7\033\ufdd7\056\ufdd7\060\ufdd7\061\ufdd7\062" +
    "\ufdd7\065\ufdd7\066\ufdd7\074\ufdd7\100\ufdd7\101\ufdd7\123\ufdd7" +
    "\125\ufdd7\132\ufdd7\135\ufdd7\136\ufdd7\001\002\000\006\003" +
    "\u0209\012\u020a\001\002\000\052\002\ufdd8\003\ufdd8\011\ufdd8" +
    "\027\ufdd8\030\ufdd8\033\ufdd8\056\ufdd8\060\ufdd8\061\ufdd8\062" +
    "\ufdd8\065\ufdd8\066\ufdd8\074\ufdd8\100\ufdd8\101\ufdd8\123\ufdd8" +
    "\125\ufdd8\132\ufdd8\135\ufdd8\136\ufdd8\001\002\000\030\003" +
    "\u020d\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046" +
    "\051\u020e\100\u01a9\101\u01a6\123\u01a5\001\002\000\030\034" +
    "\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\041\u021d\042\u021c" +
    "\044\u0219\045\u0218\046\u021b\047\u021a\001\002\000\012\003" +
    "\u0215\013\u0214\050\u0210\052\u0211\001\002\000\052\002\ufdd9" +
    "\003\ufdd9\011\ufdd9\027\ufdd9\030\ufdd9\033\ufdd9\056\ufdd9\060" +
    "\ufdd9\061\ufdd9\062\ufdd9\065\ufdd9\066\ufdd9\074\ufdd9\100\ufdd9" +
    "\101\ufdd9\123\ufdd9\125\ufdd9\132\ufdd9\135\ufdd9\136\ufdd9\001" +
    "\002\000\026\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\051\u020e\100\u01a9\101\u01a6\123\u01a5\001\002\000" +
    "\014\003\ufdb6\013\ufdb6\050\ufdb6\052\ufdb6\067\ufdb6\001\002" +
    "\000\026\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\051\u020e\100\u01a9\101\u01a6\123\u01a5\001\002\000\026" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046\051" +
    "\u020e\100\u01a9\101\u01a6\123\u01a5\001\002\000\014\003\ufdb7" +
    "\013\ufdb7\050\u0210\052\ufdb7\067\ufdb7\001\002\000\014\003" +
    "\ufdb8\013\ufdb8\050\ufdb8\052\ufdb8\067\ufdb8\001\002\000\006" +
    "\003\u0216\067\u0217\001\002\000\052\002\ufdda\003\ufdda\011" +
    "\ufdda\027\ufdda\030\ufdda\033\ufdda\056\ufdda\060\ufdda\061\ufdda" +
    "\062\ufdda\065\ufdda\066\ufdda\074\ufdda\100\ufdda\101\ufdda\123" +
    "\ufdda\125\ufdda\132\ufdda\135\ufdda\136\ufdda\001\002\000\052" +
    "\002\ufddb\003\ufddb\011\ufddb\027\ufddb\030\ufddb\033\ufddb\056" +
    "\ufddb\060\ufddb\061\ufddb\062\ufddb\065\ufddb\066\ufddb\074\ufddb" +
    "\100\ufddb\101\ufddb\123\ufddb\125\ufddb\132\ufddb\135\ufddb\136" +
    "\ufddb\001\002\000\052\002\ufddc\003\ufddc\011\ufddc\027\ufddc" +
    "\030\ufddc\033\ufddc\056\ufddc\060\ufddc\061\ufddc\062\ufddc\065" +
    "\ufddc\066\ufddc\074\ufddc\100\ufddc\101\ufddc\123\ufddc\125\ufddc" +
    "\132\ufddc\135\ufddc\136\ufddc\001\002\000\024\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6" +
    "\123\u01a5\001\002\000\024\005\050\006\052\007\062\011" +
    "\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5\001\002" +
    "\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\024\005\050" +
    "\006\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101" +
    "\u01a6\123\u01a5\001\002\000\024\005\050\006\052\007\062" +
    "\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5\001" +
    "\002\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\026\003" +
    "\ufdbe\013\ufdbe\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5" +
    "\050\ufdbe\052\ufdbe\067\ufdbe\001\002\000\026\003\ufdbd\013" +
    "\ufdbd\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\050\ufdbd" +
    "\052\ufdbd\067\ufdbd\001\002\000\026\003\ufdba\013\ufdba\034" +
    "\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\050\ufdba\052\ufdba" +
    "\067\ufdba\001\002\000\026\003\ufdb9\013\ufdb9\034\u01b6\035" +
    "\u01b7\036\u01b9\037\u01b8\040\u01b5\050\ufdb9\052\ufdb9\067\ufdb9" +
    "\001\002\000\026\003\ufdbc\013\ufdbc\034\u01b6\035\u01b7\036" +
    "\u01b9\037\u01b8\040\u01b5\050\ufdbc\052\ufdbc\067\ufdbc\001\002" +
    "\000\026\003\ufdbb\013\ufdbb\034\u01b6\035\u01b7\036\u01b9\037" +
    "\u01b8\040\u01b5\050\ufdbb\052\ufdbb\067\ufdbb\001\002\000\004" +
    "\067\ufe2d\001\002\000\026\003\u0227\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123\u01a5" +
    "\001\002\000\016\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040" +
    "\u01b5\067\ufe2f\001\002\000\004\067\ufe2e\001\002\000\004" +
    "\057\u0239\001\002\000\030\003\u022b\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a9\101\u01a6" +
    "\123\u01a5\001\002\000\012\003\u0230\013\u022f\050\u0210\052" +
    "\u0211\001\002\000\004\057\u022c\001\002\000\046\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062" +
    "\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8" +
    "\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056" +
    "\u022e\001\002\000\052\002\ufdde\003\ufdde\011\ufdde\027\ufdde" +
    "\030\ufdde\033\ufdde\056\ufdde\060\ufdde\061\ufdde\062\ufdde\065" +
    "\ufdde\066\ufdde\074\ufdde\100\ufdde\101\ufdde\123\ufdde\125\ufdde" +
    "\132\ufdde\135\ufdde\136\ufdde\001\002\000\006\003\u0234\057" +
    "\u0235\001\002\000\004\057\u0231\001\002\000\046\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062" +
    "\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8" +
    "\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056" +
    "\u0233\001\002\000\052\002\ufddf\003\ufddf\011\ufddf\027\ufddf" +
    "\030\ufddf\033\ufddf\056\ufddf\060\ufddf\061\ufddf\062\ufddf\065" +
    "\ufddf\066\ufddf\074\ufddf\100\ufddf\101\ufddf\123\ufddf\125\ufddf" +
    "\132\ufddf\135\ufddf\136\ufddf\001\002\000\052\002\ufde0\003" +
    "\ufde0\011\ufde0\027\ufde0\030\ufde0\033\ufde0\056\ufde0\060\ufde0" +
    "\061\ufde0\062\ufde0\065\ufde0\066\ufde0\074\ufde0\100\ufde0\101" +
    "\ufde0\123\ufde0\125\ufde0\132\ufde0\135\ufde0\136\ufde0\001\002" +
    "\000\050\003\ufe40\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056" +
    "\ufe40\060\034\061\025\062\032\065\u01f5\066\u01e7\074\u0201" +
    "\100\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136" +
    "\u01ea\001\002\000\006\003\u0237\056\u0238\001\002\000\052" +
    "\002\ufde1\003\ufde1\011\ufde1\027\ufde1\030\ufde1\033\ufde1\056" +
    "\ufde1\060\ufde1\061\ufde1\062\ufde1\065\ufde1\066\ufde1\074\ufde1" +
    "\100\ufde1\101\ufde1\123\ufde1\125\ufde1\132\ufde1\135\ufde1\136" +
    "\ufde1\001\002\000\052\002\ufde2\003\ufde2\011\ufde2\027\ufde2" +
    "\030\ufde2\033\ufde2\056\ufde2\060\ufde2\061\ufde2\062\ufde2\065" +
    "\ufde2\066\ufde2\074\ufde2\100\ufde2\101\ufde2\123\ufde2\125\ufde2" +
    "\132\ufde2\135\ufde2\136\ufde2\001\002\000\046\011\u01f2\027" +
    "\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062\032" +
    "\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125" +
    "\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u023b" +
    "\001\002\000\052\002\ufddd\003\ufddd\011\ufddd\027\ufddd\030" +
    "\ufddd\033\ufddd\056\ufddd\060\ufddd\061\ufddd\062\ufddd\065\ufddd" +
    "\066\ufddd\074\ufddd\100\ufddd\101\ufddd\123\ufddd\125\ufddd\132" +
    "\ufddd\135\ufddd\136\ufddd\001\002\000\052\002\ufe38\003\ufe38" +
    "\011\ufe38\027\ufe38\030\ufe38\033\ufe38\056\ufe38\060\ufe38\061" +
    "\ufe38\062\ufe38\065\ufe38\066\ufe38\074\ufe38\100\ufe38\101\ufe38" +
    "\123\ufe38\125\ufe38\132\ufe38\135\ufe38\136\ufe38\001\002\000" +
    "\004\067\ufdfe\001\002\000\006\003\u0240\013\u023f\001\002" +
    "\000\004\067\ufe00\001\002\000\004\067\ufdff\001\002\000" +
    "\004\057\u0252\001\002\000\026\003\u0244\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123" +
    "\u01a5\001\002\000\020\003\u0249\013\u0248\034\u01b6\035\u01b7" +
    "\036\u01b9\037\u01b8\040\u01b5\001\002\000\004\057\u0245\001" +
    "\002\000\010\003\u0141\113\u0143\137\u0140\001\002\000\012" +
    "\003\u0141\056\u0247\113\u0143\137\u0140\001\002\000\052\002" +
    "\ufdd1\003\ufdd1\011\ufdd1\027\ufdd1\030\ufdd1\033\ufdd1\056\ufdd1" +
    "\060\ufdd1\061\ufdd1\062\ufdd1\065\ufdd1\066\ufdd1\074\ufdd1\100" +
    "\ufdd1\101\ufdd1\123\ufdd1\125\ufdd1\132\ufdd1\135\ufdd1\136\ufdd1" +
    "\001\002\000\004\057\u024d\001\002\000\004\057\u024a\001" +
    "\002\000\010\003\u0141\113\u0143\137\u0140\001\002\000\012" +
    "\003\u0141\056\u024c\113\u0143\137\u0140\001\002\000\052\002" +
    "\ufdd2\003\ufdd2\011\ufdd2\027\ufdd2\030\ufdd2\033\ufdd2\056\ufdd2" +
    "\060\ufdd2\061\ufdd2\062\ufdd2\065\ufdd2\066\ufdd2\074\ufdd2\100" +
    "\ufdd2\101\ufdd2\123\ufdd2\125\ufdd2\132\ufdd2\135\ufdd2\136\ufdd2" +
    "\001\002\000\010\003\u024f\113\u0143\137\u0140\001\002\000" +
    "\012\003\u0250\056\u0251\113\u0143\137\u0140\001\002\000\054" +
    "\002\ufdd3\003\ufdd3\011\ufdd3\014\ufdc7\027\ufdd3\030\ufdd3\033" +
    "\ufdd3\056\ufdd3\060\ufdd3\061\ufdd3\062\ufdd3\065\ufdd3\066\ufdd3" +
    "\074\ufdd3\100\ufdd3\101\ufdd3\123\ufdd3\125\ufdd3\132\ufdd3\135" +
    "\ufdd3\136\ufdd3\001\002\000\054\002\ufdd4\003\ufdd4\011\ufdd4" +
    "\014\ufdc7\027\ufdd4\030\ufdd4\033\ufdd4\056\ufdd4\060\ufdd4\061" +
    "\ufdd4\062\ufdd4\065\ufdd4\066\ufdd4\074\ufdd4\100\ufdd4\101\ufdd4" +
    "\123\ufdd4\125\ufdd4\132\ufdd4\135\ufdd4\136\ufdd4\001\002\000" +
    "\052\002\ufdd5\003\ufdd5\011\ufdd5\027\ufdd5\030\ufdd5\033\ufdd5" +
    "\056\ufdd5\060\ufdd5\061\ufdd5\062\ufdd5\065\ufdd5\066\ufdd5\074" +
    "\ufdd5\100\ufdd5\101\ufdd5\123\ufdd5\125\ufdd5\132\ufdd5\135\ufdd5" +
    "\136\ufdd5\001\002\000\010\003\u0141\113\u0143\137\u0140\001" +
    "\002\000\012\003\u0141\056\u0254\113\u0143\137\u0140\001\002" +
    "\000\052\002\ufdd0\003\ufdd0\011\ufdd0\027\ufdd0\030\ufdd0\033" +
    "\ufdd0\056\ufdd0\060\ufdd0\061\ufdd0\062\ufdd0\065\ufdd0\066\ufdd0" +
    "\074\ufdd0\100\ufdd0\101\ufdd0\123\ufdd0\125\ufdd0\132\ufdd0\135" +
    "\ufdd0\136\ufdd0\001\002\000\004\067\ufe25\001\002\000\016" +
    "\003\u025d\007\u0260\020\u0257\102\u0259\103\u025a\104\u025f\001" +
    "\002\000\022\003\ufe0f\007\ufe0f\013\ufe0f\020\ufe0f\021\ufe0f" +
    "\102\ufe0f\103\ufe0f\104\ufe0f\001\002\000\022\003\ufe21\007" +
    "\ufe21\013\ufe21\020\ufe21\021\ufe21\102\ufe21\103\ufe21\104\ufe21" +
    "\001\002\000\022\003\ufe0c\007\ufe0c\013\ufe0c\020\ufe0c\021" +
    "\ufe0c\102\ufe0c\103\ufe0c\104\ufe0c\001\002\000\022\003\ufe0d" +
    "\007\ufe0d\013\ufe0d\020\ufe0d\021\ufe0d\102\ufe0d\103\ufe0d\104" +
    "\ufe0d\001\002\000\022\003\ufe11\007\ufe11\013\ufe11\020\ufe11" +
    "\021\ufe11\102\ufe11\103\ufe11\104\ufe11\001\002\000\022\003" +
    "\u0263\007\u0260\013\u0264\020\u0257\021\u0262\102\u0259\103\u025a" +
    "\104\u025f\001\002\000\004\067\ufe26\001\002\000\022\003" +
    "\ufe10\007\ufe10\013\ufe10\020\ufe10\021\ufe10\102\ufe10\103\ufe10" +
    "\104\ufe10\001\002\000\022\003\ufe0b\007\ufe0b\013\ufe0b\020" +
    "\ufe0b\021\ufe0b\102\ufe0b\103\ufe0b\104\ufe0b\001\002\000\022" +
    "\003\ufe0e\007\ufe0e\013\ufe0e\020\ufe0e\021\ufe0e\102\ufe0e\103" +
    "\ufe0e\104\ufe0e\001\002\000\022\003\ufe22\007\ufe22\013\ufe22" +
    "\020\ufe22\021\ufe22\102\ufe22\103\ufe22\104\ufe22\001\002\000" +
    "\030\003\u0268\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\070\u0266\100\u01a9\101\u01a6\123\u01a5\001\002\000" +
    "\004\067\ufe27\001\002\000\004\067\ufe29\001\002\000\022" +
    "\003\ufe1f\013\ufe1f\021\ufe1f\034\u01b6\035\u01b7\036\u01b9\037" +
    "\u01b8\040\u01b5\001\002\000\026\003\u0272\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6\123" +
    "\u01a5\001\002\000\010\003\u026b\013\u026a\021\u0269\001\002" +
    "\000\004\067\ufe23\001\002\000\030\003\u026e\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\070\u026d\100\u01a9" +
    "\101\u01a6\123\u01a5\001\002\000\004\067\ufe28\001\002\000" +
    "\004\067\ufe24\001\002\000\022\003\ufe20\013\ufe20\021\ufe20" +
    "\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\001\002\000" +
    "\026\003\u0270\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\010\003" +
    "\ufe1a\013\ufe1a\021\ufe1a\001\002\000\022\003\ufe1e\013\ufe1e" +
    "\021\ufe1e\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\001" +
    "\002\000\010\003\ufe1b\013\ufe1b\021\ufe1b\001\002\000\022" +
    "\003\ufe1d\013\ufe1d\021\ufe1d\034\u01b6\035\u01b7\036\u01b9\037" +
    "\u01b8\040\u01b5\001\002\000\010\003\ufe1c\013\ufe1c\021\ufe1c" +
    "\001\002\000\052\002\ufe3f\003\ufe3f\011\ufe3f\027\ufe3f\030" +
    "\ufe3f\033\ufe3f\056\ufe3f\060\ufe3f\061\ufe3f\062\ufe3f\065\ufe3f" +
    "\066\ufe3f\074\ufe3f\100\ufe3f\101\ufe3f\123\ufe3f\125\ufe3f\132" +
    "\ufe3f\135\ufe3f\136\ufe3f\001\002\000\004\057\u02a2\001\002" +
    "\000\030\003\u0277\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\035\046\051\u020e\100\u01a9\101\u01a6\123\u01a5\001\002" +
    "\000\012\003\u027c\013\u027b\050\u0210\052\u0211\001\002\000" +
    "\004\057\u0278\001\002\000\046\011\u01f2\027\u01f0\030\u01fb" +
    "\033\u01ec\056\ufe40\060\034\061\025\062\032\065\u01f5\066" +
    "\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7" +
    "\135\u01f6\136\u01ea\001\002\000\004\056\u027a\001\002\000" +
    "\052\002\ufdf8\003\ufdf8\011\ufdf8\027\ufdf8\030\ufdf8\033\ufdf8" +
    "\056\ufdf8\060\ufdf8\061\ufdf8\062\ufdf8\065\ufdf8\066\ufdf8\074" +
    "\ufdf8\100\ufdf8\101\ufdf8\123\ufdf8\125\ufdf8\132\ufdf8\135\ufdf8" +
    "\136\ufdf8\001\002\000\006\003\u0280\057\u0281\001\002\000" +
    "\004\057\u027d\001\002\000\046\011\u01f2\027\u01f0\030\u01fb" +
    "\033\u01ec\056\ufe40\060\034\061\025\062\032\065\u01f5\066" +
    "\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7" +
    "\135\u01f6\136\u01ea\001\002\000\004\056\u027f\001\002\000" +
    "\052\002\ufdf9\003\ufdf9\011\ufdf9\027\ufdf9\030\ufdf9\033\ufdf9" +
    "\056\ufdf9\060\ufdf9\061\ufdf9\062\ufdf9\065\ufdf9\066\ufdf9\074" +
    "\ufdf9\100\ufdf9\101\ufdf9\123\ufdf9\125\ufdf9\132\ufdf9\135\ufdf9" +
    "\136\ufdf9\001\002\000\052\002\ufdfa\003\ufdfa\011\ufdfa\027" +
    "\ufdfa\030\ufdfa\033\ufdfa\056\ufdfa\060\ufdfa\061\ufdfa\062\ufdfa" +
    "\065\ufdfa\066\ufdfa\074\ufdfa\100\ufdfa\101\ufdfa\123\ufdfa\125" +
    "\ufdfa\132\ufdfa\135\ufdfa\136\ufdfa\001\002\000\050\003\ufe40" +
    "\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061" +
    "\025\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6" +
    "\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000" +
    "\006\003\u0283\056\u0284\001\002\000\052\002\ufdfb\003\ufdfb" +
    "\011\ufdfb\027\ufdfb\030\ufdfb\033\ufdfb\056\ufdfb\060\ufdfb\061" +
    "\ufdfb\062\ufdfb\065\ufdfb\066\ufdfb\074\ufdfb\100\ufdfb\101\ufdfb" +
    "\123\ufdfb\125\ufdfb\132\ufdfb\135\ufdfb\136\ufdfb\001\002\000" +
    "\054\002\ufdf4\003\ufdf4\011\ufdf4\026\u0286\027\ufdf4\030\ufdf4" +
    "\033\ufdf4\056\ufdf4\060\ufdf4\061\ufdf4\062\ufdf4\065\ufdf4\066" +
    "\ufdf4\074\ufdf4\100\ufdf4\101\ufdf4\123\ufdf4\125\ufdf4\132\ufdf4" +
    "\135\ufdf4\136\ufdf4\001\002\000\052\002\ufdfc\003\ufdfc\011" +
    "\ufdfc\027\ufdfc\030\ufdfc\033\ufdfc\056\ufdfc\060\ufdfc\061\ufdfc" +
    "\062\ufdfc\065\ufdfc\066\ufdfc\074\ufdfc\100\ufdfc\101\ufdfc\123" +
    "\ufdfc\125\ufdfc\132\ufdfc\135\ufdfc\136\ufdfc\001\002\000\010" +
    "\003\u0287\027\u0288\057\u0289\001\002\000\052\002\ufded\003" +
    "\ufded\011\ufded\027\ufded\030\ufded\033\ufded\056\ufded\060\ufded" +
    "\061\ufded\062\ufded\065\ufded\066\ufded\074\ufded\100\ufded\101" +
    "\ufded\123\ufded\125\ufded\132\ufded\135\ufded\136\ufded\001\002" +
    "\000\006\003\u028d\012\u028e\001\002\000\050\003\ufe40\011" +
    "\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025" +
    "\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123" +
    "\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\006" +
    "\003\u028b\056\u028c\001\002\000\052\002\ufdee\003\ufdee\011" +
    "\ufdee\027\ufdee\030\ufdee\033\ufdee\056\ufdee\060\ufdee\061\ufdee" +
    "\062\ufdee\065\ufdee\066\ufdee\074\ufdee\100\ufdee\101\ufdee\123" +
    "\ufdee\125\ufdee\132\ufdee\135\ufdee\136\ufdee\001\002\000\052" +
    "\002\ufdf5\003\ufdf5\011\ufdf5\027\ufdf5\030\ufdf5\033\ufdf5\056" +
    "\ufdf5\060\ufdf5\061\ufdf5\062\ufdf5\065\ufdf5\066\ufdf5\074\ufdf5" +
    "\100\ufdf5\101\ufdf5\123\ufdf5\125\ufdf5\132\ufdf5\135\ufdf5\136" +
    "\ufdf5\001\002\000\004\057\u029f\001\002\000\030\003\u0290" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046\051" +
    "\u020e\100\u01a9\101\u01a6\123\u01a5\001\002\000\012\003\u0295" +
    "\013\u0294\050\u0210\052\u0211\001\002\000\004\057\u0291\001" +
    "\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40" +
    "\060\034\061\025\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\004\056\u0293\001\002\000\052\002\ufdf0\003" +
    "\ufdf0\011\ufdf0\027\ufdf0\030\ufdf0\033\ufdf0\056\ufdf0\060\ufdf0" +
    "\061\ufdf0\062\ufdf0\065\ufdf0\066\ufdf0\074\ufdf0\100\ufdf0\101" +
    "\ufdf0\123\ufdf0\125\ufdf0\132\ufdf0\135\ufdf0\136\ufdf0\001\002" +
    "\000\006\003\u0299\057\u029a\001\002\000\004\057\u0296\001" +
    "\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40" +
    "\060\034\061\025\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\004\056\u0298\001\002\000\052\002\ufdf1\003" +
    "\ufdf1\011\ufdf1\027\ufdf1\030\ufdf1\033\ufdf1\056\ufdf1\060\ufdf1" +
    "\061\ufdf1\062\ufdf1\065\ufdf1\066\ufdf1\074\ufdf1\100\ufdf1\101" +
    "\ufdf1\123\ufdf1\125\ufdf1\132\ufdf1\135\ufdf1\136\ufdf1\001\002" +
    "\000\052\002\ufdf2\003\ufdf2\011\ufdf2\027\ufdf2\030\ufdf2\033" +
    "\ufdf2\056\ufdf2\060\ufdf2\061\ufdf2\062\ufdf2\065\ufdf2\066\ufdf2" +
    "\074\ufdf2\100\ufdf2\101\ufdf2\123\ufdf2\125\ufdf2\132\ufdf2\135" +
    "\ufdf2\136\ufdf2\001\002\000\050\003\ufe40\011\u01f2\027\u01f0" +
    "\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\006\003\u029c\056" +
    "\u029d\001\002\000\052\002\ufdf3\003\ufdf3\011\ufdf3\027\ufdf3" +
    "\030\ufdf3\033\ufdf3\056\ufdf3\060\ufdf3\061\ufdf3\062\ufdf3\065" +
    "\ufdf3\066\ufdf3\074\ufdf3\100\ufdf3\101\ufdf3\123\ufdf3\125\ufdf3" +
    "\132\ufdf3\135\ufdf3\136\ufdf3\001\002\000\054\002\ufdf4\003" +
    "\ufdf4\011\ufdf4\026\u0286\027\ufdf4\030\ufdf4\033\ufdf4\056\ufdf4" +
    "\060\ufdf4\061\ufdf4\062\ufdf4\065\ufdf4\066\ufdf4\074\ufdf4\100" +
    "\ufdf4\101\ufdf4\123\ufdf4\125\ufdf4\132\ufdf4\135\ufdf4\136\ufdf4" +
    "\001\002\000\052\002\ufdf6\003\ufdf6\011\ufdf6\027\ufdf6\030" +
    "\ufdf6\033\ufdf6\056\ufdf6\060\ufdf6\061\ufdf6\062\ufdf6\065\ufdf6" +
    "\066\ufdf6\074\ufdf6\100\ufdf6\101\ufdf6\123\ufdf6\125\ufdf6\132" +
    "\ufdf6\135\ufdf6\136\ufdf6\001\002\000\046\011\u01f2\027\u01f0" +
    "\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u02a1\001" +
    "\002\000\052\002\ufdef\003\ufdef\011\ufdef\027\ufdef\030\ufdef" +
    "\033\ufdef\056\ufdef\060\ufdef\061\ufdef\062\ufdef\065\ufdef\066" +
    "\ufdef\074\ufdef\100\ufdef\101\ufdef\123\ufdef\125\ufdef\132\ufdef" +
    "\135\ufdef\136\ufdef\001\002\000\046\011\u01f2\027\u01f0\030" +
    "\u01fb\033\u01ec\056\ufe40\060\034\061\025\062\032\065\u01f5" +
    "\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4\132" +
    "\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u02a4\001\002" +
    "\000\052\002\ufdf7\003\ufdf7\011\ufdf7\027\ufdf7\030\ufdf7\033" +
    "\ufdf7\056\ufdf7\060\ufdf7\061\ufdf7\062\ufdf7\065\ufdf7\066\ufdf7" +
    "\074\ufdf7\100\ufdf7\101\ufdf7\123\ufdf7\125\ufdf7\132\ufdf7\135" +
    "\ufdf7\136\ufdf7\001\002\000\010\060\034\061\025\062\032" +
    "\001\002\000\004\011\u02a7\001\002\000\024\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a9\101\u01a6" +
    "\123\u01a5\001\002\000\016\034\u01b6\035\u01b7\036\u01b9\037" +
    "\u01b8\040\u01b5\067\u02a9\001\002\000\026\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a9\101" +
    "\u01a6\123\u01a5\001\002\000\010\050\u0210\052\u0211\067\u02ab" +
    "\001\002\000\004\011\u02ac\001\002\000\012\003\u02ae\043" +
    "\u02af\076\u02ad\077\u02b0\001\002\000\006\003\ufde5\013\ufde5" +
    "\001\002\000\010\003\ufde3\013\ufde3\057\u02be\001\002\000" +
    "\026\003\u02bd\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\006\003" +
    "\ufde4\013\ufde4\001\002\000\006\003\u02b3\013\u02b2\001\002" +
    "\000\006\003\u02b7\057\u02b8\001\002\000\004\057\u02b4\001" +
    "\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40" +
    "\060\034\061\025\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a9\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\004\056\u02b6\001\002\000\052\002\ufde9\003" +
    "\ufde9\011\ufde9\027\ufde9\030\ufde9\033\ufde9\056\ufde9\060\ufde9" +
    "\061\ufde9\062\ufde9\065\ufde9\066\ufde9\074\ufde9\100\ufde9\101" +
    "\ufde9\123\ufde9\125\ufde9\132\ufde9\135\ufde9\136\ufde9\001\002" +
    "\000\052\002\ufdea\003\ufdea\011\ufdea\027\ufdea\030\ufdea\033" +
    "\ufdea\056\ufdea\060\ufdea\061\ufdea\062\ufdea\065\ufdea\066\ufdea" +
    "\074\ufdea\100\ufdea\101\ufdea\123\ufdea\125\ufdea\132\ufdea\135" +
    "\ufdea\136\ufdea\001\002\000\050\003\ufe40\011\u01f2\027\u01f0" +
    "\030\u01fb\033\u01ec\056\ufe40\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\006\003\u02ba\056" +
    "\u02bb\001\002\000\052\002\ufdeb\003\ufdeb\011\ufdeb\027\ufdeb" +
    "\030\ufdeb\033\ufdeb\056\ufdeb\060\ufdeb\061\ufdeb\062\ufdeb\065" +
    "\ufdeb\066\ufdeb\074\ufdeb\100\ufdeb\101\ufdeb\123\ufdeb\125\ufdeb" +
    "\132\ufdeb\135\ufdeb\136\ufdeb\001\002\000\052\002\ufdec\003" +
    "\ufdec\011\ufdec\027\ufdec\030\ufdec\033\ufdec\056\ufdec\060\ufdec" +
    "\061\ufdec\062\ufdec\065\ufdec\066\ufdec\074\ufdec\100\ufdec\101" +
    "\ufdec\123\ufdec\125\ufdec\132\ufdec\135\ufdec\136\ufdec\001\002" +
    "\000\020\003\ufde7\013\ufde7\034\u01b6\035\u01b7\036\u01b9\037" +
    "\u01b8\040\u01b5\001\002\000\006\003\ufde6\013\ufde6\001\002" +
    "\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060" +
    "\034\061\025\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a9" +
    "\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001" +
    "\002\000\004\056\u02c0\001\002\000\052\002\ufde8\003\ufde8" +
    "\011\ufde8\027\ufde8\030\ufde8\033\ufde8\056\ufde8\060\ufde8\061" +
    "\ufde8\062\ufde8\065\ufde8\066\ufde8\074\ufde8\100\ufde8\101\ufde8" +
    "\123\ufde8\125\ufde8\132\ufde8\135\ufde8\136\ufde8\001\002\000" +
    "\004\067\ufe01\001\002\000\006\003\u02c4\013\u02c3\001\002" +
    "\000\004\067\ufe03\001\002\000\004\067\ufe02\001\002\000" +
    "\006\003\u02c8\011\u02c7\001\002\000\006\003\ufe5a\067\ufe5a" +
    "\001\002\000\012\003\ufe2a\011\u02c9\043\ufe2a\072\u01c7\001" +
    "\002\000\006\003\ufe5b\067\ufe5b\001\002\000\012\003\ufe4a" +
    "\012\u02cf\021\ufe4a\067\ufe4a\001\002\000\010\003\ufe5e\021" +
    "\u02cb\067\ufe5e\001\002\000\006\003\u02cd\011\u02cc\001\002" +
    "\000\012\003\ufe4a\012\u02cf\021\ufe4a\067\ufe4a\001\002\000" +
    "\010\003\ufe4c\021\ufe4c\067\ufe4c\001\002\000\010\003\ufe4b" +
    "\021\ufe4b\067\ufe4b\001\002\000\030\003\ufdb1\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\013\ufdb1\035\046\100\u01a9" +
    "\101\u01a6\123\u01a5\001\002\000\010\003\ufe4e\021\ufe4e\067" +
    "\ufe4e\001\002\000\006\003\u02d3\013\u02d2\001\002\000\010" +
    "\003\ufe49\021\ufe49\067\ufe49\001\002\000\010\003\ufe48\021" +
    "\ufe48\067\ufe48\001\002\000\010\003\ufe4d\021\ufe4d\067\ufe4d" +
    "\001\002\000\004\067\ufe04\001\002\000\016\003\u02d9\007" +
    "\u0260\020\u0257\102\u0259\103\u025a\104\u025f\001\002\000\006" +
    "\003\u02e2\021\u02e1\001\002\000\012\003\u02dd\102\u0259\103" +
    "\u025a\104\u025f\001\002\000\014\003\ufe12\007\u0260\020\u0257" +
    "\021\ufe12\067\ufe05\001\002\000\012\003\ufe16\007\u0260\020" +
    "\u0257\021\ufe16\001\002\000\006\003\ufe18\021\ufe18\001\002" +
    "\000\006\003\ufe14\021\ufe14\001\002\000\012\003\ufe15\007" +
    "\u0260\020\u0257\021\ufe15\001\002\000\012\003\ufe19\007\u0260" +
    "\020\u0257\021\ufe19\001\002\000\006\003\ufe17\021\ufe17\001" +
    "\002\000\006\003\ufe13\021\ufe13\001\002\000\006\003\u02e3" +
    "\070\u02e4\001\002\000\004\067\ufe06\001\002\000\004\067" +
    "\ufe07\001\002\000\010\003\u02e6\011\u01f2\123\u02e7\001\002" +
    "\000\006\003\u02eb\013\u02ea\001\002\000\004\067\ufe08\001" +
    "\002\000\004\072\u02e8\001\002\000\004\011\u02e9\001\002" +
    "\000\006\003\ufe2a\013\ufe2a\001\002\000\004\067\ufe0a\001" +
    "\002\000\004\067\ufe09\001\002\000\046\002\ufe40\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\060\034\061\025\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\050\003\ufe40\011" +
    "\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe40\060\034\061\025" +
    "\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a9\101\u01a6\123" +
    "\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\006" +
    "\003\u02ef\056\u02f0\001\002\000\004\002\ufe46\001\002\000" +
    "\004\002\ufe47\001\002\000\004\002\ufe45\001\002\000\004" +
    "\002\ufe43\001\002\000\004\002\ufe42\001\002\000\014\060" +
    "\ufe63\061\ufe63\062\ufe63\120\ufe63\123\ufe63\001\002\000\006" +
    "\003\u02c8\011\u02f6\001\002\000\004\011\u02c9\001\002\000" +
    "\016\060\ufe66\061\ufe66\062\ufe66\120\ufe66\123\ufe66\131\ufe66" +
    "\001\002\000\006\003\u02fa\011\u02f9\001\002\000\006\003" +
    "\u02fb\043\u02fc\001\002\000\016\060\ufe67\061\ufe67\062\ufe67" +
    "\120\ufe67\123\ufe67\131\ufe67\001\002\000\016\060\ufe68\061" +
    "\ufe68\062\ufe68\120\ufe68\123\ufe68\131\ufe68\001\002\000\026" +
    "\003\u02fe\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\100\u01a9\101\u01a6\123\u01a5\001\002\000\020\003\u02ff" +
    "\034\u01b6\035\u01b7\036\u01b9\037\u01b8\040\u01b5\067\u0300\001" +
    "\002\000\016\060\ufe69\061\ufe69\062\ufe69\120\ufe69\123\ufe69" +
    "\131\ufe69\001\002\000\016\060\ufe6a\061\ufe6a\062\ufe6a\120" +
    "\ufe6a\123\ufe6a\131\ufe6a\001\002\000\016\060\ufe6b\061\ufe6b" +
    "\062\ufe6b\120\ufe6b\123\ufe6b\131\ufe6b\001\002\000\020\060" +
    "\ufe7b\061\ufe7b\062\ufe7b\071\ufe7b\120\ufe7b\123\ufe7b\131\ufe7b" +
    "\001\002\000\014\003\u0303\044\u0306\100\u0304\101\u0305\123" +
    "\u0307\001\002\000\020\060\ufe7c\061\ufe7c\062\ufe7c\071\ufe7c" +
    "\120\ufe7c\123\ufe7c\131\ufe7c\001\002\000\020\060\ufe78\061" +
    "\ufe78\062\ufe78\071\ufe78\120\ufe78\123\ufe78\131\ufe78\001\002" +
    "\000\020\060\ufe77\061\ufe77\062\ufe77\071\ufe77\120\ufe77\123" +
    "\ufe77\131\ufe77\001\002\000\006\003\u0310\011\u030e\001\002" +
    "\000\006\003\u030a\072\u0309\001\002\000\020\060\ufe7d\061" +
    "\ufe7d\062\ufe7d\071\ufe7d\120\ufe7d\123\ufe7d\131\ufe7d\001\002" +
    "\000\006\007\u030c\020\u030d\001\002\000\020\060\ufe79\061" +
    "\ufe79\062\ufe79\071\ufe79\120\ufe79\123\ufe79\131\ufe79\001\002" +
    "\000\020\060\ufe7a\061\ufe7a\062\ufe7a\071\ufe7a\120\ufe7a\123" +
    "\ufe7a\131\ufe7a\001\002\000\020\060\ufe70\061\ufe70\062\ufe70" +
    "\071\ufe70\120\ufe70\123\ufe70\131\ufe70\001\002\000\020\060" +
    "\ufe71\061\ufe71\062\ufe71\071\ufe71\120\ufe71\123\ufe71\131\ufe71" +
    "\001\002\000\010\003\ufe72\046\ufe72\072\ufe72\001\002\000" +
    "\010\003\u0312\046\u0313\072\u0311\001\002\000\020\060\ufe74" +
    "\061\ufe74\062\ufe74\071\ufe74\120\ufe74\123\ufe74\131\ufe74\001" +
    "\002\000\004\011\u0314\001\002\000\020\060\ufe75\061\ufe75" +
    "\062\ufe75\071\ufe75\120\ufe75\123\ufe75\131\ufe75\001\002\000" +
    "\020\060\ufe76\061\ufe76\062\ufe76\071\ufe76\120\ufe76\123\ufe76" +
    "\131\ufe76\001\002\000\010\003\ufe73\046\ufe73\072\ufe73\001" +
    "\002\000\020\060\ufe7f\061\ufe7f\062\ufe7f\071\ufe7f\120\ufe7f" +
    "\123\ufe7f\131\ufe7f\001\002\000\006\010\u0318\143\ufee7\001" +
    "\002\000\006\010\ufee5\143\ufee5\001\002\000\006\003\u031d" +
    "\011\u031c\001\002\000\004\143\ufee9\001\002\000\006\010" +
    "\u0318\143\ufee8\001\002\000\006\010\ufee6\143\ufee6\001\002" +
    "\000\006\003\u031e\012\u031f\001\002\000\006\010\ufee3\143" +
    "\ufee3\001\002\000\006\010\ufee2\143\ufee2\001\002\000\010" +
    "\003\ufedd\011\u0320\013\ufedd\001\002\000\012\003\ufeda\013" +
    "\ufeda\021\ufeda\073\ufeda\001\002\000\006\003\u0327\013\u0326" +
    "\001\002\000\010\003\ufede\013\ufede\021\u0323\001\002\000" +
    "\006\003\u0325\011\u0324\001\002\000\014\003\ufedc\013\ufedc" +
    "\021\ufedc\043\ufedc\073\ufedc\001\002\000\014\003\ufedb\013" +
    "\ufedb\021\ufedb\043\ufedb\073\ufedb\001\002\000\006\003\u0328" +
    "\014\u0329\001\002\000\006\010\ufee1\143\ufee1\001\002\000" +
    "\006\010\ufee0\143\ufee0\001\002\000\020\003\u0331\004\u0334" +
    "\011\u0330\023\051\024\043\025\057\130\u0333\001\002\000" +
    "\014\004\ufecf\010\ufecf\022\ufecf\026\ufecf\143\ufecf\001\002" +
    "\000\014\004\ufed0\010\ufed0\022\ufed0\026\ufed0\143\ufed0\001" +
    "\002\000\014\004\ufecd\010\ufecd\022\ufecd\026\ufecd\143\ufecd" +
    "\001\002\000\014\004\ufece\010\ufece\022\ufece\026\ufece\143" +
    "\ufece\001\002\000\014\004\ufed1\010\ufed1\022\ufed1\026\ufed1" +
    "\143\ufed1\001\002\000\006\010\ufee4\143\ufee4\001\002\000" +
    "\012\003\ufeda\012\u036a\021\ufeda\043\u03c5\001\002\000\006" +
    "\010\ufedf\143\ufedf\001\002\000\010\003\u03bd\021\u0323\043" +
    "\u03be\001\002\000\006\003\u03b2\012\u03b3\001\002\000\004" +
    "\015\u0335\001\002\000\024\003\u033d\011\u0330\023\051\024" +
    "\043\025\057\027\u0339\030\u0336\033\u033e\130\u0333\001\002" +
    "\000\022\003\u03af\005\050\006\052\007\062\011\u0351\012" +
    "\u0377\035\046\051\u037c\001\002\000\004\004\u03ad\001\002" +
    "\000\004\004\u03ac\001\002\000\022\003\u037a\005\050\006" +
    "\052\007\062\011\u0351\012\u0377\035\046\051\u037c\001\002" +
    "\000\026\003\u033d\011\u0330\016\u0375\023\051\024\043\025" +
    "\057\027\u0339\030\u0336\033\u033e\130\u0333\001\002\000\004" +
    "\004\u0374\001\002\000\026\003\ufed8\011\ufed8\016\ufed8\023" +
    "\ufed8\024\ufed8\025\ufed8\027\ufed8\030\ufed8\033\ufed8\130\ufed8" +
    "\001\002\000\026\003\ufed3\011\ufed3\016\ufed3\023\ufed3\024" +
    "\ufed3\025\ufed3\027\ufed3\030\ufed3\033\ufed3\130\ufed3\001\002" +
    "\000\006\003\u0342\011\u0341\001\002\000\004\004\u0340\001" +
    "\002\000\026\003\ufed6\011\ufed6\016\ufed6\023\ufed6\024\ufed6" +
    "\025\ufed6\027\ufed6\030\ufed6\033\ufed6\130\ufed6\001\002\000" +
    "\006\003\u0344\032\u0343\001\002\000\004\004\ufeac\001\002" +
    "\000\006\003\u0346\031\u0345\001\002\000\004\004\ufead\001" +
    "\002\000\006\003\u034c\012\u034d\001\002\000\004\004\ufeae" +
    "\001\002\000\006\003\u0348\014\u0349\001\002\000\004\004" +
    "\ufeaf\001\002\000\020\003\u034b\004\u0334\011\u0330\023\051" +
    "\024\043\025\057\130\u0333\001\002\000\004\004\ufeb1\001" +
    "\002\000\004\004\ufeb0\001\002\000\006\003\ufea2\014\ufea2" +
    "\001\002\000\020\003\u0352\005\050\006\052\007\062\011" +
    "\u0351\012\u034e\035\046\001\002\000\016\005\050\006\052" +
    "\007\062\011\u0351\012\u034e\035\046\001\002\000\070\003" +
    "\ufe95\004\ufe95\010\ufe95\011\ufe95\013\ufe95\014\ufe95\021\ufe95" +
    "\022\ufe95\023\ufe95\024\ufe95\025\ufe95\026\ufe95\034\ufe95\035" +
    "\ufe95\036\ufe95\037\ufe95\040\ufe95\041\ufe95\042\ufe95\044\ufe95" +
    "\045\ufe95\046\ufe95\047\ufe95\050\ufe95\052\ufe95\130\ufe95\143" +
    "\ufe95\001\002\000\070\003\ufe96\004\ufe96\010\ufe96\011\ufe96" +
    "\013\ufe96\014\ufe96\021\ufe96\022\ufe96\023\ufe96\024\ufe96\025" +
    "\ufe96\026\ufe96\034\ufe96\035\ufe96\036\ufe96\037\ufe96\040\ufe96" +
    "\041\ufe96\042\ufe96\044\ufe96\045\ufe96\046\ufe96\047\ufe96\050" +
    "\ufe96\052\ufe96\130\ufe96\143\ufe96\001\002\000\072\003\ufd9f" +
    "\004\ufd9f\010\ufd9f\011\ufd9f\012\u036a\013\ufd9f\014\ufd9f\021" +
    "\ufd9f\022\ufd9f\023\ufd9f\024\ufd9f\025\ufd9f\026\ufd9f\034\ufd9f" +
    "\035\ufd9f\036\ufd9f\037\ufd9f\040\ufd9f\041\ufd9f\042\ufd9f\044" +
    "\ufd9f\045\ufd9f\046\ufd9f\047\ufd9f\050\ufd9f\052\ufd9f\130\ufd9f" +
    "\143\ufd9f\001\002\000\006\003\ufea3\014\ufea3\001\002\000" +
    "\022\003\u0358\013\u0356\021\u0354\034\u0357\035\u0359\036\u035b" +
    "\037\u035a\040\u0355\001\002\000\020\003\u0361\005\050\006" +
    "\052\007\062\011\u0351\012\u034e\035\046\001\002\000\016" +
    "\005\050\006\052\007\062\011\u0351\012\u034e\035\046\001" +
    "\002\000\006\003\ufeab\014\ufeab\001\002\000\016\005\050" +
    "\006\052\007\062\011\u0351\012\u034e\035\046\001\002\000" +
    "\006\003\ufea4\014\ufea4\001\002\000\016\005\050\006\052" +
    "\007\062\011\u0351\012\u034e\035\046\001\002\000\016\005" +
    "\050\006\052\007\062\011\u0351\012\u034e\035\046\001\002" +
    "\000\016\005\050\006\052\007\062\011\u0351\012\u034e\035" +
    "\046\001\002\000\070\003\ufe99\004\ufe99\010\ufe99\011\ufe99" +
    "\013\ufe99\014\ufe99\021\ufe99\022\ufe99\023\ufe99\024\ufe99\025" +
    "\ufe99\026\ufe99\034\ufe99\035\ufe99\036\ufe99\037\ufe99\040\ufe99" +
    "\041\ufe99\042\ufe99\044\ufe99\045\ufe99\046\ufe99\047\ufe99\050" +
    "\ufe99\052\ufe99\130\ufe99\143\ufe99\001\002\000\070\003\ufe9a" +
    "\004\ufe9a\010\ufe9a\011\ufe9a\013\ufe9a\014\ufe9a\021\ufe9a\022" +
    "\ufe9a\023\ufe9a\024\ufe9a\025\ufe9a\026\ufe9a\034\ufe9a\035\ufe9a" +
    "\036\ufe9a\037\ufe9a\040\ufe9a\041\ufe9a\042\ufe9a\044\ufe9a\045" +
    "\ufe9a\046\ufe9a\047\ufe9a\050\ufe9a\052\ufe9a\130\ufe9a\143\ufe9a" +
    "\001\002\000\070\003\ufe9b\004\ufe9b\010\ufe9b\011\ufe9b\013" +
    "\ufe9b\014\ufe9b\021\ufe9b\022\ufe9b\023\ufe9b\024\ufe9b\025\ufe9b" +
    "\026\ufe9b\034\ufe9b\035\ufe9b\036\u035b\037\u035a\040\u0355\041" +
    "\ufe9b\042\ufe9b\044\ufe9b\045\ufe9b\046\ufe9b\047\ufe9b\050\ufe9b" +
    "\052\ufe9b\130\ufe9b\143\ufe9b\001\002\000\070\003\ufe9c\004" +
    "\ufe9c\010\ufe9c\011\ufe9c\013\ufe9c\014\ufe9c\021\ufe9c\022\ufe9c" +
    "\023\ufe9c\024\ufe9c\025\ufe9c\026\ufe9c\034\ufe9c\035\ufe9c\036" +
    "\u035b\037\u035a\040\u0355\041\ufe9c\042\ufe9c\044\ufe9c\045\ufe9c" +
    "\046\ufe9c\047\ufe9c\050\ufe9c\052\ufe9c\130\ufe9c\143\ufe9c\001" +
    "\002\000\070\003\ufe98\004\ufe98\010\ufe98\011\ufe98\013\ufe98" +
    "\014\ufe98\021\ufe98\022\ufe98\023\ufe98\024\ufe98\025\ufe98\026" +
    "\ufe98\034\ufe98\035\ufe98\036\ufe98\037\ufe98\040\ufe98\041\ufe98" +
    "\042\ufe98\044\ufe98\045\ufe98\046\ufe98\047\ufe98\050\ufe98\052" +
    "\ufe98\130\ufe98\143\ufe98\001\002\000\006\003\ufea5\014\ufea5" +
    "\001\002\000\022\003\u0365\013\u0364\021\u0363\034\u0357\035" +
    "\u0359\036\u035b\037\u035a\040\u0355\001\002\000\020\003\u0366" +
    "\005\050\006\052\007\062\011\u0351\012\u034e\035\046\001" +
    "\002\000\006\003\ufeaa\014\ufeaa\001\002\000\006\003\ufea6" +
    "\014\ufea6\001\002\000\006\003\ufea7\014\ufea7\001\002\000" +
    "\020\003\u0369\013\u0368\034\u0357\035\u0359\036\u035b\037\u035a" +
    "\040\u0355\001\002\000\006\003\ufea9\014\ufea9\001\002\000" +
    "\006\003\ufea8\014\ufea8\001\002\000\020\005\050\006\052" +
    "\007\062\011\u0351\012\u034e\013\u036d\035\046\001\002\000" +
    "\010\003\u0370\013\u036f\021\u036e\001\002\000\022\003\ufe8c" +
    "\013\ufe8c\021\ufe8c\034\u0357\035\u0359\036\u035b\037\u035a\040" +
    "\u0355\001\002\000\070\003\ufe92\004\ufe92\010\ufe92\011\ufe92" +
    "\013\ufe92\014\ufe92\021\ufe92\022\ufe92\023\ufe92\024\ufe92\025" +
    "\ufe92\026\ufe92\034\ufe92\035\ufe92\036\ufe92\037\ufe92\040\ufe92" +
    "\041\ufe92\042\ufe92\044\ufe92\045\ufe92\046\ufe92\047\ufe92\050" +
    "\ufe92\052\ufe92\130\ufe92\143\ufe92\001\002\000\016\005\050" +
    "\006\052\007\062\011\u0351\012\u034e\035\046\001\002\000" +
    "\070\003\ufe94\004\ufe94\010\ufe94\011\ufe94\013\ufe94\014\ufe94" +
    "\021\ufe94\022\ufe94\023\ufe94\024\ufe94\025\ufe94\026\ufe94\034" +
    "\ufe94\035\ufe94\036\ufe94\037\ufe94\040\ufe94\041\ufe94\042\ufe94" +
    "\044\ufe94\045\ufe94\046\ufe94\047\ufe94\050\ufe94\052\ufe94\130" +
    "\ufe94\143\ufe94\001\002\000\070\003\ufe93\004\ufe93\010\ufe93" +
    "\011\ufe93\013\ufe93\014\ufe93\021\ufe93\022\ufe93\023\ufe93\024" +
    "\ufe93\025\ufe93\026\ufe93\034\ufe93\035\ufe93\036\ufe93\037\ufe93" +
    "\040\ufe93\041\ufe93\042\ufe93\044\ufe93\045\ufe93\046\ufe93\047" +
    "\ufe93\050\ufe93\052\ufe93\130\ufe93\143\ufe93\001\002\000\022" +
    "\003\ufe8d\013\ufe8d\021\ufe8d\034\u0357\035\u0359\036\u035b\037" +
    "\u035a\040\u0355\001\002\000\016\013\u0373\034\u0357\035\u0359" +
    "\036\u035b\037\u035a\040\u0355\001\002\000\070\003\ufe97\004" +
    "\ufe97\010\ufe97\011\ufe97\013\ufe97\014\ufe97\021\ufe97\022\ufe97" +
    "\023\ufe97\024\ufe97\025\ufe97\026\ufe97\034\ufe97\035\ufe97\036" +
    "\ufe97\037\ufe97\040\ufe97\041\ufe97\042\ufe97\044\ufe97\045\ufe97" +
    "\046\ufe97\047\ufe97\050\ufe97\052\ufe97\130\ufe97\143\ufe97\001" +
    "\002\000\026\003\ufed7\011\ufed7\016\ufed7\023\ufed7\024\ufed7" +
    "\025\ufed7\027\ufed7\030\ufed7\033\ufed7\130\ufed7\001\002\000" +
    "\014\004\ufed2\010\ufed2\022\ufed2\026\ufed2\143\ufed2\001\002" +
    "\000\026\003\ufed9\011\ufed9\016\ufed9\023\ufed9\024\ufed9\025" +
    "\ufed9\027\ufed9\030\ufed9\033\ufed9\130\ufed9\001\002\000\022" +
    "\003\u03a8\005\050\006\052\007\062\011\u0351\012\u034e\035" +
    "\046\051\u037c\001\002\000\026\003\ufe9e\004\ufe9e\011\ufe9e" +
    "\014\ufe9e\023\ufe9e\024\ufe9e\025\ufe9e\050\u037e\052\u037f\130" +
    "\ufe9e\001\002\000\006\003\u03a0\014\u03a1\001\002\000\014" +
    "\003\ufe9d\004\ufeb7\014\ufe9d\022\u038f\026\u0390\001\002\000" +
    "\030\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355\041\u0387" +
    "\042\u0386\044\u0383\045\u0382\046\u0385\047\u0384\001\002\000" +
    "\020\005\050\006\052\007\062\011\u0351\012\u034e\035\046" +
    "\051\u037c\001\002\000\030\003\ufe83\004\ufe83\011\ufe83\013" +
    "\ufe83\014\ufe83\023\ufe83\024\ufe83\025\ufe83\050\ufe83\052\ufe83" +
    "\130\ufe83\001\002\000\020\005\050\006\052\007\062\011" +
    "\u0351\012\u034e\035\046\051\u037c\001\002\000\020\005\050" +
    "\006\052\007\062\011\u0351\012\u034e\035\046\051\u037c\001" +
    "\002\000\030\003\ufe84\004\ufe84\011\ufe84\013\ufe84\014\ufe84" +
    "\023\ufe84\024\ufe84\025\ufe84\050\u037e\052\ufe84\130\ufe84\001" +
    "\002\000\030\003\ufe85\004\ufe85\011\ufe85\013\ufe85\014\ufe85" +
    "\023\ufe85\024\ufe85\025\ufe85\050\ufe85\052\ufe85\130\ufe85\001" +
    "\002\000\016\005\050\006\052\007\062\011\u0351\012\u034e" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u0351\012\u034e\035\046\001\002\000\016\005\050\006\052" +
    "\007\062\011\u0351\012\u034e\035\046\001\002\000\016\005" +
    "\050\006\052\007\062\011\u0351\012\u034e\035\046\001\002" +
    "\000\016\005\050\006\052\007\062\011\u0351\012\u034e\035" +
    "\046\001\002\000\016\005\050\006\052\007\062\011\u0351" +
    "\012\u034e\035\046\001\002\000\042\003\ufe8b\004\ufe8b\011" +
    "\ufe8b\013\ufe8b\014\ufe8b\023\ufe8b\024\ufe8b\025\ufe8b\034\u0357" +
    "\035\u0359\036\u035b\037\u035a\040\u0355\050\ufe8b\052\ufe8b\130" +
    "\ufe8b\001\002\000\042\003\ufe8a\004\ufe8a\011\ufe8a\013\ufe8a" +
    "\014\ufe8a\023\ufe8a\024\ufe8a\025\ufe8a\034\u0357\035\u0359\036" +
    "\u035b\037\u035a\040\u0355\050\ufe8a\052\ufe8a\130\ufe8a\001\002" +
    "\000\042\003\ufe87\004\ufe87\011\ufe87\013\ufe87\014\ufe87\023" +
    "\ufe87\024\ufe87\025\ufe87\034\u0357\035\u0359\036\u035b\037\u035a" +
    "\040\u0355\050\ufe87\052\ufe87\130\ufe87\001\002\000\042\003" +
    "\ufe86\004\ufe86\011\ufe86\013\ufe86\014\ufe86\023\ufe86\024\ufe86" +
    "\025\ufe86\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355\050" +
    "\ufe86\052\ufe86\130\ufe86\001\002\000\042\003\ufe89\004\ufe89" +
    "\011\ufe89\013\ufe89\014\ufe89\023\ufe89\024\ufe89\025\ufe89\034" +
    "\u0357\035\u0359\036\u035b\037\u035a\040\u0355\050\ufe89\052\ufe89" +
    "\130\ufe89\001\002\000\042\003\ufe88\004\ufe88\011\ufe88\013" +
    "\ufe88\014\ufe88\023\ufe88\024\ufe88\025\ufe88\034\u0357\035\u0359" +
    "\036\u035b\037\u035a\040\u0355\050\ufe88\052\ufe88\130\ufe88\001" +
    "\002\000\004\004\ufeb8\001\002\000\022\003\u0397\005\050" +
    "\006\052\007\062\011\u0351\012\u0377\035\046\051\u037c\001" +
    "\002\000\006\003\u0392\014\u0393\001\002\000\004\004\ufebd" +
    "\001\002\000\004\004\ufeb4\001\002\000\020\003\u0395\004" +
    "\u0334\011\u0330\023\051\024\043\025\057\130\u0333\001\002" +
    "\000\004\004\ufeb6\001\002\000\004\004\ufeb5\001\002\000" +
    "\006\003\u0399\014\u039a\001\002\000\014\003\ufe9d\004\ufeb7" +
    "\014\ufe9d\022\u038f\026\u0390\001\002\000\004\004\ufeb9\001" +
    "\002\000\010\004\ufeb7\022\u038f\026\u0390\001\002\000\020" +
    "\003\u039c\004\u0334\011\u0330\023\051\024\043\025\057\130" +
    "\u0333\001\002\000\010\004\ufeb7\022\u038f\026\u0390\001\002" +
    "\000\010\004\ufeb7\022\u038f\026\u0390\001\002\000\004\004" +
    "\ufebb\001\002\000\004\004\ufebc\001\002\000\004\004\ufeba" +
    "\001\002\000\010\004\ufeb7\022\u038f\026\u0390\001\002\000" +
    "\020\003\u03a3\004\u0334\011\u0330\023\051\024\043\025\057" +
    "\130\u0333\001\002\000\010\004\ufeb7\022\u038f\026\u0390\001" +
    "\002\000\010\004\ufeb7\022\u038f\026\u0390\001\002\000\004" +
    "\004\ufebf\001\002\000\004\004\ufec0\001\002\000\004\004" +
    "\ufebe\001\002\000\012\003\u03ab\013\u03aa\050\u037e\052\u037f" +
    "\001\002\000\022\003\ufe9f\004\ufe9f\011\ufe9f\014\ufe9f\023" +
    "\ufe9f\024\ufe9f\025\ufe9f\130\ufe9f\001\002\000\032\013\u0373" +
    "\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355\041\u0387\042" +
    "\u0386\044\u0383\045\u0382\046\u0385\047\u0384\001\002\000\022" +
    "\003\ufea1\004\ufea1\011\ufea1\014\ufea1\023\ufea1\024\ufea1\025" +
    "\ufea1\130\ufea1\001\002\000\022\003\ufea0\004\ufea0\011\ufea0" +
    "\014\ufea0\023\ufea0\024\ufea0\025\ufea0\130\ufea0\001\002\000" +
    "\026\003\ufed5\011\ufed5\016\ufed5\023\ufed5\024\ufed5\025\ufed5" +
    "\027\ufed5\030\ufed5\033\ufed5\130\ufed5\001\002\000\026\003" +
    "\ufed4\011\ufed4\016\ufed4\023\ufed4\024\ufed4\025\ufed4\027\ufed4" +
    "\030\ufed4\033\ufed4\130\ufed4\001\002\000\020\003\u03b1\004" +
    "\u0334\011\u0330\023\051\024\043\025\057\130\u0333\001\002" +
    "\000\020\003\ufe9d\004\ufe9d\011\ufe9d\023\ufe9d\024\ufe9d\025" +
    "\ufe9d\130\ufe9d\001\002\000\004\004\ufeb3\001\002\000\004" +
    "\004\ufeb2\001\002\000\014\004\ufeca\010\ufeca\022\ufeca\026" +
    "\ufeca\143\ufeca\001\002\000\022\003\u03b6\005\050\006\052" +
    "\007\062\011\u0351\012\u034e\020\u03b4\035\046\001\002\000" +
    "\010\003\ufec6\013\ufec6\021\ufec6\001\002\000\010\003\u03bb" +
    "\013\u03ba\021\u03b9\001\002\000\014\004\ufecb\010\ufecb\022" +
    "\ufecb\026\ufecb\143\ufecb\001\002\000\022\003\ufec5\013\ufec5" +
    "\021\ufec5\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355\001" +
    "\002\000\010\003\ufec7\013\ufec7\021\ufec7\001\002\000\020" +
    "\005\050\006\052\007\062\011\u0351\012\u034e\020\u03b4\035" +
    "\046\001\002\000\014\004\ufecc\010\ufecc\022\ufecc\026\ufecc" +
    "\143\ufecc\001\002\000\014\004\ufec9\010\ufec9\022\ufec9\026" +
    "\ufec9\143\ufec9\001\002\000\010\003\ufec8\013\ufec8\021\ufec8" +
    "\001\002\000\014\004\ufe90\010\ufe90\022\ufe90\026\ufe90\143" +
    "\ufe90\001\002\000\020\003\u03c0\005\050\006\052\007\062" +
    "\011\u0351\012\u034e\035\046\001\002\000\016\004\ufe91\010" +
    "\ufe91\021\u03c2\022\ufe91\026\ufe91\143\ufe91\001\002\000\016" +
    "\004\ufec1\010\ufec1\021\ufec1\022\ufec1\026\ufec1\143\ufec1\001" +
    "\002\000\030\004\ufec2\010\ufec2\021\ufec2\022\ufec2\026\ufec2" +
    "\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355\143\ufec2\001" +
    "\002\000\020\003\u03c3\005\050\006\052\007\062\011\u0351" +
    "\012\u034e\035\046\001\002\000\016\004\ufec3\010\ufec3\021" +
    "\ufec3\022\ufec3\026\ufec3\143\ufec3\001\002\000\030\004\ufec4" +
    "\010\ufec4\021\ufec4\022\ufec4\026\ufec4\034\u0357\035\u0359\036" +
    "\u035b\037\u035a\040\u0355\143\ufec4\001\002\000\024\005\050" +
    "\006\052\007\062\011\u0351\012\u034e\023\051\024\043\025" +
    "\057\035\046\001\002\000\014\004\ufe8f\010\ufe8f\022\ufe8f" +
    "\026\ufe8f\143\ufe8f\001\002\000\026\004\ufe8e\010\ufe8e\022" +
    "\ufe8e\026\ufe8e\034\u0357\035\u0359\036\u035b\037\u035a\040\u0355" +
    "\143\ufe8e\001\002\000\066\003\uff74\011\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\033\uff74" +
    "\053\uff74\067\uff74\074\uff74\105\uff74\106\uff74\107\uff74\112" +
    "\uff74\113\uff74\114\uff74\115\uff74\130\uff74\133\uff74\134\uff74" +
    "\137\uff74\140\uff74\142\uff74\001\002\000\014\067\u03cb\107" +
    "\ufd9b\112\ufffd\133\014\142\ufd9b\001\002\000\012\107\ufd9b" +
    "\112\ufffe\133\014\142\ufd9b\001\002\000\066\003\uff75\011" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\033\uff75\053\uff75\067\uff75\074\uff75\105\uff75\106" +
    "\uff75\107\uff75\112\uff75\113\uff75\114\uff75\115\uff75\130\uff75" +
    "\133\uff75\134\uff75\137\uff75\140\uff75\142\uff75\001\002\000" +
    "\012\107\ufffb\112\ufffb\133\ufffb\142\ufffb\001\002\000\012" +
    "\107\ufffa\112\ufffa\133\ufffa\142\ufffa\001\002\000\004\112" +
    "\uffff\001\002\000\012\107\ufff9\112\ufff9\133\ufff9\142\ufff9" +
    "\001\002\000\006\107\u03d1\142\u03d2\001\002\000\006\003" +
    "\u0517\011\u0516\001\002\000\006\003\u03d4\011\u03d3\001\002" +
    "\000\010\003\uff96\012\u03d5\073\uff96\001\002\000\006\012" +
    "\u03d5\073\uff96\001\002\000\012\003\u04f6\011\u04f2\013\u04f4" +
    "\055\u04f5\001\002\000\004\073\u03d7\001\002\000\010\060" +
    "\034\061\025\062\032\001\002\000\004\067\u03c8\001\002" +
    "\000\040\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\022\003\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\035\uffb6\113\u04d0" +
    "\001\002\000\004\021\u04c4\001\002\000\010\026\uffe2\067" +
    "\uffe2\106\uffe2\001\002\000\004\067\u03c8\001\002\000\004" +
    "\067\u03c8\001\002\000\022\003\u04b8\005\050\006\052\007" +
    "\062\011\u03fb\012\u0459\035\046\051\u045e\001\002\000\052" +
    "\003\uffea\011\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\033\uffea\053\uffea\074\uffea\105\uffea" +
    "\106\uffea\113\uffea\114\uffea\115\uffea\130\uffea\134\uffea\140" +
    "\uffea\001\002\000\020\003\u04b6\005\050\006\052\007\062" +
    "\011\u03fb\012\u03f5\035\046\001\002\000\004\067\u03c8\001" +
    "\002\000\022\003\u047b\005\050\006\052\007\062\011\u03fb" +
    "\012\u0459\035\046\051\u045e\001\002\000\010\003\u0475\012" +
    "\u03ff\043\u0476\001\002\000\010\026\uffde\067\uffde\106\uffde" +
    "\001\002\000\004\067\u03c8\001\002\000\004\067\u03c8\001" +
    "\002\000\004\012\u0450\001\002\000\010\026\uffe0\067\uffe0" +
    "\106\uffe0\001\002\000\010\026\uffe1\067\uffe1\106\uffe1\001" +
    "\002\000\010\026\uffe3\067\uffe3\106\uffe3\001\002\000\004" +
    "\067\u03c8\001\002\000\004\106\u044c\001\002\000\004\011" +
    "\u0320\001\002\000\004\067\u03c8\001\002\000\006\003\u0419" +
    "\011\u0418\001\002\000\010\026\uffdf\067\uffdf\106\uffdf\001" +
    "\002\000\052\003\uffed\011\u03e4\022\uffed\023\051\024\043" +
    "\025\057\026\uffed\027\u03e3\030\u03df\033\u03f0\053\u03e1\074" +
    "\u03e7\105\u03ee\106\uffed\113\uffed\114\uffed\115\uffed\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\012\u03f4\001\002\000" +
    "\024\003\u03fc\005\050\006\052\007\062\011\u03fb\012\u03f5" +
    "\013\u03fe\020\u03f6\035\046\001\002\000\016\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f5\035\046\001\002\000\006" +
    "\013\uff9d\070\uff9d\001\002\000\006\013\u0412\070\u0413\001" +
    "\002\000\060\003\uff88\013\uff88\021\uff88\026\uff88\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\052\uff88\067\uff88" +
    "\070\uff88\075\uff88\106\uff88\116\uff88\117\uff88\001\002\000" +
    "\060\003\uff87\013\uff87\021\uff87\026\uff87\034\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\052\uff87\067\uff87\070\uff87" +
    "\075\uff87\106\uff87\116\uff87\117\uff87\001\002\000\020\013" +
    "\uff9c\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\070\uff9c" +
    "\001\002\000\062\003\ufd9f\012\u03ff\013\ufd9f\021\ufd9f\026" +
    "\ufd9f\034\ufd9f\035\ufd9f\036\ufd9f\037\ufd9f\040\ufd9f\041\ufd9f" +
    "\042\ufd9f\044\ufd9f\045\ufd9f\046\ufd9f\047\ufd9f\050\ufd9f\052" +
    "\ufd9f\067\ufd9f\070\ufd9f\075\ufd9f\106\ufd9f\116\ufd9f\117\ufd9f" +
    "\001\002\000\006\013\uff9b\070\uff9b\001\002\000\006\013" +
    "\uff9e\070\uff9e\001\002\000\010\026\uffa1\067\uffa1\106\uffa1" +
    "\001\002\000\022\003\u0401\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\013\u0402\035\046\001\002\000\020\013\uff77" +
    "\021\uff77\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\001" +
    "\002\000\006\013\uff76\021\uff76\001\002\000\060\003\uff7a" +
    "\013\uff7a\021\uff7a\026\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\041\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\047\uff7a\050\uff7a\052\uff7a\067\uff7a\070\uff7a\075\uff7a\106" +
    "\uff7a\116\uff7a\117\uff7a\001\002\000\006\013\u0405\021\u0404" +
    "\001\002\000\020\003\u0407\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\035\046\001\002\000\060\003\uff7b\013\uff7b" +
    "\021\uff7b\026\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\052\uff7b\067\uff7b\070\uff7b\075\uff7b\106\uff7b\116" +
    "\uff7b\117\uff7b\001\002\000\020\013\uff79\021\uff79\034\u0409" +
    "\035\u040a\036\u040c\037\u040b\040\u0408\001\002\000\006\013" +
    "\uff78\021\uff78\001\002\000\016\005\050\006\052\007\062" +
    "\011\u03fb\012\u03f5\035\046\001\002\000\016\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f5\035\046\001\002\000\016" +
    "\005\050\006\052\007\062\011\u03fb\012\u03f5\035\046\001" +
    "\002\000\016\005\050\006\052\007\062\011\u03fb\012\u03f5" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\035\046\001\002\000\060\003\uff8b\013\uff8b" +
    "\021\uff8b\026\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\052\uff8b\067\uff8b\070\uff8b\075\uff8b\106\uff8b\116" +
    "\uff8b\117\uff8b\001\002\000\060\003\uff8c\013\uff8c\021\uff8c" +
    "\026\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\052\uff8c\067\uff8c\070\uff8c\075\uff8c\106\uff8c\116\uff8c\117" +
    "\uff8c\001\002\000\060\003\uff8d\013\uff8d\021\uff8d\026\uff8d" +
    "\034\uff8d\035\uff8d\036\u040c\037\u040b\040\u0408\041\uff8d\042" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\052\uff8d" +
    "\067\uff8d\070\uff8d\075\uff8d\106\uff8d\116\uff8d\117\uff8d\001" +
    "\002\000\060\003\uff8e\013\uff8e\021\uff8e\026\uff8e\034\uff8e" +
    "\035\uff8e\036\u040c\037\u040b\040\u0408\041\uff8e\042\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e\067\uff8e" +
    "\070\uff8e\075\uff8e\106\uff8e\116\uff8e\117\uff8e\001\002\000" +
    "\060\003\uff8a\013\uff8a\021\uff8a\026\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\052\uff8a\067\uff8a\070\uff8a" +
    "\075\uff8a\106\uff8a\116\uff8a\117\uff8a\001\002\000\010\026" +
    "\uffa3\067\uffa3\106\uffa3\001\002\000\022\003\u03fc\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f5\020\u03f6\035\046\001" +
    "\002\000\006\013\uff9f\070\uff9f\001\002\000\016\013\u0416" +
    "\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\001\002\000" +
    "\060\003\uff89\013\uff89\021\uff89\026\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\052\uff89\067\uff89\070\uff89" +
    "\075\uff89\106\uff89\116\uff89\117\uff89\001\002\000\052\003" +
    "\uffeb\011\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\033\uffeb\053\uffeb\074\uffeb\105\uffeb\106" +
    "\uffeb\113\uffeb\114\uffeb\115\uffeb\130\uffeb\134\uffeb\140\uffeb" +
    "\001\002\000\014\003\uffc5\043\uffc5\060\034\061\025\062" +
    "\032\001\002\000\012\043\uffc5\060\034\061\025\062\032" +
    "\001\002\000\004\043\u041c\001\002\000\006\003\uffc6\043" +
    "\uffc6\001\002\000\016\005\050\006\052\007\062\011\u03fb" +
    "\012\u03f5\035\046\001\002\000\016\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\075\u041e\001\002\000\016\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f5\035\046\001\002\000" +
    "\020\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067\uffc3" +
    "\116\u0420\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\035\046\001\002\000\004\067\u03c8\001\002" +
    "\000\040\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\004\115\u0424\001" +
    "\002\000\006\011\u0425\067\uffc1\001\002\000\004\067\uffc2" +
    "\001\002\000\004\067\uffca\001\002\000\016\034\u0409\035" +
    "\u040a\036\u040c\037\u040b\040\u0408\067\uffc4\001\002\000\006" +
    "\003\u0429\043\u042a\001\002\000\004\075\u043e\001\002\000" +
    "\016\005\050\006\052\007\062\011\u03fb\012\u03f5\035\046" +
    "\001\002\000\020\003\u042d\034\u0409\035\u040a\036\u040c\037" +
    "\u040b\040\u0408\075\u042c\001\002\000\016\005\050\006\052" +
    "\007\062\011\u03fb\012\u03f5\035\046\001\002\000\006\067" +
    "\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002\000\040" +
    "\011\u03e4\023\051\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\115\u0431\001\002\000" +
    "\006\011\u0425\067\uffc1\001\002\000\004\067\uffc8\001\002" +
    "\000\022\003\u0434\034\u0409\035\u040a\036\u040c\037\u040b\040" +
    "\u0408\067\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002" +
    "\000\004\067\u03c8\001\002\000\040\011\u03e4\023\051\024" +
    "\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb" +
    "\074\u03e7\105\u03ee\115\uffec\130\u03f3\134\u03da\140\u03e8\001" +
    "\002\000\004\115\u0438\001\002\000\006\011\u0425\067\uffc1" +
    "\001\002\000\004\067\uffcb\001\002\000\040\011\u03e4\023" +
    "\051\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1" +
    "\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3\134\u03da\140" +
    "\u03e8\001\002\000\004\115\u043c\001\002\000\006\011\u0425" +
    "\067\uffc1\001\002\000\004\067\uffc7\001\002\000\016\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f5\035\046\001\002" +
    "\000\020\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067" +
    "\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002\000\040" +
    "\011\u03e4\023\051\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\115\u0443\001\002\000" +
    "\006\011\u0425\067\uffc1\001\002\000\004\067\uffc9\001\002" +
    "\000\054\003\uffe7\011\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7\053\uffe7\067\u03cb" +
    "\074\uffe7\105\uffe7\106\uffe7\113\uffe7\114\uffe7\115\uffe7\130" +
    "\uffe7\134\uffe7\140\uffe7\001\002\000\010\003\u0448\021\u0323" +
    "\073\u0447\001\002\000\010\060\034\061\025\062\032\001" +
    "\002\000\004\021\uffab\001\002\000\006\021\uffac\043\u044a" +
    "\001\002\000\016\005\050\006\052\007\062\011\u03fb\012" +
    "\u03f5\035\046\001\002\000\016\021\uffad\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\001\002\000\004\142\u044d\001" +
    "\002\000\004\067\u03c8\001\002\000\014\067\u03cb\107\ufff6" +
    "\112\ufff6\133\ufff6\142\ufff6\001\002\000\054\003\uffe4\011" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\033\uffe4\053\uffe4\067\u03cb\074\uffe4\105\uffe4\106" +
    "\uffe4\113\uffe4\114\uffe4\115\uffe4\130\uffe4\134\uffe4\140\uffe4" +
    "\001\002\000\024\003\u03fc\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\013\u0452\020\u03f6\035\046\001\002\000\006" +
    "\013\u0453\070\u0413\001\002\000\010\026\uffa0\067\uffa0\106" +
    "\uffa0\001\002\000\010\026\uffa2\067\uffa2\106\uffa2\001\002" +
    "\000\040\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\114\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\004\114\u0456\001" +
    "\002\000\006\003\u0457\030\u0458\001\002\000\020\005\050" +
    "\006\052\007\062\011\u03fb\012\u0459\035\046\051\u045e\001" +
    "\002\000\022\003\u045d\005\050\006\052\007\062\011\u03fb" +
    "\012\u0459\035\046\051\u045e\001\002\000\020\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f5\035\046\051\u045e\001\002" +
    "\000\014\003\uff85\050\u0460\052\u0461\067\uff85\117\uff85\001" +
    "\002\000\004\067\uffbd\001\002\000\030\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\041\u0469\042\u0468\044\u0465\045" +
    "\u0464\046\u0467\047\u0466\001\002\000\004\067\uffbb\001\002" +
    "\000\020\005\050\006\052\007\062\011\u03fb\012\u03f5\035" +
    "\046\051\u045e\001\002\000\016\003\uff7c\013\uff7c\050\uff7c" +
    "\052\uff7c\067\uff7c\117\uff7c\001\002\000\020\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f5\035\046\051\u045e\001\002" +
    "\000\020\005\050\006\052\007\062\011\u03fb\012\u03f5\035" +
    "\046\051\u045e\001\002\000\016\003\uff7d\013\uff7d\050\u0460" +
    "\052\uff7d\067\uff7d\117\uff7d\001\002\000\016\003\uff7e\013" +
    "\uff7e\050\uff7e\052\uff7e\067\uff7e\117\uff7e\001\002\000\016" +
    "\005\050\006\052\007\062\011\u03fb\012\u03f5\035\046\001" +
    "\002\000\016\005\050\006\052\007\062\011\u03fb\012\u03f5" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\035\046\001\002\000\016\005\050\006\052" +
    "\007\062\011\u03fb\012\u03f5\035\046\001\002\000\016\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f5\035\046\001\002" +
    "\000\016\005\050\006\052\007\062\011\u03fb\012\u03f5\035" +
    "\046\001\002\000\030\003\uff84\013\uff84\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff84\052\uff84\067\uff84\117" +
    "\uff84\001\002\000\030\003\uff83\013\uff83\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff83\052\uff83\067\uff83\117" +
    "\uff83\001\002\000\030\003\uff80\013\uff80\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff80\052\uff80\067\uff80\117" +
    "\uff80\001\002\000\030\003\uff7f\013\uff7f\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff7f\052\uff7f\067\uff7f\117" +
    "\uff7f\001\002\000\030\003\uff82\013\uff82\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff82\052\uff82\067\uff82\117" +
    "\uff82\001\002\000\030\003\uff81\013\uff81\034\u0409\035\u040a" +
    "\036\u040c\037\u040b\040\u0408\050\uff81\052\uff81\067\uff81\117" +
    "\uff81\001\002\000\010\013\u0472\050\u0460\052\u0461\001\002" +
    "\000\032\013\u0416\034\u0409\035\u040a\036\u040c\037\u040b\040" +
    "\u0408\041\u0469\042\u0468\044\u0465\045\u0464\046\u0467\047\u0466" +
    "\001\002\000\010\003\uff86\067\uff86\117\uff86\001\002\000" +
    "\004\067\uffbc\001\002\000\054\003\uffe8\011\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033" +
    "\uffe8\053\uffe8\067\u03cb\074\uffe8\105\uffe8\106\uffe8\113\uffe8" +
    "\114\uffe8\115\uffe8\130\uffe8\134\uffe8\140\uffe8\001\002\000" +
    "\010\026\uffa6\067\uffa6\106\uffa6\001\002\000\024\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f5\023\051\024\043\025" +
    "\057\035\046\001\002\000\010\026\uffa5\067\uffa5\106\uffa5" +
    "\001\002\000\022\026\uffa4\034\u0409\035\u040a\036\u040c\037" +
    "\u040b\040\u0408\067\uffa4\106\uffa4\001\002\000\010\026\uffa7" +
    "\067\uffa7\106\uffa7\001\002\000\010\003\u0499\067\u03c8\117" +
    "\u049a\001\002\000\004\117\u047c\001\002\000\024\011\u03e4" +
    "\023\051\024\043\025\057\053\u03e1\067\u03c8\105\u03ee\130" +
    "\u03f3\140\u03e8\001\002\000\044\011\u03e4\022\uffec\023\051" +
    "\024\043\025\057\026\uffec\027\u03e3\030\u03df\033\u03f0\053" +
    "\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da" +
    "\140\u03e8\001\002\000\006\026\u047f\067\uffd3\001\002\000" +
    "\022\011\u03e4\023\051\024\043\025\057\053\u03e1\105\u03ee" +
    "\130\u03f3\140\u03e8\001\002\000\004\067\uffd6\001\002\000" +
    "\010\022\u0484\026\u0482\106\uffcc\001\002\000\004\067\u03c8" +
    "\001\002\000\004\106\u0495\001\002\000\022\003\u0486\005" +
    "\050\006\052\007\062\011\u03fb\012\u0459\035\046\051\u045e" +
    "\001\002\000\006\067\u03c8\117\u048e\001\002\000\006\067" +
    "\u03c8\117\u0487\001\002\000\004\067\u03c8\001\002\000\044" +
    "\011\u03e4\022\uffec\023\051\024\043\025\057\026\uffec\027" +
    "\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee" +
    "\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\010\022" +
    "\u0484\026\u0482\106\uffcc\001\002\000\004\106\uffce\001\002" +
    "\000\044\011\u03e4\022\uffec\023\051\024\043\025\057\026" +
    "\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000" +
    "\010\022\u0484\026\u0482\106\uffcc\001\002\000\004\106\uffcd" +
    "\001\002\000\004\067\u03c8\001\002\000\044\011\u03e4\022" +
    "\uffec\023\051\024\043\025\057\026\uffec\027\u03e3\030\u03df" +
    "\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130" +
    "\u03f3\134\u03da\140\u03e8\001\002\000\010\022\u0484\026\u0482" +
    "\106\uffcc\001\002\000\004\106\uffd0\001\002\000\044\011" +
    "\u03e4\022\uffec\023\051\024\043\025\057\026\uffec\027\u03e3" +
    "\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106" +
    "\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\010\022\u0484" +
    "\026\u0482\106\uffcc\001\002\000\004\106\uffd1\001\002\000" +
    "\004\027\u0496\001\002\000\004\067\uffd4\001\002\000\040" +
    "\011\u03e4\023\051\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\106\uffcf\001\002\000" +
    "\022\011\u03e4\023\051\024\043\025\057\053\u03e1\105\u03ee" +
    "\130\u03f3\140\u03e8\001\002\000\024\011\u03e4\023\051\024" +
    "\043\025\057\053\u03e1\067\u03c8\105\u03ee\130\u03f3\140\u03e8" +
    "\001\002\000\044\011\u03e4\022\uffec\023\051\024\043\025" +
    "\057\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb" +
    "\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8\001" +
    "\002\000\010\022\u0484\026\u0482\106\uffcc\001\002\000\004" +
    "\106\u049e\001\002\000\006\003\u049f\027\u04a0\001\002\000" +
    "\004\067\uffd9\001\002\000\004\067\uffda\001\002\000\044" +
    "\011\u03e4\022\uffec\023\051\024\043\025\057\026\uffec\027" +
    "\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee" +
    "\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\006\026" +
    "\u04a3\067\uffdd\001\002\000\022\011\u03e4\023\051\024\043" +
    "\025\057\053\u03e1\105\u03ee\130\u03f3\140\u03e8\001\002\000" +
    "\004\106\u04a5\001\002\000\006\003\u04a6\027\u04a7\001\002" +
    "\000\004\067\uffd7\001\002\000\004\067\uffdc\001\002\000" +
    "\006\026\u04ad\067\u03c8\001\002\000\010\022\u0484\026\u0482" +
    "\106\uffcc\001\002\000\004\106\u04ab\001\002\000\004\027" +
    "\u04ac\001\002\000\004\067\uffdb\001\002\000\022\011\u03e4" +
    "\023\051\024\043\025\057\053\u03e1\105\u03ee\130\u03f3\140" +
    "\u03e8\001\002\000\004\106\u04af\001\002\000\004\003\u04b0" +
    "\001\002\000\004\067\uffd8\001\002\000\006\026\u04b2\067" +
    "\uffd2\001\002\000\022\011\u03e4\023\051\024\043\025\057" +
    "\053\u03e1\105\u03ee\130\u03f3\140\u03e8\001\002\000\004\067" +
    "\uffd5\001\002\000\054\003\uffe6\011\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6\053" +
    "\uffe6\067\u03cb\074\uffe6\105\uffe6\106\uffe6\113\uffe6\114\uffe6" +
    "\115\uffe6\130\uffe6\134\uffe6\140\uffe6\001\002\000\022\026" +
    "\uff9a\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067\uff9a" +
    "\106\uff9a\001\002\000\010\026\uff99\067\uff99\106\uff99\001" +
    "\002\000\004\067\u03c8\001\002\000\004\067\u03c8\001\002" +
    "\000\040\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\004\106\u04bb\001" +
    "\002\000\004\030\u04bc\001\002\000\004\067\uffbf\001\002" +
    "\000\040\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\004\106\u04bf\001" +
    "\002\000\006\003\u04c0\030\u04c1\001\002\000\004\067\uffbe" +
    "\001\002\000\004\067\uffc0\001\002\000\054\003\uffe5\011" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\033\uffe5\053\uffe5\067\u03cb\074\uffe5\105\uffe5\106" +
    "\uffe5\113\uffe5\114\uffe5\115\uffe5\130\uffe5\134\uffe5\140\uffe5" +
    "\001\002\000\054\003\uffe9\011\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\053\uffe9" +
    "\067\u03cb\074\uffe9\105\uffe9\106\uffe9\113\uffe9\114\uffe9\115" +
    "\uffe9\130\uffe9\134\uffe9\140\uffe9\001\002\000\004\011\u0320" +
    "\001\002\000\010\026\uffae\067\uffae\106\uffae\001\002\000" +
    "\010\003\u04c8\021\u0323\073\u04c7\001\002\000\010\060\034" +
    "\061\025\062\032\001\002\000\004\021\u04c4\001\002\000" +
    "\010\026\uffa8\067\uffa8\106\uffa8\001\002\000\006\021\u04c4" +
    "\043\u04cb\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f5\035\046\001\002\000\010\026\uffa9\067\uffa9" +
    "\106\uffa9\001\002\000\016\021\u04c4\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\001\002\000\010\026\uffaa\067\uffaa" +
    "\106\uffaa\001\002\000\020\003\u04d2\005\050\006\052\007" +
    "\062\011\u03fb\012\u03f5\035\046\001\002\000\020\003\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\035\uffb7\001" +
    "\002\000\016\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408" +
    "\067\u03c8\001\002\000\004\067\u03c8\001\002\000\012\003" +
    "\u0141\067\u03cb\113\u0143\137\u0140\001\002\000\012\003\u0141" +
    "\106\u04d5\113\u0143\137\u0140\001\002\000\004\134\u04d6\001" +
    "\002\000\004\067\uffb9\001\002\000\014\003\u04dc\026\u04db" +
    "\067\u03cb\113\u04dd\137\u0140\001\002\000\012\003\u0141\106" +
    "\u04f0\113\u0143\137\u0140\001\002\000\004\067\u03c8\001\002" +
    "\000\012\003\u04e6\026\u04db\106\u04e7\113\u04e8\001\002\000" +
    "\004\067\uffaf\001\002\000\006\014\ufdc7\067\u03c8\001\002" +
    "\000\016\003\u04de\005\u04e2\006\u04e0\007\u04e1\011\u01ab\035" +
    "\046\001\002\000\004\067\uffb0\001\002\000\004\067\uffb1" +
    "\001\002\000\006\014\ufdca\067\ufda2\001\002\000\006\014" +
    "\ufdc9\067\ufda1\001\002\000\006\014\ufdcb\067\ufda3\001\002" +
    "\000\046\003\uffec\011\u03e4\023\051\024\043\025\057\026" +
    "\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8\001" +
    "\002\000\012\003\uffb2\026\uffb2\106\uffb2\113\uffb2\001\002" +
    "\000\004\067\u03c8\001\002\000\004\067\u03c8\001\002\000" +
    "\004\134\u04e9\001\002\000\016\003\u04de\005\050\006\052" +
    "\007\062\011\u01ab\035\046\001\002\000\004\067\uffba\001" +
    "\002\000\046\003\uffec\011\u03e4\023\051\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb4\026\uffb4\106\uffb4\113\uffb4\001" +
    "\002\000\046\003\uffec\011\u03e4\023\051\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb5\026\uffb5\106\uffb5\113\uffb5\001" +
    "\002\000\046\003\uffec\011\u03e4\023\051\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb3\026\uffb3\106\uffb3\113\uffb3\001" +
    "\002\000\004\003\u04f1\001\002\000\004\067\uffb8\001\002" +
    "\000\006\003\u0500\073\u04ff\001\002\000\006\013\uff94\021" +
    "\uff94\001\002\000\010\003\uff97\067\uff97\073\uff97\001\002" +
    "\000\004\011\u04fb\001\002\000\006\013\uff8f\021\uff8f\001" +
    "\002\000\006\013\u04f9\021\u04f8\001\002\000\010\003\u04f6" +
    "\011\u04f2\055\u04f5\001\002\000\010\003\uff98\067\uff98\073" +
    "\uff98\001\002\000\006\013\uff95\021\uff95\001\002\000\006" +
    "\003\u04fd\073\u04fc\001\002\000\010\060\034\061\025\062" +
    "\032\001\002\000\006\013\uff90\021\uff90\001\002\000\006" +
    "\013\uff93\021\uff93\001\002\000\010\060\034\061\025\062" +
    "\032\001\002\000\006\013\uff91\021\uff91\001\002\000\006" +
    "\013\uff92\021\uff92\001\002\000\006\003\u0504\073\u0503\001" +
    "\002\000\010\060\034\061\025\062\032\001\002\000\004" +
    "\067\u03c8\001\002\000\040\011\u03e4\023\051\024\043\025" +
    "\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000" +
    "\004\106\u0507\001\002\000\004\142\u0508\001\002\000\004" +
    "\067\u03c8\001\002\000\014\067\u03cb\107\ufff7\112\ufff7\133" +
    "\ufff7\142\ufff7\001\002\000\006\003\u050b\067\u03c8\001\002" +
    "\000\036\011\u03e4\023\051\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\042\003\uffec\011\u03e4\023" +
    "\051\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1" +
    "\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140" +
    "\u03e8\001\002\000\006\003\u050e\106\u050f\001\002\000\012" +
    "\107\ufff4\112\ufff4\133\ufff4\142\ufff4\001\002\000\006\003" +
    "\u0510\142\u0511\001\002\000\012\107\ufff5\112\ufff5\133\ufff5" +
    "\142\ufff5\001\002\000\004\067\u03c8\001\002\000\014\067" +
    "\u03cb\107\ufff8\112\ufff8\133\ufff8\142\ufff8\001\002\000\004" +
    "\106\u0514\001\002\000\004\142\u0515\001\002\000\012\107" +
    "\ufff3\112\ufff3\133\ufff3\142\ufff3\001\002\000\010\003\uff96" +
    "\012\u03d5\067\uff96\001\002\000\006\012\u03d5\067\uff96\001" +
    "\002\000\004\067\u03c8\001\002\000\040\011\u03e4\023\051" +
    "\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067" +
    "\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\004\106\u051b\001\002\000\004\107\u051c\001" +
    "\002\000\004\067\u03c8\001\002\000\014\067\u03cb\107\ufff1" +
    "\112\ufff1\133\ufff1\142\ufff1\001\002\000\006\003\u051f\067" +
    "\u03c8\001\002\000\036\011\u03e4\023\051\024\043\025\057" +
    "\027\u03e3\030\u03df\033\u03f0\053\u03e1\074\u03e7\105\u03ee\106" +
    "\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\042\003\uffec" +
    "\011\u03e4\023\051\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\006\003\u0522\106\u0523\001" +
    "\002\000\012\107\uffef\112\uffef\133\uffef\142\uffef\001\002" +
    "\000\006\003\u0525\107\u0524\001\002\000\004\067\u03c8\001" +
    "\002\000\012\107\ufff0\112\ufff0\133\ufff0\142\ufff0\001\002" +
    "\000\014\067\u03cb\107\ufff2\112\ufff2\133\ufff2\142\ufff2\001" +
    "\002\000\004\106\u0528\001\002\000\004\107\u0529\001\002" +
    "\000\012\107\uffee\112\uffee\133\uffee\142\uffee\001\002\000" +
    "\012\107\ufffc\112\ufffc\133\ufffc\142\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0528\000\006\002\005\003\004\001\001\000\004\052" +
    "\u03c8\001\001\000\004\053\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0188\001\001\000\012\054" +
    "\014\055\011\056\012\243\015\001\001\000\006\056\u0186" +
    "\243\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\057" +
    "\025\060\027\061\023\062\026\103\034\240\032\243\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\061\u017c\062\026\103\034" +
    "\240\032\243\030\001\001\000\006\240\122\242\120\001" +
    "\001\000\002\001\001\000\006\104\036\105\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\105\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\107\057\113\060\116\053\241\046\244\052\245" +
    "\044\001\001\000\002\001\001\000\010\113\116\116\053" +
    "\241\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\113\073\116" +
    "\053\241\046\001\001\000\010\113\072\116\053\241\046" +
    "\001\001\000\010\113\071\116\053\241\046\001\001\000" +
    "\010\113\070\116\053\241\046\001\001\000\010\113\067" +
    "\116\053\241\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\113\100\116\053\117\076\241" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\113\105\116\053\241" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\063" +
    "\127\064\131\240\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\240" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\065\151" +
    "\066\160\067\170\070\147\071\163\073\175\075\153\076" +
    "\166\102\172\103\146\106\165\110\144\111\174\112\171" +
    "\116\155\240\032\244\167\245\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\113\u0153\116\053\241\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\067\346\070\147\071\163\073\175\075\153\076\166" +
    "\102\172\103\146\106\165\110\144\111\174\112\171\116" +
    "\155\240\032\244\167\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\113\204\116\053\120\202\241" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\113\204\116\053\120" +
    "\210\241\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\240\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\113\222\115\220\116\053\241" +
    "\046\001\001\000\002\001\001\000\012\113\222\115\237" +
    "\116\053\241\046\001\001\000\002\001\001\000\010\113" +
    "\236\116\053\241\046\001\001\000\010\113\235\116\053" +
    "\241\046\001\001\000\010\113\234\116\053\241\046\001" +
    "\001\000\010\113\233\116\053\241\046\001\001\000\010" +
    "\113\232\116\053\241\046\001\001\000\010\113\231\116" +
    "\053\241\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\113\222\115\243" +
    "\116\053\241\046\001\001\000\012\113\222\115\242\116" +
    "\053\241\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\113\257\116\053\241\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\065\255\066\160\067\170\070\147\071\163" +
    "\073\175\075\153\076\166\102\172\103\146\106\165\110" +
    "\144\111\174\112\171\116\155\240\032\244\167\245\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\113\262\116\053\241\046" +
    "\001\001\000\002\001\001\000\012\113\222\115\264\116" +
    "\053\241\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\065\273\066\160\067\170" +
    "\070\147\071\163\073\175\075\153\076\166\102\172\103" +
    "\146\106\165\110\144\111\174\112\171\116\155\240\032" +
    "\244\167\245\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\065" +
    "\303\066\160\067\170\070\147\071\163\073\175\075\153" +
    "\076\166\102\172\103\146\106\165\110\144\111\174\112" +
    "\171\116\155\240\032\244\167\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\065\306\066\160\067" +
    "\170\070\147\071\163\073\175\075\153\076\166\102\172" +
    "\103\146\106\165\110\144\111\174\112\171\116\155\240" +
    "\032\244\167\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\113\222\115\311\116\053\241\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\065" +
    "\317\066\160\067\170\070\147\071\163\073\175\075\153" +
    "\076\166\102\172\103\146\106\165\110\144\111\174\112" +
    "\171\116\155\240\032\244\167\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\065\322\066\160\067" +
    "\170\070\147\071\163\073\175\075\153\076\166\102\172" +
    "\103\146\106\165\110\144\111\174\112\171\116\155\240" +
    "\032\244\167\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\113" +
    "\204\116\053\120\327\241\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\065\334\066\160\067\170\070\147\071\163\073\175" +
    "\075\153\076\166\102\172\103\146\106\165\110\144\111" +
    "\174\112\171\116\155\240\032\244\167\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\113\222\115\342" +
    "\116\053\241\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\107\351\113\060\116\053\241" +
    "\046\244\052\245\044\001\001\000\002\001\001\000\016" +
    "\107\353\113\060\116\053\241\046\244\052\245\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\113\222" +
    "\115\356\116\053\241\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\065\362\066\160" +
    "\067\170\070\147\071\163\073\175\075\153\076\166\102" +
    "\172\103\146\106\165\110\144\111\174\112\171\116\155" +
    "\240\032\244\167\245\044\001\001\000\002\001\001\000" +
    "\004\072\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\065\371\066" +
    "\160\067\170\070\147\071\163\073\175\075\153\076\166" +
    "\102\172\103\146\106\165\110\144\111\174\112\171\116" +
    "\155\240\032\244\167\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\113\222\115" +
    "\375\116\053\241\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\065\u0101\066\160\067" +
    "\170\070\147\071\163\073\175\075\153\076\166\102\172" +
    "\103\146\106\165\110\144\111\174\112\171\116\155\240" +
    "\032\244\167\245\044\001\001\000\002\001\001\000\004" +
    "\072\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\065\u0107\066\160\067\170\070\147" +
    "\071\163\073\175\075\153\076\166\102\172\103\146\106" +
    "\165\110\144\111\174\112\171\116\155\240\032\244\167" +
    "\245\044\001\001\000\002\001\001\000\004\072\u0109\001" +
    "\001\000\002\001\001\000\046\065\u010b\066\160\067\170" +
    "\070\147\071\163\073\175\075\153\076\166\102\172\103" +
    "\146\106\165\110\144\111\174\112\171\116\155\240\032" +
    "\244\167\245\044\001\001\000\002\001\001\000\004\072" +
    "\u010d\001\001\000\002\001\001\000\026\070\u010f\103\146" +
    "\106\165\110\144\111\174\112\171\116\155\240\032\244" +
    "\167\245\044\001\001\000\002\001\001\000\004\072\u0115" +
    "\001\001\000\046\065\u0112\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\102\172\103\146\106\165" +
    "\110\144\111\174\112\171\116\155\240\032\244\167\245" +
    "\044\001\001\000\002\001\001\000\004\072\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\065\u0118\066\160\067\170\070\147\071\163\073\175" +
    "\075\153\076\166\102\172\103\146\106\165\110\144\111" +
    "\174\112\171\116\155\240\032\244\167\245\044\001\001" +
    "\000\002\001\001\000\004\072\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\113\u011e\116\053\241\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\077\u0123\100\u0125\001\001" +
    "\000\002\001\001\000\004\100\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\065\u012b\066" +
    "\160\067\170\070\147\071\163\073\175\075\153\076\166" +
    "\101\u012d\102\172\103\146\106\165\110\144\111\174\112" +
    "\171\116\155\240\032\244\167\245\044\001\001\000\002" +
    "\001\001\000\046\065\u012e\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\102\172\103\146\106\165" +
    "\110\144\111\174\112\171\116\155\240\032\244\167\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\065\u012b\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\101\u0131\102\172\103\146" +
    "\106\165\110\144\111\174\112\171\116\155\240\032\244" +
    "\167\245\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\065\u012b\066" +
    "\160\067\170\070\147\071\163\073\175\075\153\076\166" +
    "\101\u0136\102\172\103\146\106\165\110\144\111\174\112" +
    "\171\116\155\240\032\244\167\245\044\001\001\000\002" +
    "\001\001\000\050\065\u012b\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\101\u0138\102\172\103\146" +
    "\106\165\110\144\111\174\112\171\116\155\240\032\244" +
    "\167\245\044\001\001\000\002\001\001\000\006\077\u013a" +
    "\100\u0125\001\001\000\004\100\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\227\u013e\230\u0141\001\001" +
    "\000\004\230\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\231\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\231\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\227\u014f\230\u0141\001\001" +
    "\000\004\230\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\113\222\115\u0157\116\053\241" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\065\u015b\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\102\172\103\146\106\165" +
    "\110\144\111\174\112\171\116\155\240\032\244\167\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\065\u0160\066\160\067" +
    "\170\070\147\071\163\073\175\075\153\076\166\102\172" +
    "\103\146\106\165\110\144\111\174\112\171\116\155\240" +
    "\032\244\167\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\065\u0163\066\160\067\170\070\147\071" +
    "\163\073\175\075\153\076\166\102\172\103\146\106\165" +
    "\110\144\111\174\112\171\116\155\240\032\244\167\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\065\u0166\066\160\067\170\070\147\071\163\073\175\075" +
    "\153\076\166\102\172\103\146\106\165\110\144\111\174" +
    "\112\171\116\155\240\032\244\167\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\063\u016c\064\131\240" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\065\u016f\066\160\067\170\070\147\071\163\073\175\075" +
    "\153\076\166\102\172\103\146\106\165\110\144\111\174" +
    "\112\171\116\155\240\032\244\167\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\063\u0173\064\131\240\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\065\u0177\066\160" +
    "\067\170\070\147\071\163\073\175\075\153\076\166\102" +
    "\172\103\146\106\165\110\144\111\174\112\171\116\155" +
    "\240\032\244\167\245\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\065\u017a\066\160\067\170\070\147" +
    "\071\163\073\175\075\153\076\166\102\172\103\146\106" +
    "\165\110\144\111\174\112\171\116\155\240\032\244\167" +
    "\245\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\057\u0180\060\027\061\023\062\026\103\034\240\032\243" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\057\u0184\060\027\061\023\062\026\103" +
    "\034\240\032\243\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\u0189\001\001\000\002\001\001\000\010\154\u018d\155\u018b" +
    "\156\u018e\001\001\000\004\156\u0314\001\001\000\002\001" +
    "\001\000\010\162\u0190\163\u0192\164\u0191\001\001\000\002" +
    "\001\001\000\004\240\u02f7\001\001\000\014\165\u0196\166" +
    "\u0195\167\u0197\237\u0199\240\u0198\001\001\000\002\001\001" +
    "\000\004\164\u0193\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\167\u0197\237\u02f3\240\u0198\001\001\000\004" +
    "\177\u01db\001\001\000\002\001\001\000\006\170\u019c\172" +
    "\u019d\001\001\000\002\001\001\000\006\171\u01cd\173\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\173\u01a2\001\001\000\002" +
    "\001\001\000\010\232\u01a7\234\u01a9\241\u01a6\001\001\000" +
    "\002\001\001\000\010\232\u01cb\234\u01a9\241\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\232\u01b0\234\u01a9\235\u01af\236\u01b1\241\u01a6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\232\u01b3\234\u01a9\241\u01a6\001\001\000\002" +
    "\001\001\000\010\232\u01bd\234\u01a9\241\u01a6\001\001\000" +
    "\010\232\u01bc\234\u01a9\241\u01a6\001\001\000\010\232\u01bb" +
    "\234\u01a9\241\u01a6\001\001\000\010\232\u01ba\234\u01a9\241" +
    "\u01a6\001\001\000\010\232\u01b9\234\u01a9\241\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\232\u01b0\234\u01a9\235" +
    "\u01c2\236\u01b1\241\u01a6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\232\u01b0\234\u01a9\235\u01c9" +
    "\236\u01b1\241\u01a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\232\u01d0\234\u01a9\241\u01a6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\232\u01d5\234\u01a9\241\u01a6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\167\u01f0\170\u0201" +
    "\200\u02f2\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206" +
    "\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8" +
    "\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000" +
    "\002\001\001\000\052\167\u01f0\170\u0201\200\u02f1\201\u01f2" +
    "\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215" +
    "\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4" +
    "\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\167\u01f0\170\u0201\200\u01ec\201\u01f2" +
    "\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215" +
    "\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4" +
    "\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\171\u01cd\001\001\000\046\167\u01f0\170\u0201\202\u0272" +
    "\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216" +
    "\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7" +
    "\234\u01ed\240\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\167\u01f0\170\u0201\200\u0203\201\u01f2\202\u01fb" +
    "\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216" +
    "\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7" +
    "\234\u01ed\240\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\232\u020a\233\u020b\234\u01a9\241" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\232\u020a\233\u020e\234\u01a9\241\u01a6\001" +
    "\001\000\002\001\001\000\012\232\u020a\233\u0212\234\u01a9" +
    "\241\u01a6\001\001\000\012\232\u020a\233\u0211\234\u01a9\241" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\232\u0222\234\u01a9\241\u01a6\001\001\000\010" +
    "\232\u0221\234\u01a9\241\u01a6\001\001\000\010\232\u0220\234" +
    "\u01a9\241\u01a6\001\001\000\010\232\u021f\234\u01a9\241\u01a6" +
    "\001\001\000\010\232\u021e\234\u01a9\241\u01a6\001\001\000" +
    "\010\232\u021d\234\u01a9\241\u01a6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\232\u0225\234\u01a9\241\u01a6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\232\u020a\233\u0229" +
    "\234\u01a9\241\u01a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\167\u01f0\170\u0201\200\u022c\201\u01f2\202\u01fb" +
    "\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216" +
    "\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7" +
    "\234\u01ed\240\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\167\u01f0" +
    "\170\u0201\200\u0231\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205" +
    "\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5" +
    "\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\167\u01f0\170\u0201\200\u0235\201\u01f2\202\u01fb\203" +
    "\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea" +
    "\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234" +
    "\u01ed\240\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\167\u01f0\170\u0201\200\u0239\201" +
    "\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe" +
    "\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225" +
    "\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\232\u0242\234\u01a9\241\u01a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\227\u0245\230\u0141" +
    "\001\001\000\004\230\u0149\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\227\u024a\230\u0141" +
    "\001\001\000\004\230\u0149\001\001\000\002\001\001\000" +
    "\006\227\u024d\230\u0141\001\001\000\004\230\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\227\u0252\230\u0141\001\001\000\004\230\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\161\u025a\207" +
    "\u025b\212\u0257\213\u025d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\161\u025a\212\u0260\213\u025d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\210\u0266\232\u0264\234\u01a9" +
    "\241\u01a6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\232\u0270\234\u01a9\241\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\232\u026b\234" +
    "\u01a9\241\u01a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\232\u026e\234\u01a9\241\u01a6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\232\u020a\233\u0275\234\u01a9\241\u01a6" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\167" +
    "\u01f0\170\u0201\200\u0278\201\u01f2\202\u01fb\203\u01f9\204\u01ee" +
    "\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220" +
    "\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\167\u01f0\170\u0201\200\u027d" +
    "\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214" +
    "\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd" +
    "\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\167\u01f0" +
    "\170\u0201\200\u0281\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205" +
    "\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5" +
    "\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\221\u0284" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\167\u01f0\170\u0201\200\u0289" +
    "\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214" +
    "\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd" +
    "\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\232\u020a\233\u028e\234\u01a9\241\u01a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\167\u01f0\170\u0201" +
    "\200\u0291\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206" +
    "\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8" +
    "\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\167\u01f0\170\u0201\200\u0296\201\u01f2\202" +
    "\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3" +
    "\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226" +
    "\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\167\u01f0\170\u0201\200" +
    "\u029a\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc" +
    "\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224" +
    "\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\221\u029d\001\001\000" +
    "\002\001\001\000\052\167\u01f0\170\u0201\200\u029f\201\u01f2" +
    "\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215" +
    "\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4" +
    "\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\167\u01f0\170\u0201\200\u02a2\201\u01f2" +
    "\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215" +
    "\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4" +
    "\226\u01f7\234\u01ed\240\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\240\u02a5\001\001\000\002\001\001" +
    "\000\010\232\u02a7\234\u01a9\241\u01a6\001\001\000\002\001" +
    "\001\000\012\232\u020a\233\u02a9\234\u01a9\241\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\223\u02b0\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\232\u02bb" +
    "\234\u01a9\241\u01a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\167\u01f0" +
    "\170\u0201\200\u02b4\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205" +
    "\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5" +
    "\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\167\u01f0\170\u0201\200\u02b8\201\u01f2\202\u01fb\203" +
    "\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea" +
    "\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234" +
    "\u01ed\240\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\167\u01f0\170\u0201\200\u02be\201\u01f2\202\u01fb\203\u01f9" +
    "\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217" +
    "\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed" +
    "\240\u0198\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u02c9\001\001\000\002\001\001\000\006\175\u02d3\176\u02cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\175" +
    "\u02cf\176\u02cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\232\u01b0\234\u01a9\235\u02d0\236\u01b1\241\u01a6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\161\u02d7\211\u02d6\213\u02d9\001\001\000\002\001\001" +
    "\000\004\213\u02dd\001\001\000\004\161\u02db\001\001\000" +
    "\004\161\u02da\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\161\u02df\001\001\000\004\161\u02de\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\170\u0201\205\u02e4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\167\u01f0\170\u0201\200\u02f0\201\u01f2" +
    "\202\u01fb\203\u01f9\204\u01ee\205\u01ff\206\u01fc\214\u01fe\215" +
    "\u01e3\216\u01ea\217\u01f8\220\u01e5\222\u01e8\224\u01fd\225\u01e4" +
    "\226\u01f7\234\u01ed\240\u0198\001\001\000\052\167\u01f0\170" +
    "\u0201\200\u02ed\201\u01f2\202\u01fb\203\u01f9\204\u01ee\205\u01ff" +
    "\206\u01fc\214\u01fe\215\u01e3\216\u01ea\217\u01f8\220\u01e5\222" +
    "\u01e8\224\u01fd\225\u01e4\226\u01f7\234\u01ed\240\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\174\u02c9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\232\u02fc\234\u01a9\241" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\157" +
    "\u0307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\160\u030e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\114\u030a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\122\u0318\123\u0319\124\u0316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\u031a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\125" +
    "\u0320\126\u0321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\126\u0331\131\u032e\132\u032d\133\u0329\147" +
    "\u032b\150\u032a\244\u032c\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\126\u0331\127\u0339\130\u033b\132\u0336\133\u0329" +
    "\137\u033a\142\u0337\143\u033e\147\u032b\150\u032a\244\u032c\245" +
    "\044\001\001\000\014\145\u03ad\146\u037a\147\u034f\152\u0377" +
    "\241\u034e\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\145\u0378\146\u037a\147\u034f\152\u0377\241\u034e\001\001" +
    "\000\030\126\u0331\130\u0375\132\u0336\133\u0329\137\u033a\142" +
    "\u0337\143\u033e\147\u032b\150\u032a\244\u032c\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\u0346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\126\u0331\131\u0349\132" +
    "\u032d\133\u0329\147\u032b\150\u032a\244\u032c\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\146\u0352\147\u034f\241\u034e\001\001\000\010\146\u0371" +
    "\147\u034f\241\u034e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\146\u0361\147\u034f\241\u034e\001\001\000\010\146" +
    "\u035f\147\u034f\241\u034e\001\001\000\002\001\001\000\010" +
    "\146\u035e\147\u034f\241\u034e\001\001\000\002\001\001\000" +
    "\010\146\u035d\147\u034f\241\u034e\001\001\000\010\146\u035c" +
    "\147\u034f\241\u034e\001\001\000\010\146\u035b\147\u034f\241" +
    "\u034e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\146\u0366\147\u034f\241\u034e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\146\u036b\147\u034f\151\u036a\241\u034e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\146\u0370\147\u034f\241\u034e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\146\u03a8\147\u034f\152\u03a6\241\u034e\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\140\u0390\141" +
    "\u038d\001\001\000\002\001\001\000\012\146\u037a\147\u034f" +
    "\152\u037c\241\u034e\001\001\000\002\001\001\000\012\146" +
    "\u037a\147\u034f\152\u0380\241\u034e\001\001\000\012\146\u037a" +
    "\147\u034f\152\u037f\241\u034e\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\146\u038c\147\u034f\241\u034e\001\001" +
    "\000\010\146\u038b\147\u034f\241\u034e\001\001\000\010\146" +
    "\u038a\147\u034f\241\u034e\001\001\000\010\146\u0389\147\u034f" +
    "\241\u034e\001\001\000\010\146\u0388\147\u034f\241\u034e\001" +
    "\001\000\010\146\u0387\147\u034f\241\u034e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\145\u0395\146\u037a\147\u034f\152\u0377\241\u034e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\126\u0331\131\u0393\132\u032d\133\u0329\147\u032b\150" +
    "\u032a\244\u032c\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\140\u0397\141\u038d\001" +
    "\001\000\002\001\001\000\006\140\u039e\141\u038d\001\001" +
    "\000\022\126\u0331\131\u039a\132\u032d\133\u0329\147\u032b\150" +
    "\u032a\244\u032c\245\044\001\001\000\006\140\u039d\141\u038d" +
    "\001\001\000\006\140\u039c\141\u038d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\140\u03a5" +
    "\141\u038d\001\001\000\022\126\u0331\131\u03a1\132\u032d\133" +
    "\u0329\147\u032b\150\u032a\244\u032c\245\044\001\001\000\006" +
    "\140\u03a4\141\u038d\001\001\000\006\140\u03a3\141\u038d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\126\u0331\131\u03af\132\u032d\133\u0329\147" +
    "\u032b\150\u032a\244\u032c\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\134\u03b4\135\u03b7\146\u03b6\147\u034f\241\u034e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\135\u03bb\146\u03b6" +
    "\147\u034f\241\u034e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\136\u03be" +
    "\146\u03c0\147\u034f\241\u034e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\146\u03c3\147\u034f" +
    "\241\u034e\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\146\u03c6\147\u034f\241\u034e\244\u03c5\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\u03cd\005\u03c9\006\u03cb\007\u03cc\010\u03ce\243\u03cf" +
    "\001\001\000\012\006\u0529\007\u03cc\010\u03ce\243\u03cf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0501\001\001" +
    "\000\004\042\u03d5\001\001\000\006\043\u04f6\044\u04f2\001" +
    "\001\000\002\001\001\000\004\240\u03d7\001\001\000\004" +
    "\052\u03d8\001\001\000\044\011\u03ec\012\u03f1\013\u03df\014" +
    "\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea" +
    "\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245" +
    "\044\001\001\000\004\026\u04ce\001\001\000\004\033\u04c4" +
    "\001\001\000\002\001\001\000\004\052\u04c2\001\001\000" +
    "\004\052\u04c1\001\001\000\014\045\u045b\046\u04b6\047\u0459" +
    "\050\u03f7\241\u03f8\001\001\000\002\001\001\000\010\045" +
    "\u04b4\050\u03f7\241\u03f8\001\001\000\004\052\u04b3\001\001" +
    "\000\014\045\u045b\046\u0479\047\u0459\050\u03f7\241\u03f8\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u0473" +
    "\001\001\000\004\052\u0453\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u044e\001\001\000\002\001\001\000\004\126\u0445\001" +
    "\001\000\004\052\u0444\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\013\u0416\014\u03eb\015\u03dc\017\u03e5\023" +
    "\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8" +
    "\041\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001" +
    "\001\000\014\037\u03f6\040\u03fc\045\u03f9\050\u03f7\241\u03f8" +
    "\001\001\000\010\045\u0414\050\u03f7\241\u03f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\u03ff" +
    "\050\u03f7\051\u0402\241\u03f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\u0405\050\u03f7\241\u03f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u0410\050\u03f7" +
    "\241\u03f8\001\001\000\010\045\u040f\050\u03f7\241\u03f8\001" +
    "\001\000\010\045\u040e\050\u03f7\241\u03f8\001\001\000\010" +
    "\045\u040d\050\u03f7\241\u03f8\001\001\000\010\045\u040c\050" +
    "\u03f7\241\u03f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\u0413\045\u03f9\050\u03f7\241\u03f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\u0427\240\u041a\001\001" +
    "\000\006\020\u0419\240\u041a\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u041c\050\u03f7\241\u03f8\001\001" +
    "\000\002\001\001\000\010\045\u041e\050\u03f7\241\u03f8\001" +
    "\001\000\004\021\u0420\001\001\000\010\045\u0426\050\u03f7" +
    "\241\u03f8\001\001\000\004\052\u0421\001\001\000\044\011" +
    "\u0422\012\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee" +
    "\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041" +
    "\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001" +
    "\000\004\022\u0425\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\u042a\050\u03f7\241\u03f8\001\001\000\002\001" +
    "\001\000\010\045\u0432\050\u03f7\241\u03f8\001\001\000\004" +
    "\021\u042d\001\001\000\004\052\u042e\001\001\000\044\011" +
    "\u042f\012\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee" +
    "\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041" +
    "\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001" +
    "\000\004\022\u0431\001\001\000\002\001\001\000\004\021" +
    "\u0434\001\001\000\004\052\u0439\001\001\000\004\052\u0435" +
    "\001\001\000\044\011\u0436\012\u03f1\013\u03df\014\u03eb\015" +
    "\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da" +
    "\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001" +
    "\001\000\002\001\001\000\004\022\u0438\001\001\000\002" +
    "\001\001\000\044\011\u043a\012\u03f1\013\u03df\014\u03eb\015" +
    "\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da" +
    "\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001" +
    "\001\000\002\001\001\000\004\022\u043c\001\001\000\002" +
    "\001\001\000\010\045\u043e\050\u03f7\241\u03f8\001\001\000" +
    "\004\021\u043f\001\001\000\004\052\u0440\001\001\000\044" +
    "\011\u0441\012\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023" +
    "\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8" +
    "\041\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001" +
    "\001\000\004\022\u0443\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\240\u0448\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u044a\050\u03f7" +
    "\241\u03f8\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u044d\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\u0450\040\u03fc\045\u03f9\050\u03f7\241\u03f8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0454\012\u03f1\013\u03df\014\u03eb\015\u03dc\017" +
    "\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db" +
    "\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\045\u045b\046\u0472" +
    "\047\u0459\050\u03f7\241\u03f8\001\001\000\014\045\u045b\046" +
    "\u045a\047\u0459\050\u03f7\241\u03f8\001\001\000\012\045\u0470" +
    "\047\u046f\050\u03f7\241\u03f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\045\u045b\047\u045e\050\u03f7\241\u03f8\001\001\000\002\001" +
    "\001\000\012\045\u045b\047\u0462\050\u03f7\241\u03f8\001\001" +
    "\000\012\045\u045b\047\u0461\050\u03f7\241\u03f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u046e\050\u03f7" +
    "\241\u03f8\001\001\000\010\045\u046d\050\u03f7\241\u03f8\001" +
    "\001\000\010\045\u046c\050\u03f7\241\u03f8\001\001\000\010" +
    "\045\u046b\050\u03f7\241\u03f8\001\001\000\010\045\u046a\050" +
    "\u03f7\241\u03f8\001\001\000\010\045\u0469\050\u03f7\241\u03f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\u0478\045\u0477\050\u03f7\241\u03f8\244\u0476\245\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u049a\001\001\000\002\001\001\000\026\014" +
    "\u047d\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0" +
    "\052\u047c\244\u03e9\245\044\001\001\000\044\011\u0480\012" +
    "\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1" +
    "\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050" +
    "\u03f0\244\u03e9\245\044\001\001\000\002\001\001\000\024" +
    "\014\u047f\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050" +
    "\u03f0\244\u03e9\245\044\001\001\000\002\001\001\000\004" +
    "\016\u0482\001\001\000\004\052\u0496\001\001\000\002\001" +
    "\001\000\014\045\u045b\046\u0484\047\u0459\050\u03f7\241\u03f8" +
    "\001\001\000\004\052\u048e\001\001\000\004\052\u0487\001" +
    "\001\000\004\052\u048a\001\001\000\044\011\u0488\012\u03f1" +
    "\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025" +
    "\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0" +
    "\244\u03e9\245\044\001\001\000\004\016\u0489\001\001\000" +
    "\002\001\001\000\044\011\u048b\012\u03f1\013\u03df\014\u03eb" +
    "\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032" +
    "\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044" +
    "\001\001\000\004\016\u048c\001\001\000\002\001\001\000" +
    "\004\052\u0491\001\001\000\044\011\u048f\012\u03f1\013\u03df" +
    "\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\004\016\u0490\001\001\000\002\001" +
    "\001\000\044\011\u0492\012\u03f1\013\u03df\014\u03eb\015\u03dc" +
    "\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da\034" +
    "\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001\001" +
    "\000\004\016\u0493\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u0497\012\u03f1\013\u03df" +
    "\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\002\001\001\000\024\014\u04b0\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\026\014\u04a1\031\u03ea\032\u03da\034" +
    "\u03db\036\u03e8\041\u03e4\050\u03f0\052\u04a0\244\u03e9\245\044" +
    "\001\001\000\044\011\u049b\012\u03f1\013\u03df\014\u03eb\015" +
    "\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da" +
    "\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001" +
    "\001\000\004\016\u049c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u04a8\012\u03f1\013\u03df\014\u04a7\015\u03dc\017\u03e5\023\u03ee" +
    "\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041" +
    "\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001" +
    "\000\024\014\u04a3\031\u03ea\032\u03da\034\u03db\036\u03e8\041" +
    "\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u044e\001\001\000\004\016\u04a9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\u04ad\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0" +
    "\244\u03e9\245\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\u04b2" +
    "\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244" +
    "\u03e9\245\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u04bc\001" +
    "\001\000\004\052\u04b8\001\001\000\044\011\u04b9\012\u03f1" +
    "\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025" +
    "\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0" +
    "\244\u03e9\245\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u04bd\012\u03f1\013\u03df" +
    "\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\126\u04c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\240\u04c9\001\001\000\004\033\u04c8" +
    "\001\001\000\002\001\001\000\004\033\u04cb\001\001\000" +
    "\010\045\u04cc\050\u03f7\241\u03f8\001\001\000\002\001\001" +
    "\000\004\033\u04cd\001\001\000\002\001\001\000\010\045" +
    "\u04d0\050\u03f7\241\u03f8\001\001\000\002\001\001\000\004" +
    "\052\u04d6\001\001\000\004\052\u04d2\001\001\000\006\227" +
    "\u04d3\230\u0141\001\001\000\004\230\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\u04d9\030\u04d8\227" +
    "\u04d7\230\u0141\001\001\000\004\230\u0149\001\001\000\004" +
    "\052\u04ed\001\001\000\004\030\u04e4\001\001\000\002\001" +
    "\001\000\004\052\u04e2\001\001\000\004\241\u04de\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u04e3\012\u03f1" +
    "\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025" +
    "\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0" +
    "\244\u03e9\245\044\001\001\000\002\001\001\000\004\052" +
    "\u04eb\001\001\000\004\052\u04e9\001\001\000\002\001\001" +
    "\000\004\241\u04de\001\001\000\002\001\001\000\044\011" +
    "\u04ea\012\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee" +
    "\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041" +
    "\u03e4\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001" +
    "\000\044\011\u04ec\012\u03f1\013\u03df\014\u03eb\015\u03dc\017" +
    "\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db" +
    "\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044\001\001\000" +
    "\002\001\001\000\044\011\u04ee\012\u03f1\013\u03df\014\u03eb" +
    "\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea\032" +
    "\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\u04f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\240\u04fd\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\240\u0500\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\240" +
    "\u0509\001\001\000\004\052\u0504\001\001\000\044\011\u0505" +
    "\012\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024" +
    "\u03e1\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4" +
    "\050\u03f0\244\u03e9\245\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u0508\001\001\000\002\001\001" +
    "\000\004\052\u050b\001\001\000\044\011\u0512\012\u03f1\013" +
    "\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd" +
    "\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244" +
    "\u03e9\245\044\001\001\000\044\011\u050c\012\u03f1\013\u03df" +
    "\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0511\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u051d\001\001\000\004\042\u0517" +
    "\001\001\000\004\052\u0518\001\001\000\044\011\u0519\012" +
    "\u03f1\013\u03df\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1" +
    "\025\u03dd\031\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050" +
    "\u03f0\244\u03e9\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u051c\001\001\000\002\001\001\000" +
    "\004\052\u051f\001\001\000\044\011\u0526\012\u03f1\013\u03df" +
    "\014\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031" +
    "\u03ea\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9" +
    "\245\044\001\001\000\044\011\u0520\012\u03f1\013\u03df\014" +
    "\u03eb\015\u03dc\017\u03e5\023\u03ee\024\u03e1\025\u03dd\031\u03ea" +
    "\032\u03da\034\u03db\036\u03e8\041\u03e4\050\u03f0\244\u03e9\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u0525\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ErrorManager errores;
    private ColeccionInstr instrucciones; 

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
        instrucciones = new ColeccionInstr();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
        System.out.println("No se esperaba un token tipo <"+sym.terminalNames[s.sym]+"> en ("+linea+","+columna+")");
    }

    public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        errores.getErrores().remove(errores.getErrores().size()-1);
        errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= visual java python principal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // visual ::= SEPARADOR_VB espaciosVb metodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visual",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodosVb ::= dclMetodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodosVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dclMetodosVb ::= dclMetodosVb dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dclMetodosVb ::= dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dclMetodoVb ::= funcionVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object metodoInstr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 instrucciones.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dclMetodoVb ::= procedimientoVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object metodoInstr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 instrucciones.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null&&tipo!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb error espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo para la funcion declarada, se esperaba un tipo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionVb ::= publicOpcional FUNCTION error dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para la funcion declarada, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada FUNCTION.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada END.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato error bloqueVb END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.VOID,id,parametros,instrucciones,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedimientoVb ::= publicOpcional SUB error dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el procedimiento declarado, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada SUB.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada END.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb error bloqueVb END SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloqueVb ::= sentenciasVb 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloqueVb ::= 
            {
              Object RESULT =null;
		
                                            RESULT = new ArrayList();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciasVb ::= sentenciasVb sentenciaVb 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciasVb ::= sentenciaVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaVb ::= sentenciaIfVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaVb ::= sentenciaForVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaVb ::= sentenciaWhileVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaVb ::= sentenciaDoWhileVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaVb ::= sentenciaSwitchVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaVb ::= sentenciaSimpleVb espaciosVb 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaSimpleVb ::= sentenciaDeclaracionVb 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaSimpleVb ::= sentenciaAsignacionVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaSimpleVb ::= ingresoDatos 
            {
              Object RESULT =null;
		int accionIngresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionIngresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object accionIngreso = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accionIngreso!=null) instrucciones.add(new IngresoInstr(accionIngreso, new Pos(accionIngresoleft, accionIngresoright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaSimpleVb ::= sentenciaEscribirVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaSimpleVb ::= llamadaMetodoVb 
            {
              Object RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaSimpleVb ::= sentenciaReturnVb 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END IF 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object instruccionesSino = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccionesSino!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,new SinoInstr(instruccionesSino,new Pos(instruccionesSinoleft,instruccionesSinoright), new Pos(posleft,posright)));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END IF 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaIfVb ::= IF error THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sinoVb ::= ELSEIF condicionVb THEN espaciosVb bloqueVb sinoVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sinoVb ::= ELSEIF condicionVb espaciosVb bloqueVb sinoVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sinoVb ::= ELSE espaciosVb bloqueVb 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&instrucciones!=null){
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sinoVb ::= ELSEIF error espaciosVb bloqueVb sinoVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sinoVb ::= ELSEIF error THEN espaciosVb bloqueVb sinoVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sinoVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaForVb ::= FOR error tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaForVb ::= FOR ID tipoForVb error TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de inicio.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb error aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de finalizacion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb error espaciosVb bloqueVb NEXT idNextVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor de aumento para cada ciclo del for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoForVb ::= tiposDeDato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipoForVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aumentoForVb ::= STEP expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aumentoForVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // idNextVb ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // idNextVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaWhileVb ::= WHILE error espaciosVb bloqueVb END WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE condicionVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP error condicionVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitchVb END SELECT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaSwitchVb ::= SELECT caseVb error espaciosVb contenidoSwitch END SELECT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitch END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada SELECT.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caseVb ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caseVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenidoSwitchVb ::= contenidoSwitchVb valorCaseVb espaciosVb bloqueVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenidoSwitchVb ::= contenidoSwitchVb error espaciosVb bloqueVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contenidoSwitchVb ::= valorCaseVb espaciosVb bloqueVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contenidoSwitchVb ::= error espaciosVb bloqueVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso .", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valorCaseVb ::= CASE valorAtomico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valorCaseVb ::= CASE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor primitivo constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valorCaseVb ::= ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaDeclaracionVb ::= declaracionVariableVb masDeclaracionVariableVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato IGUAL expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionVariableVb ::= DIM listadoId error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) declarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato masDeclaracionVariableVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // masDeclaracionVariableVb ::= COMA listadoId error masDeclaracionVariableVb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) delcarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaAsignacionVb ::= ID IGUAL accionAsignacionVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaAsignacionVb ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignacion ( = expresion).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // accionAsignacionVb ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // accionAsignacionVb ::= expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaEscribirVb ::= MENSAJE PAR_A mensajesVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaEscribirVb ::= MENSAJELN PAR_A mensajesVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaEscribirVb ::= MENSAJE PAR_A PAR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaEscribirVb ::= MENSAJELN PAR_A PAR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // mensajesVb ::= mensajesVb AMPERSON mensajeVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // mensajesVb ::= mensajeVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mensajeVb ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mensajeVb ::= expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mensajeVb ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaReturnVb ::= RETURN expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaReturnVb ::= RETURN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // dclParametrosVb ::= PAR_A listadoParametrosVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // dclParametrosVb ::= PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dclParametrosVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listadoParametrosVb ::= listadoParametrosVb COMA parametroVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listadoParametrosVb ::= parametroVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametroVb ::= BYVAL ID AS tiposDeDato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametroVb ::= ID AS tiposDeDato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametroVb ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametroVb ::= BYVAL ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametroVb ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una declaracion de variable.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionArVb ::= expresionArVb MAS expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionArVb ::= expresionArVb MENOS expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionArVb ::= expresionArVb DIV expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionArVb ::= expresionArVb POR expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionArVb ::= expresionArVb MOD expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionArVb ::= PAR_A expresionArVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionArVb ::= llamadaMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionArVb ::= valorAtomico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condicionVb ::= PAR_A expresionBoolVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condicionVb ::= expresionBoolVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionBoolVb ::= expresionArVb DISTINTO expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionBoolVb ::= expresionArVb COMPARADOR expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionBoolVb ::= expresionArVb MENOR expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionBoolVb ::= expresionArVb MENORIGUAL expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresionBoolVb ::= expresionArVb MAYOR expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresionBoolVb ::= expresionArVb MAYORIGUAL expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresionBoolVb ::= expresionBoolVb AND expresionBoolVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionBoolVb ::= expresionBoolVb OR expresionBoolVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionBoolVb ::= NOT expresionBoolVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // llamadaMetodoVb ::= ID PAR_A listadoParametrosEnviadosVb PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // llamadaMetodoVb ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listadoParametrosEnviadosVb ::= expresionArVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // listadoParametrosEnviadosVb ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // espaciosVb ::= espaciosVb FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // espaciosVb ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // java ::= SEPARADOR_JAVA clasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // clasesJv ::= dclClasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // clasesJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // dclClasesJv ::= dclClasesJv dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // dclClasesJv ::= dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // dclClaseJv ::= publicOpcional CLASS ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // dclClaseJv ::= publicOpcional error ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra clave Class", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // dclClaseJv ::= publicOpcional CLASS error LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el identificador para la clase, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // dclClaseJv ::= publicOpcional CLASS ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo (contenido de la clase).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // contenidoClaseJv ::= sentenciasDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // contenidoClaseJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentenciasDeClaseJv ::= sentenciasDeClaseJv sentenciaDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentenciasDeClaseJv ::= sentenciaDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentenciaDeClaseJv ::= sentenciaDeclaracionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentenciaDeClaseJv ::= dclMetodoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // dclMetodoJv ::= publicOpcional error ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del procedimiento/funcion declarado", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dclMetodoJv ::= publicOpcional tiposDeMetodo error PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el metodo, se esperaba un identificador", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un listado de parametros (lleno o vacio) dentro de parentesis.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dclParametrosJv ::= listadoParametrosJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dclParametrosJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // listadoParametrosJv ::= tiposDeDato ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // listadoParametrosJv ::= listadoParametrosJv COMA error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // listadoParametrosJv ::= tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // listadoParametrosJv ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // bloqueJv ::= sentenciasJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bloqueJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentenciasJv ::= sentenciasJv sentenciaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentenciasJv ::= sentenciaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentenciaJv ::= sentenciaIfJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentenciaJv ::= sentenciaForJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentenciaJv ::= sentenciaWhileJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentenciaJv ::= sentenciaSwitchJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentenciaJv ::= sentenciaDoWhileJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentenciaJv ::= sentenciaSimpleJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentenciaSimpleJv ::= sentenciaDeclaracionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentenciaSimpleJv ::= sentenciaAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentenciaSimpleJv ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaSimpleJv ::= sentenciaEscribirJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentenciaSimpleJv ::= llamadaMetodoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaSimpleJv ::= sentenciaReturnJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentenciaSimpleJv ::= sentenciaBreakJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C sentenciaSimpleJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentenciaIfJv ::= IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sentenciaIfJv ::= IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C error sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo o una sentencia simple", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sinoJv ::= ELSE LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // sinoJv ::= ELSE IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sinoJv ::= ELSE IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // sinoJv ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sinoJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se asignó un valor de inicio para el ciclo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // sentenciaForJv ::= FOR PAR_A tiposDeDato error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se declaro el identificador a evaluar con cada iteracion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA error FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // sentenciaForJv ::= FOR error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // modificadorForJv ::= IGUAL expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // modificadorForJv ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // modificadorForJv ::= DISMINUCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // modificadorForJv ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignación o un modificador (++, --).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // sentenciaWhileJv ::= WHILE error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sentenciaWhileJv ::= WHILE PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv PAR_C LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sentenciaSwitchJv ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sentenciaSwitchJv ::= SWITCH PAR_A error PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv error LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // contenidoSwitchJv ::= contenidoSwitchJv valorSwitchJv DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // contenidoSwitchJv ::= valorSwitchJv DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // contenidoSwitchJv ::= contenidoSwitchJv error DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // contenidoSwitchJv ::= error DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // valorSwitchJv ::= CASE ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // valorSwitchJv ::= CASE FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // valorSwitchJv ::= CASE CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // valorSwitchJv ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // bloqueSwichJv ::= LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwichJv",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // bloqueSwichJv ::= bloqueJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwichJv",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sentenciaDeclaracionJv ::= tiposDeDato listadoAsignacionesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // listadoAsignacionesJv ::= listadoAsignacionesJv asignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // listadoAsignacionesJv ::= asignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // asignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // asignacionJv ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // sentenciaAsignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // sentenciaAsignacionJv ::= THIS ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // accionAsignacionJv ::= expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // accionAsignacionJv ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // sentenciaEscribirJv ::= MENSAJE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // sentenciaEscribirJv ::= MENSAJE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sentenciaEscribirJv ::= MENSAJELN PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // sentenciaEscribirJv ::= MENSAJELN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expresionMensajeJv ::= expresionMensajeJv MAS expresionMensajeJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expresionMensajeJv ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expresionMensajeJv ::= expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expresionMensajeJv ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // sentenciaReturnJv ::= RETURN expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // sentenciaReturnJv ::= RETURN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sentenciaBreakJv ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreakJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expresionArJv ::= expresionArJv MAS expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expresionArJv ::= expresionArJv MENOS expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expresionArJv ::= expresionArJv DIV expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expresionArJv ::= expresionArJv POR expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expresionArJv ::= expresionArJv MOD expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expresionArJv ::= PAR_A expresionArJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expresionArJv ::= llamadaMetodoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expresionArJv ::= valorAtomico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expresionArJv ::= THIS ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expresionBoolJv ::= expresionArJv DISTINTO expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expresionBoolJv ::= expresionArJv COMPARADOR expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expresionBoolJv ::= expresionArJv MENOR expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expresionBoolJv ::= expresionArJv MENORIGUAL expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expresionBoolJv ::= expresionArJv MAYOR expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expresionBoolJv ::= expresionArJv MAYORIGUAL expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expresionBoolJv ::= expresionBoolJv AND expresionBoolJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expresionBoolJv ::= expresionBoolJv OR expresionBoolJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expresionBoolJv ::= NOT expresionBoolJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // llamadaMetodoJv ::= ID PAR_A listadoParametrosEnviadosJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // llamadaMetodoJv ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // listadoParametrosEnviadosJv ::= expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // listadoParametrosEnviadosJv ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // python ::= SEPARADOR_PY NEWLINE metodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("python",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // metodosPy ::= dclMetodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // metodosPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // dclMetodosPy ::= dclMetodosPy dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // dclMetodosPy ::= dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // dclMetodoPy ::= DEF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para la declaracion del metodo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // dclMetodoPy ::= DEF ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // dclParametrosPy ::= listadoId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // dclParametrosPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // listadoId ::= listadoId COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // listadoId ::= listadoId COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // listadoId ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // sentenciasPy ::= sentenciasPy sentenciaPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // sentenciasPy ::= sentenciaPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // sentenciaPy ::= sentenciaIfPy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // sentenciaPy ::= sentenciaForPy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // sentenciaPy ::= sentenciaWhilePy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // sentenciaPy ::= sentenciaSimplePy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // sentenciaPy ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // bloquePy ::= NEWLINE IDENT sentenciasPy DEDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // bloquePy ::= sentenciaSimplePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // sentenciaSimplePy ::= asignacionVarPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // sentenciaSimplePy ::= escribirPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // sentenciaSimplePy ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // sentenciaSimplePy ::= llamadaMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // escribirPy ::= MENSAJE PAR_A mensajesPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // escribirPy ::= MENSAJE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje para mostrar en pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // escribirPy ::= MENSAJE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // escribirPy ::= MENSAJE PAR_A mensajesPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,".", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // mensajesPy ::= mensajesPy COMA mensajePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // mensajesPy ::= mensajePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // mensajePy ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // mensajePy ::= expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // listadoExpresionesArPy ::= expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // listadoExpresionesArPy ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // sentenciaIfPy ::= IF condicionPy error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // sentenciaIfPy ::= IF error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // elseIfPy ::= ELSEIF condicionPy error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // elseIfPy ::= ELSEIF error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // elseIfPy ::= elsePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // elseIfPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // elsePy ::= ELSE DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // elsePy ::= ELSE DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // elsePy ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // sentenciaWhilePy ::= WHILE condicionPy bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // sentenciaWhilePy ::= WHILE condicionPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // sentenciaForPy ::= FOR ID IN rangePy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // sentenciaForPy ::= FOR ID IN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la funcion range.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // sentenciaForPy ::= FOR ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token 'in'.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // sentenciaForPy ::= FOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para el ciclo for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // rangePy ::= RANGE PAR_A expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // rangePy ::= RANGE PAR_A expresionArPy COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // rangePy ::= RANGE PAR_A expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // rangePy ::= RANGE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // rangePy ::= RANGE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // condicionPy ::= PAR_A expresionBoolPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // condicionPy ::= PAR_A expresionBoolPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // condicionPy ::= PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se espraba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // condicionPy ::= expresionBoolPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // condicionPy ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion boolana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // expresionArPy ::= expresionArPy MAS expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // expresionArPy ::= expresionArPy MENOS expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expresionArPy ::= expresionArPy DIV expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // expresionArPy ::= expresionArPy POR expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // expresionArPy ::= expresionArPy MOD expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // expresionArPy ::= PAR_A expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expresionArPy ::= llamadaMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expresionArPy ::= valorAtomico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // llamadaMetodoPy ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // asignacionVarPy ::= listadoId IGUAL listadoExpresionesArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // asignacionVarPy ::= listadoId error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token igual (=).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // asignacionVarPy ::= ID IGUAL ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // asignacionVarPy ::= ID IGUAL expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // listadoParametrosEnviadosPy ::= listadoParametrosEnviadosPy COMA expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // listadoParametrosEnviadosPy ::= expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // expresionBoolPy ::= expresionArPy DISTINTO expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // expresionBoolPy ::= expresionArPy COMPARADOR expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // expresionBoolPy ::= expresionArPy MENOR expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // expresionBoolPy ::= expresionArPy MENORIGUAL expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // expresionBoolPy ::= expresionArPy MAYOR expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // expresionBoolPy ::= expresionArPy MAYORIGUAL expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // expresionBoolPy ::= expresionBoolPy AND expresionBoolPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // expresionBoolPy ::= expresionBoolPy OR expresionBoolPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expresionBoolPy ::= NOT expresionBoolPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // principal ::= SEPARADOR_PROGRAMA secLibrerias secConstantes secVariables codigoMain 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // secLibrerias ::= dclLibrerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // secLibrerias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // dclLibrerias ::= dclLibrerias dclLibreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // dclLibrerias ::= dclLibreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // dclLibreria ::= HASHTAG INCLUDE libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // dclLibreria ::= HASHTAG INCLUDE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una libreria", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // dclLibreria ::= HASHTAG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una palabra reservada include.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // libreria ::= JAVA PUNTO valorTextoLibreriaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // libreria ::= JAVA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba las clases a importar.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // libreria ::= PY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // libreria ::= VB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // libreria ::= MENOR libreriaC MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // libreria ::= MENOR libreriaC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '>'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // libreria ::= MENOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba el formato de una libreria de C.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // libreriaC ::= libreriaC PUNTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // libreriaC ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // valorTextoLibreriaJv ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // valorTextoLibreriaJv ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // secConstantes ::= dclConstantes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // secConstantes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // dclConstantes ::= dclConstantes dclConstante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // dclConstantes ::= dclConstante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // dclConstante ::= CONST tiposDeDato ID IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion para asignar a la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // dclConstante ::= CONST tiposDeDato ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // dclConstante ::= CONST tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // dclConstante ::= CONST error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un tipo de dato para la variable declarada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // secVariables ::= dclVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // secVariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // dclVariables ::= dclVariables sentenciaDeclaracionInicial 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // dclVariables ::= sentenciaDeclaracionInicial 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // sentenciaDeclaracion ::= tiposDeDato listadoDeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // sentenciaDeclaracion ::= JAVA PUNTO ID listadoDeclaracionesClases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // sentenciaDeclaracion ::= tiposDeDato arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // sentenciaDeclaracion ::= tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de identificadores o la estructura de un arreglo.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // sentenciaDeclaracion ::= JAVA PUNTO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador referente a una clase declarada en la seccion de java.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // sentenciaDeclaracion ::= JAVA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token punto '.'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // arreglo ::= ID listDimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // listDimensiones ::= listDimensiones COR_A expresionAr COR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // listDimensiones ::= COR_A expresionAr COR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // listDimensiones ::= COR_A error COR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // listDimensiones ::= listDimensiones COR_A error COR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // listadoDeclaraciones ::= listadoDeclaraciones COMA ID asignacionValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // listadoDeclaraciones ::= ID asignacionValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // listadoDeclaraciones ::= listadoDeclaraciones COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // asignacionValor ::= IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // asignacionValor ::= IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // asignacionValor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA ID asignacionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // listadoDeclaracionesClases ::= ID asignacionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // asignacionConstructor ::= accionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // asignacionConstructor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // accionConstructor ::= PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // accionConstructor ::= PAR_A listadoParametrosEnviados error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // codigoMain ::= VOID MAIN PAR_A PAR_C error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // codigoMain ::= VOID MAIN PAR_A error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // codigoMain ::= VOID MAIN error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // codigoMain ::= VOID error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada 'main'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // bloque ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // sentencia ::= sentenciaSimple FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // sentenciaSimple ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // sentenciaSimple ::= sentenciaDeclaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // sentenciaSimple ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // sentenciaSimple ::= sentenciaIngresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // sentenciaSimple ::= sentenciaLimpiarPantalla 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // sentenciaSimple ::= sentenciaEsperarTecla 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // sentenciaSimple ::= llamadaMetodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // sentenciaSimple ::= sentenciaBreak 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // sentenciaAsignacion ::= lugarAsignacion IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // sentenciaAsignacion ::= lugarAsignacion IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion arimetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // sentenciaAsignacion ::= lugarAsignacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // lugarAsignacion ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // lugarAsignacion ::= arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // lugarAsignacion ::= JAVA PUNTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // sentenciaEscribir ::= PRINTF PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba contenido para mostrar en pantalla.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // sentenciaEscribir ::= PRINTF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de expresiones.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // expresionCadena ::= expresionCadena valorCadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // expresionCadena ::= valorCadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // listadoExpresiones ::= listadoExpresiones COMA expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // listadoExpresiones ::= expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // listadoExpresiones ::= AMPERSON expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // listadoExpresiones ::= AMPERSON error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresiona aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // listadoExpresiones ::= listadoExpresiones COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // expresionCadenaEntrada ::= valorTexto comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // expresionCadenaEntrada ::= comodin valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // expresionCadenaEntrada ::= valorTexto comodin valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // expresionCadenaEntrada ::= comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // expresionCadenaEntrada ::= valorTexto error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // expresionCadenaEntrada ::= error valorTexto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // expresionCadenaEntrada ::= valorTexto error valorTexto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // expresionCadenaEntrada ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // valorCadena ::= valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // valorCadena ::= comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // valorTexto ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // valorTexto ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // comodin ::= COMODIN_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // comodin ::= COMODIN_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // comodin ::= COMODIN_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un lugar para asignar el valor leido.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '&'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una coma.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // sentenciaIngresoDatos ::= SCANF PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena para ingresar texto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // sentenciaIngresoDatos ::= SCANF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // sentenciaEsperarTecla ::= ESPERAR_TECLA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // sentenciaBreak ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreak",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // sentenciaIf ::= IF PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // sentenciaIf ::= IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // sentenciaIf ::= IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // sentenciaIf ::= IF error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // sino ::= ELSE LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // sino ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // sino ::= ELSE IF PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // sino ::= ELSE IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // sino ::= ELSE IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // sino ::= ELSE IF error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // sino ::= ELSE LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // sino ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esparaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // modificadorFor ::= IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // modificadorFor ::= IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // modificadorFor ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // modificadorFor ::= DISMINUCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // modificadorFor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un modificador para la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // sentenciaWhile ::= WHILE PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // sentenciaWhile ::= WHILE PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // sentenciaWhile ::= WHILE error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un fin de linea.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada while.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // sentenciaDoWhile ::= DO LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaban casos.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // sentenciaSwitch ::= SWITCH PAR_A expresionAr error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // sentenciaSwitch ::= SWITCH PAR_A error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // sentenciaSwitch ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // contenidoSwitch ::= contenidoSwitch valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // contenidoSwitch ::= valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // contenidoSwitch ::= valorSwitch DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // contenidoSwitch ::= contenidoSwitch valorSwitch DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // valorSwitch ::= CASE ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // valorSwitch ::= CASE FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // valorSwitch ::= CASE CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // valorSwitch ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // valorSwitch ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un valor para un caso de un switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // expresionAr ::= expresionAr MAS expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // expresionAr ::= expresionAr MENOS expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // expresionAr ::= expresionAr DIV expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // expresionAr ::= expresionAr POR expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // expresionAr ::= expresionAr MOD expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // expresionAr ::= PAR_A expresionAr PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // expresionAr ::= llamadaMetodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // expresionAr ::= valorAtomico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // expresionBool ::= expresionAr DISTINTO expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // expresionBool ::= expresionAr COMPARADOR expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // expresionBool ::= expresionAr MENOR expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // expresionBool ::= expresionAr MENORIGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // expresionBool ::= expresionAr MAYOR expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // expresionBool ::= expresionAr MAYORIGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // expresionBool ::= expresionBool AND expresionBool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // expresionBool ::= expresionBool OR expresionBool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // expresionBool ::= NOT expresionBool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // llamadaMetodo ::= JAVA PUNTO ID PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // llamadaMetodo ::= PY PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // llamadaMetodo ::= VB PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // listadoParametrosEnviados ::= parametrosEnviados 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // listadoParametrosEnviados ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // parametrosEnviados ::= parametrosEnviados COMA expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // parametrosEnviados ::= expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // ingresoDatos ::= ingreso PAR_A CADENA PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // ingresoDatos ::= ingreso PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // ingresoDatos ::= ingreso PAR_A CADENA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // ingresoDatos ::= ingreso PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena, o que estuviese vacio.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // ingresoDatos ::= ingreso error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 2 with the actual generated action code for actions 600 to 900. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000002(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // ingreso ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // ingreso ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // ingreso ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // tiposDeDato ::= PR_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // tiposDeDato ::= PR_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // tiposDeDato ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // valorAtomico ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // valorAtomico ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // valorAtomico ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // valorAtomico ::= MENOS ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // valorAtomico ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // tiposDeMetodo ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // tiposDeMetodo ::= tiposDeDato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // publicOpcional ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // publicOpcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 600 < #action < 900. . . . . . . . . . . .*/
          case 2: 
              return CUP$Parser$do_action_part00000002(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
