
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.analisis;

import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import com.analisis.objetos.nodos.*;
import com.analisis.objetos.analisis.*;
import com.analisis.objetos.basicos.Dato;
import com.analisis.objetos.basicos.Llamadas.*;
import com.analisis.objetos.estructuras.ColeccionInstr;
import com.analisis.objetos.basicos.lugaresAsignacion.*;
import com.analisis.objetos.basicos.accionesAsignacion.*;
import com.analisis.objetos.instrucciones.instruccionesmlg.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0269\000\002\002\004\000\002\054\006\000\002\055" +
    "\005\000\002\056\003\000\002\056\002\000\002\057\004" +
    "\000\002\057\003\000\002\060\003\000\002\060\003\000" +
    "\002\002\015\000\002\002\014\000\002\002\015\000\002" +
    "\002\014\000\002\002\013\000\002\002\014\000\002\003" +
    "\013\000\002\003\013\000\002\003\012\000\002\003\011" +
    "\000\002\003\012\000\002\017\003\000\002\017\002\000" +
    "\002\020\004\000\002\020\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\004\006\000\002\004\012\000\002" +
    "\004\012\000\002\004\011\000\002\004\011\000\002\004" +
    "\013\000\002\004\012\000\002\004\010\000\002\004\010" +
    "\000\002\004\012\000\002\004\006\000\002\004\006\000" +
    "\002\014\010\000\002\014\007\000\002\014\005\000\002" +
    "\014\007\000\002\014\010\000\002\014\002\000\002\005" +
    "\016\000\002\005\016\000\002\005\015\000\002\005\015" +
    "\000\002\005\016\000\002\026\003\000\002\026\002\000" +
    "\002\035\004\000\002\035\002\000\002\030\003\000\002" +
    "\030\002\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\061\003\000\002\061\002\000\002\045\006\000\002" +
    "\045\006\000\002\045\005\000\002\045\005\000\002\046" +
    "\004\000\002\046\004\000\002\046\003\000\002\025\004" +
    "\000\002\022\011\000\002\022\007\000\002\022\005\000" +
    "\002\023\011\000\002\023\007\000\002\023\006\000\002" +
    "\023\002\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\051\003\000\002\051\003\000\002\011\006" +
    "\000\002\011\006\000\002\011\005\000\002\011\005\000" +
    "\002\073\005\000\002\073\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\012\004\000\002\012" +
    "\004\000\002\052\005\000\002\052\004\000\002\052\002" +
    "\000\002\053\005\000\002\053\003\000\002\050\006\000" +
    "\002\050\005\000\002\050\004\000\002\050\005\000\002" +
    "\050\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\031\003\000\002\037\005\000" +
    "\002\037\003\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\004" +
    "\000\002\015\006\000\002\015\005\000\002\066\005\000" +
    "\002\066\005\000\002\066\003\000\002\066\003\000\002" +
    "\062\004\000\002\062\003\000\002\074\004\000\002\075" +
    "\003\000\002\075\002\000\002\076\004\000\002\076\003" +
    "\000\002\077\010\000\002\077\010\000\002\077\010\000" +
    "\002\077\006\000\002\100\003\000\002\100\002\000\002" +
    "\101\004\000\002\101\003\000\002\102\003\000\002\102" +
    "\003\000\002\103\013\000\002\103\013\000\002\103\013" +
    "\000\002\103\011\000\002\103\011\000\002\104\003\000" +
    "\002\104\002\000\002\105\006\000\002\105\004\000\002" +
    "\105\006\000\002\105\006\000\002\105\004\000\002\105" +
    "\004\000\002\106\003\000\002\106\002\000\002\107\004" +
    "\000\002\107\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\004\000\002" +
    "\110\004\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\112\012\000\002\112\010\000" +
    "\002\112\012\000\002\112\010\000\002\112\010\000\002" +
    "\113\013\000\002\113\006\000\002\113\013\000\002\113" +
    "\011\000\002\113\010\000\002\113\004\000\002\113\002" +
    "\000\002\114\021\000\002\114\020\000\002\114\017\000" +
    "\002\114\021\000\002\114\007\000\002\114\021\000\002" +
    "\115\004\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\116\011\000\002\116\007\000\002\116\011" +
    "\000\002\116\011\000\002\117\011\000\002\117\007\000" +
    "\002\117\011\000\002\117\011\000\002\120\006\000\002" +
    "\120\005\000\002\120\006\000\002\120\005\000\002\121" +
    "\004\000\002\121\004\000\002\121\004\000\002\121\003" +
    "\000\002\122\005\000\002\122\003\000\002\123\012\000" +
    "\002\123\012\000\002\123\011\000\002\123\010\000\002" +
    "\123\007\000\002\124\004\000\002\125\004\000\002\125" +
    "\003\000\002\126\005\000\002\126\003\000\002\127\005" +
    "\000\002\127\006\000\002\130\003\000\002\130\003\000" +
    "\002\131\006\000\002\131\006\000\002\131\006\000\002" +
    "\131\005\000\002\131\004\000\002\131\006\000\002\131" +
    "\005\000\002\131\004\000\002\136\005\000\002\136\003" +
    "\000\002\136\003\000\002\136\003\000\002\132\004\000" +
    "\002\132\004\000\002\133\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\004\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\004\000\002\135\006\000\002\135\005\000\002\064\005" +
    "\000\002\064\003\000\002\064\005\000\002\064\003\000" +
    "\002\137\005\000\002\140\003\000\002\140\002\000\002" +
    "\141\004\000\002\141\003\000\002\142\011\000\002\142" +
    "\004\000\002\142\005\000\002\142\007\000\002\142\010" +
    "\000\002\142\011\000\002\143\003\000\002\143\002\000" +
    "\002\144\005\000\002\144\005\000\002\144\003\000\002" +
    "\145\004\000\002\145\003\000\002\146\004\000\002\146" +
    "\004\000\002\146\004\000\002\146\004\000\002\146\003" +
    "\000\002\147\006\000\002\147\003\000\002\150\003\000" +
    "\002\150\003\000\002\150\003\000\002\150\003\000\002" +
    "\151\006\000\002\151\005\000\002\151\004\000\002\151" +
    "\006\000\002\072\005\000\002\072\003\000\002\152\003" +
    "\000\002\152\003\000\002\067\005\000\002\067\005\000" +
    "\002\067\003\000\002\067\003\000\002\153\007\000\002" +
    "\153\007\000\002\153\006\000\002\153\005\000\002\154" +
    "\007\000\002\154\007\000\002\154\006\000\002\154\005" +
    "\000\002\154\003\000\002\154\002\000\002\155\005\000" +
    "\002\155\005\000\002\155\004\000\002\156\005\000\002" +
    "\156\005\000\002\157\010\000\002\157\010\000\002\157" +
    "\007\000\002\157\006\000\002\157\005\000\002\157\004" +
    "\000\002\160\006\000\002\160\010\000\002\160\012\000" +
    "\002\160\012\000\002\160\011\000\002\160\010\000\002" +
    "\160\007\000\002\160\006\000\002\160\005\000\002\160" +
    "\004\000\002\041\005\000\002\041\005\000\002\041\004" +
    "\000\002\041\003\000\002\041\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\003\000\002\033" +
    "\003\000\002\161\006\000\002\161\006\000\002\161\005" +
    "\000\002\162\005\000\002\162\004\000\002\162\005\000" +
    "\002\162\005\000\002\065\005\000\002\065\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\004\000\002\163\007\000" +
    "\002\164\003\000\002\164\002\000\002\165\004\000\002" +
    "\165\003\000\002\166\005\000\002\166\005\000\002\166" +
    "\004\000\002\167\005\000\002\167\004\000\002\167\003" +
    "\000\002\167\003\000\002\167\005\000\002\167\005\000" +
    "\002\167\004\000\002\170\005\000\002\170\003\000\002" +
    "\134\003\000\002\134\003\000\002\172\003\000\002\172" +
    "\002\000\002\173\004\000\002\173\003\000\002\174\010" +
    "\000\002\174\010\000\002\174\007\000\002\174\006\000" +
    "\002\174\005\000\002\174\004\000\002\175\003\000\002" +
    "\175\002\000\002\176\004\000\002\176\003\000\002\242" +
    "\004\000\002\242\004\000\002\177\004\000\002\177\006" +
    "\000\002\177\004\000\002\177\004\000\002\177\005\000" +
    "\002\177\004\000\002\200\004\000\002\201\006\000\002" +
    "\201\005\000\002\201\005\000\002\201\006\000\002\202" +
    "\006\000\002\202\004\000\002\202\005\000\002\203\004" +
    "\000\002\203\004\000\002\203\002\000\002\204\006\000" +
    "\002\204\004\000\002\204\005\000\002\205\003\000\002" +
    "\205\002\000\002\206\005\000\002\206\005\000\002\207" +
    "\011\000\002\207\011\000\002\207\010\000\002\207\007" +
    "\000\002\207\006\000\002\207\005\000\002\210\003\000" +
    "\002\210\002\000\002\211\004\000\002\211\003\000\002" +
    "\212\003\000\002\212\003\000\002\212\003\000\002\212" +
    "\003\000\002\212\003\000\002\212\004\000\002\213\003" +
    "\000\002\213\003\000\002\213\003\000\002\213\003\000" +
    "\002\213\003\000\002\213\003\000\002\213\003\000\002" +
    "\213\003\000\002\214\005\000\002\214\005\000\002\214" +
    "\004\000\002\215\003\000\002\215\003\000\002\215\005" +
    "\000\002\216\006\000\002\216\010\000\002\216\006\000" +
    "\002\216\005\000\002\216\004\000\002\216\010\000\002" +
    "\216\007\000\002\217\004\000\002\217\003\000\002\070" +
    "\005\000\002\070\003\000\002\070\006\000\002\070\004" +
    "\000\002\070\004\000\002\070\006\000\002\070\005\000" +
    "\002\220\004\000\002\220\004\000\002\220\005\000\002" +
    "\220\003\000\002\220\004\000\002\220\004\000\002\220" +
    "\005\000\002\220\003\000\002\221\003\000\002\221\003" +
    "\000\002\171\003\000\002\171\003\000\002\222\003\000" +
    "\002\222\003\000\002\222\003\000\002\223\011\000\002" +
    "\223\011\000\002\223\010\000\002\223\007\000\002\223" +
    "\006\000\002\223\005\000\002\223\004\000\002\224\005" +
    "\000\002\224\005\000\002\224\004\000\002\225\005\000" +
    "\002\225\005\000\002\225\004\000\002\226\003\000\002" +
    "\227\012\000\002\227\011\000\002\227\007\000\002\227" +
    "\011\000\002\227\010\000\002\227\007\000\002\230\013" +
    "\000\002\230\006\000\002\230\002\000\002\230\012\000" +
    "\002\230\010\000\002\230\012\000\002\230\011\000\002" +
    "\230\010\000\002\230\006\000\002\230\004\000\002\231" +
    "\020\000\002\231\020\000\002\231\016\000\002\231\020" +
    "\000\002\231\017\000\002\232\004\000\002\232\004\000" +
    "\002\232\003\000\002\232\003\000\002\232\003\000\002" +
    "\233\011\000\002\233\011\000\002\233\007\000\002\233" +
    "\011\000\002\233\010\000\002\233\007\000\002\234\013" +
    "\000\002\234\013\000\002\234\012\000\002\234\011\000" +
    "\002\234\010\000\002\234\007\000\002\234\006\000\002" +
    "\235\011\000\002\235\011\000\002\235\010\000\002\235" +
    "\011\000\002\235\010\000\002\235\007\000\002\236\006" +
    "\000\002\236\005\000\002\236\005\000\002\236\006\000" +
    "\002\237\004\000\002\237\004\000\002\237\004\000\002" +
    "\237\003\000\002\237\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\004\000\002\241\012" +
    "\000\002\241\010\000\002\241\010\000\002\063\003\000" +
    "\002\063\002\000\002\071\005\000\002\071\003\000\002" +
    "\016\006\000\002\016\005\000\002\016\006\000\002\016" +
    "\005\000\002\016\004\000\002\245\003\000\002\245\003" +
    "\000\002\245\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\004\000\002\047\003\000\002\243" +
    "\003\000\002\243\003\000\002\244\003\000\002\244\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u052b\000\004\110\004\001\002\000\004\067\u03c8\001" +
    "\002\000\004\112\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\111\u0188\001\002\000" +
    "\012\003\ufd99\111\uff6f\126\ufd99\133\015\001\002\000\012" +
    "\003\ufd99\111\uff70\126\ufd99\133\015\001\002\000\012\003" +
    "\uff6d\111\uff6d\126\uff6d\133\uff6d\001\002\000\004\111\uff71" +
    "\001\002\000\022\003\ufd9a\060\ufd9a\061\ufd9a\062\ufd9a\107" +
    "\ufd9a\120\ufd9a\126\ufd9a\142\ufd9a\001\002\000\006\003\017" +
    "\126\020\001\002\000\004\011\u0183\001\002\000\006\003" +
    "\022\011\021\001\002\000\006\003\u017f\057\u0180\001\002" +
    "\000\004\057\023\001\002\000\020\003\ufd99\056\uff67\060" +
    "\035\061\024\062\032\120\ufd99\133\015\001\002\000\022" +
    "\003\ufda3\011\ufda3\013\ufda3\021\ufda3\026\ufda3\043\ufda3\067" +
    "\ufda3\106\ufda3\001\002\000\020\003\uff65\056\uff65\060\uff65" +
    "\061\uff65\062\uff65\120\uff65\133\uff65\001\002\000\004\056" +
    "\u017e\001\002\000\020\003\uff63\056\uff63\060\uff63\061\uff63" +
    "\062\uff63\120\uff63\133\uff63\001\002\000\020\003\ufd99\056" +
    "\uff68\060\035\061\024\062\032\120\ufd99\133\015\001\002" +
    "\000\014\003\122\060\035\061\024\062\032\120\124\001" +
    "\002\000\022\003\ufda2\011\ufda2\013\ufda2\021\ufda2\026\ufda2" +
    "\043\ufda2\067\ufda2\106\ufda2\001\002\000\004\011\036\001" +
    "\002\000\020\003\uff64\056\uff64\060\uff64\061\uff64\062\uff64" +
    "\120\uff64\133\uff64\001\002\000\022\003\ufda4\011\ufda4\013" +
    "\ufda4\021\ufda4\026\ufda4\043\ufda4\067\ufda4\106\ufda4\001\002" +
    "\000\026\003\uff13\011\uff13\043\042\056\uff13\060\uff13\061" +
    "\uff13\062\uff13\067\uff13\120\uff13\133\uff13\001\002\000\024" +
    "\003\uff17\011\036\056\uff17\060\uff17\061\uff17\062\uff17\067" +
    "\uff17\120\uff17\133\uff17\001\002\000\024\003\uff15\011\uff15" +
    "\056\uff15\060\uff15\061\uff15\062\uff15\067\uff15\120\uff15\133" +
    "\uff15\001\002\000\024\003\uff16\011\uff16\056\uff16\060\uff16" +
    "\061\uff16\062\uff16\067\uff16\120\uff16\133\uff16\001\002\000" +
    "\026\005\050\006\052\007\062\011\055\012\044\023\053" +
    "\024\043\025\057\035\046\127\056\001\002\000\006\003" +
    "\ufda6\012\ufda6\001\002\000\020\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\006\003" +
    "\110\012\111\001\002\000\004\005\107\001\002\000\062" +
    "\003\ufef8\011\ufef8\013\ufef8\021\ufef8\034\ufef8\035\ufef8\036" +
    "\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8\044\ufef8\045\ufef8" +
    "\046\ufef8\047\ufef8\050\ufef8\052\ufef8\056\ufef8\060\ufef8\061" +
    "\ufef8\062\ufef8\067\ufef8\120\ufef8\133\ufef8\001\002\000\124" +
    "\003\ufda1\004\ufda1\010\ufda1\011\ufda1\013\ufda1\014\ufda1\021" +
    "\ufda1\022\ufda1\023\ufda1\024\ufda1\025\ufda1\026\ufda1\034\ufda1" +
    "\035\ufda1\036\ufda1\037\ufda1\040\ufda1\041\ufda1\042\ufda1\043" +
    "\ufda1\044\ufda1\045\ufda1\046\ufda1\047\ufda1\050\ufda1\052\ufda1" +
    "\056\ufda1\060\ufda1\061\ufda1\062\ufda1\064\ufda1\067\ufda1\070" +
    "\ufda1\075\ufda1\106\ufda1\116\ufda1\117\ufda1\120\ufda1\130\ufda1" +
    "\133\ufda1\143\ufda1\001\002\000\024\003\uff0f\011\uff0f\056" +
    "\uff0f\060\uff0f\061\uff0f\062\uff0f\067\uff0f\120\uff0f\133\uff0f" +
    "\001\002\000\124\003\ufda0\004\ufda0\010\ufda0\011\ufda0\013" +
    "\ufda0\014\ufda0\021\ufda0\022\ufda0\023\ufda0\024\ufda0\025\ufda0" +
    "\026\ufda0\034\ufda0\035\ufda0\036\ufda0\037\ufda0\040\ufda0\041" +
    "\ufda0\042\ufda0\043\ufda0\044\ufda0\045\ufda0\046\ufda0\047\ufda0" +
    "\050\ufda0\052\ufda0\056\ufda0\060\ufda0\061\ufda0\062\ufda0\064" +
    "\ufda0\067\ufda0\070\ufda0\075\ufda0\106\ufda0\116\ufda0\117\ufda0" +
    "\120\ufda0\130\ufda0\133\ufda0\143\ufda0\001\002\000\006\003" +
    "\ufda7\012\ufda7\001\002\000\062\003\ufef9\011\ufef9\013\ufef9" +
    "\021\ufef9\034\ufef9\035\ufef9\036\ufef9\037\ufef9\040\ufef9\041" +
    "\ufef9\042\ufef9\044\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9" +
    "\052\ufef9\056\ufef9\060\ufef9\061\ufef9\062\ufef9\067\ufef9\120" +
    "\ufef9\133\ufef9\001\002\000\064\003\ufd9d\011\ufd9d\012\076" +
    "\013\ufd9d\021\ufd9d\034\ufd9d\035\ufd9d\036\ufd9d\037\ufd9d\040" +
    "\ufd9d\041\ufd9d\042\ufd9d\044\ufd9d\045\ufd9d\046\ufd9d\047\ufd9d" +
    "\050\ufd9d\052\ufd9d\056\ufd9d\060\ufd9d\061\ufd9d\062\ufd9d\067" +
    "\ufd9d\120\ufd9d\133\ufd9d\001\002\000\004\011\075\001\002" +
    "\000\006\003\ufda5\012\ufda5\001\002\000\024\003\uff14\011" +
    "\uff14\056\uff14\060\uff14\061\uff14\062\uff14\067\uff14\120\uff14" +
    "\133\uff14\001\002\000\036\003\uff10\011\uff10\034\064\035" +
    "\065\036\067\037\066\040\063\056\uff10\060\uff10\061\uff10" +
    "\062\uff10\067\uff10\120\uff10\133\uff10\001\002\000\124\003" +
    "\ufd9f\004\ufd9f\010\ufd9f\011\ufd9f\013\ufd9f\014\ufd9f\021\ufd9f" +
    "\022\ufd9f\023\ufd9f\024\ufd9f\025\ufd9f\026\ufd9f\034\ufd9f\035" +
    "\ufd9f\036\ufd9f\037\ufd9f\040\ufd9f\041\ufd9f\042\ufd9f\043\ufd9f" +
    "\044\ufd9f\045\ufd9f\046\ufd9f\047\ufd9f\050\ufd9f\052\ufd9f\056" +
    "\ufd9f\060\ufd9f\061\ufd9f\062\ufd9f\064\ufd9f\067\ufd9f\070\ufd9f" +
    "\075\ufd9f\106\ufd9f\116\ufd9f\117\ufd9f\120\ufd9f\130\ufd9f\133" +
    "\ufd9f\143\ufd9f\001\002\000\020\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\020\005" +
    "\050\006\052\007\062\011\055\012\044\035\046\127\056" +
    "\001\002\000\020\005\050\006\052\007\062\011\055\012" +
    "\044\035\046\127\056\001\002\000\020\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\127\056\001\002\000" +
    "\020\005\050\006\052\007\062\011\055\012\044\035\046" +
    "\127\056\001\002\000\062\003\ufefc\011\ufefc\013\ufefc\021" +
    "\ufefc\034\ufefc\035\ufefc\036\ufefc\037\ufefc\040\ufefc\041\ufefc" +
    "\042\ufefc\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050\ufefc\052" +
    "\ufefc\056\ufefc\060\ufefc\061\ufefc\062\ufefc\067\ufefc\120\ufefc" +
    "\133\ufefc\001\002\000\062\003\ufefd\011\ufefd\013\ufefd\021" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\040\ufefd\041\ufefd" +
    "\042\ufefd\044\ufefd\045\ufefd\046\ufefd\047\ufefd\050\ufefd\052" +
    "\ufefd\056\ufefd\060\ufefd\061\ufefd\062\ufefd\067\ufefd\120\ufefd" +
    "\133\ufefd\001\002\000\062\003\ufefe\011\ufefe\013\ufefe\021" +
    "\ufefe\034\ufefe\035\ufefe\036\067\037\066\040\063\041\ufefe" +
    "\042\ufefe\044\ufefe\045\ufefe\046\ufefe\047\ufefe\050\ufefe\052" +
    "\ufefe\056\ufefe\060\ufefe\061\ufefe\062\ufefe\067\ufefe\120\ufefe" +
    "\133\ufefe\001\002\000\062\003\ufeff\011\ufeff\013\ufeff\021" +
    "\ufeff\034\ufeff\035\ufeff\036\067\037\066\040\063\041\ufeff" +
    "\042\ufeff\044\ufeff\045\ufeff\046\ufeff\047\ufeff\050\ufeff\052" +
    "\ufeff\056\ufeff\060\ufeff\061\ufeff\062\ufeff\067\ufeff\120\ufeff" +
    "\133\ufeff\001\002\000\062\003\ufefb\011\ufefb\013\ufefb\021" +
    "\ufefb\034\ufefb\035\ufefb\036\ufefb\037\ufefb\040\ufefb\041\ufefb" +
    "\042\ufefb\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\052" +
    "\ufefb\056\ufefb\060\ufefb\061\ufefb\062\ufefb\067\ufefb\120\ufefb" +
    "\133\ufefb\001\002\000\062\003\ufef7\011\ufef7\013\ufef7\021" +
    "\ufef7\034\ufef7\035\ufef7\036\ufef7\037\ufef7\040\ufef7\041\ufef7" +
    "\042\ufef7\044\ufef7\045\ufef7\046\ufef7\047\ufef7\050\ufef7\052" +
    "\ufef7\056\ufef7\060\ufef7\061\ufef7\062\ufef7\067\ufef7\120\ufef7" +
    "\133\ufef7\001\002\000\024\003\100\005\050\006\052\007" +
    "\062\011\055\012\044\013\102\035\046\127\056\001\002" +
    "\000\006\013\104\021\103\001\002\000\006\013\ufee8\021" +
    "\ufee8\001\002\000\020\013\ufeea\021\ufeea\034\064\035\065" +
    "\036\067\037\066\040\063\001\002\000\062\003\ufeec\011" +
    "\ufeec\013\ufeec\021\ufeec\034\ufeec\035\ufeec\036\ufeec\037\ufeec" +
    "\040\ufeec\041\ufeec\042\ufeec\044\ufeec\045\ufeec\046\ufeec\047" +
    "\ufeec\050\ufeec\052\ufeec\056\ufeec\060\ufeec\061\ufeec\062\ufeec" +
    "\067\ufeec\120\ufeec\133\ufeec\001\002\000\022\003\105\005" +
    "\050\006\052\007\062\011\055\012\044\035\046\127\056" +
    "\001\002\000\062\003\ufeed\011\ufeed\013\ufeed\021\ufeed\034" +
    "\ufeed\035\ufeed\036\ufeed\037\ufeed\040\ufeed\041\ufeed\042\ufeed" +
    "\044\ufeed\045\ufeed\046\ufeed\047\ufeed\050\ufeed\052\ufeed\056" +
    "\ufeed\060\ufeed\061\ufeed\062\ufeed\067\ufeed\120\ufeed\133\ufeed" +
    "\001\002\000\006\013\ufee9\021\ufee9\001\002\000\020\013" +
    "\ufeeb\021\ufeeb\034\064\035\065\036\067\037\066\040\063" +
    "\001\002\000\124\003\ufd9e\004\ufd9e\010\ufd9e\011\ufd9e\013" +
    "\ufd9e\014\ufd9e\021\ufd9e\022\ufd9e\023\ufd9e\024\ufd9e\025\ufd9e" +
    "\026\ufd9e\034\ufd9e\035\ufd9e\036\ufd9e\037\ufd9e\040\ufd9e\041" +
    "\ufd9e\042\ufd9e\043\ufd9e\044\ufd9e\045\ufd9e\046\ufd9e\047\ufd9e" +
    "\050\ufd9e\052\ufd9e\056\ufd9e\060\ufd9e\061\ufd9e\062\ufd9e\064" +
    "\ufd9e\067\ufd9e\070\ufd9e\075\ufd9e\106\ufd9e\116\ufd9e\117\ufd9e" +
    "\120\ufd9e\130\ufd9e\133\ufd9e\143\ufd9e\001\002\000\040\003" +
    "\ufda8\004\ufda8\010\ufda8\011\ufda8\022\ufda8\026\ufda8\056\ufda8" +
    "\060\ufda8\061\ufda8\062\ufda8\067\ufda8\106\ufda8\120\ufda8\133" +
    "\ufda8\143\ufda8\001\002\000\010\003\113\013\112\020\114" +
    "\001\002\000\040\003\ufdab\004\ufdab\010\ufdab\011\ufdab\022" +
    "\ufdab\026\ufdab\056\ufdab\060\ufdab\061\ufdab\062\ufdab\067\ufdab" +
    "\106\ufdab\120\ufdab\133\ufdab\143\ufdab\001\002\000\040\003" +
    "\ufda9\004\ufda9\010\ufda9\011\ufda9\022\ufda9\026\ufda9\056\ufda9" +
    "\060\ufda9\061\ufda9\062\ufda9\067\ufda9\106\ufda9\120\ufda9\133" +
    "\ufda9\143\ufda9\001\002\000\006\003\116\013\115\001\002" +
    "\000\040\003\ufdac\004\ufdac\010\ufdac\011\ufdac\022\ufdac\026" +
    "\ufdac\056\ufdac\060\ufdac\061\ufdac\062\ufdac\067\ufdac\106\ufdac" +
    "\120\ufdac\133\ufdac\143\ufdac\001\002\000\040\003\ufdaa\004" +
    "\ufdaa\010\ufdaa\011\ufdaa\022\ufdaa\026\ufdaa\056\ufdaa\060\ufdaa" +
    "\061\ufdaa\062\ufdaa\067\ufdaa\106\ufdaa\120\ufdaa\133\ufdaa\143" +
    "\ufdaa\001\002\000\016\013\120\034\064\035\065\036\067" +
    "\037\066\040\063\001\002\000\062\003\ufefa\011\ufefa\013" +
    "\ufefa\021\ufefa\034\ufefa\035\ufefa\036\ufefa\037\ufefa\040\ufefa" +
    "\041\ufefa\042\ufefa\044\ufefa\045\ufefa\046\ufefa\047\ufefa\050" +
    "\ufefa\052\ufefa\056\ufefa\060\ufefa\061\ufefa\062\ufefa\067\ufefa" +
    "\120\ufefa\133\ufefa\001\002\000\006\003\u016b\011\u016a\001" +
    "\002\000\004\011\125\001\002\000\006\003\ufd9b\011\ufd9b" +
    "\001\002\000\006\003\ufd9c\011\ufd9c\001\002\000\004\012" +
    "\126\001\002\000\014\003\127\013\uff5c\060\035\061\024" +
    "\062\032\001\002\000\004\011\u0169\001\002\000\004\013" +
    "\143\001\002\000\006\003\142\011\141\001\002\000\006" +
    "\013\uff5d\021\133\001\002\000\012\003\134\060\035\061" +
    "\024\062\032\001\002\000\004\011\140\001\002\000\006" +
    "\003\137\011\136\001\002\000\006\013\uff5b\021\uff5b\001" +
    "\002\000\006\013\uff58\021\uff58\001\002\000\006\013\uff59" +
    "\021\uff59\001\002\000\006\013\uff5a\021\uff5a\001\002\000" +
    "\006\013\uff57\021\uff57\001\002\000\004\057\144\001\002" +
    "\000\046\011\157\023\053\024\043\025\057\027\155\030" +
    "\146\033\174\053\150\056\uff54\060\035\061\024\062\032" +
    "\074\162\125\165\127\160\130\177\135\153\140\163\001" +
    "\002\000\004\067\uff48\001\002\000\006\003\u0156\012\u0157" +
    "\001\002\000\004\067\uff4b\001\002\000\022\003\u0154\005" +
    "\050\006\052\007\062\011\055\012\044\035\046\127\056" +
    "\001\002\000\004\067\u0153\001\002\000\004\056\u0152\001" +
    "\002\000\006\003\u011c\012\u011d\001\002\000\054\003\uff4f" +
    "\011\uff4f\023\uff4f\024\uff4f\025\uff4f\027\uff4f\030\uff4f\033" +
    "\uff4f\053\uff4f\056\uff4f\060\uff4f\061\uff4f\062\uff4f\074\uff4f" +
    "\113\uff4f\125\uff4f\127\uff4f\130\uff4f\135\uff4f\137\uff4f\140" +
    "\uff4f\001\002\000\006\003\355\012\356\001\002\000\004" +
    "\067\uff47\001\002\000\006\012\076\043\353\001\002\000" +
    "\004\011\350\001\002\000\054\003\uff55\011\157\023\053" +
    "\024\043\025\057\027\155\030\146\033\174\053\150\056" +
    "\uff55\060\035\061\024\062\032\074\162\113\uff55\125\165" +
    "\127\160\130\177\135\153\137\uff55\140\163\001\002\000" +
    "\004\057\334\001\002\000\006\003\326\012\327\001\002" +
    "\000\054\003\uff51\011\uff51\023\uff51\024\uff51\025\uff51\027" +
    "\uff51\030\uff51\033\uff51\053\uff51\056\uff51\060\uff51\061\uff51" +
    "\062\uff51\074\uff51\113\uff51\125\uff51\127\uff51\130\uff51\135" +
    "\uff51\137\uff51\140\uff51\001\002\000\004\067\uff00\001\002" +
    "\000\054\003\uff4e\011\uff4e\023\uff4e\024\uff4e\025\uff4e\027" +
    "\uff4e\030\uff4e\033\uff4e\053\uff4e\056\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\074\uff4e\113\uff4e\125\uff4e\127\uff4e\130\uff4e\135" +
    "\uff4e\137\uff4e\140\uff4e\001\002\000\004\067\uff4a\001\002" +
    "\000\004\067\uff49\001\002\000\054\003\uff52\011\uff52\023" +
    "\uff52\024\uff52\025\uff52\027\uff52\030\uff52\033\uff52\053\uff52" +
    "\056\uff52\060\uff52\061\uff52\062\uff52\074\uff52\113\uff52\125" +
    "\uff52\127\uff52\130\uff52\135\uff52\137\uff52\140\uff52\001\002" +
    "\000\004\067\uff45\001\002\000\004\067\325\001\002\000" +
    "\006\003\213\012\214\001\002\000\004\067\uff46\001\002" +
    "\000\054\003\uff50\011\uff50\023\uff50\024\uff50\025\uff50\027" +
    "\uff50\030\uff50\033\uff50\053\uff50\056\uff50\060\uff50\061\uff50" +
    "\062\uff50\074\uff50\113\uff50\125\uff50\127\uff50\130\uff50\135" +
    "\uff50\137\uff50\140\uff50\001\002\000\006\003\200\012\201" +
    "\001\002\000\004\067\uff0a\001\002\000\024\003\204\005" +
    "\050\006\052\007\062\011\055\012\044\020\202\035\046" +
    "\127\056\001\002\000\010\003\uff05\013\uff05\034\uff05\001" +
    "\002\000\010\003\210\013\207\034\206\001\002\000\012" +
    "\003\uff03\013\uff03\034\uff03\067\uff0b\001\002\000\020\003" +
    "\uff04\013\uff04\034\064\035\065\036\067\037\066\040\063" +
    "\001\002\000\024\003\212\005\050\006\052\007\062\011" +
    "\055\012\044\020\202\035\046\127\056\001\002\000\004" +
    "\067\uff0e\001\002\000\004\067\uff0c\001\002\000\010\003" +
    "\uff06\013\uff06\034\uff06\001\002\000\010\003\uff03\013\uff03" +
    "\034\uff03\001\002\000\004\057\322\001\002\000\010\060" +
    "\035\061\024\062\032\001\002\000\006\003\217\011\216" +
    "\001\002\000\006\003\261\043\262\001\002\000\004\067" +
    "\220\001\002\000\022\005\050\006\052\007\062\011\055" +
    "\012\044\035\046\051\222\127\056\001\002\000\010\050" +
    "\241\052\242\067\245\001\002\000\022\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\051\222\127\056\001" +
    "\002\000\030\034\064\035\065\036\067\037\066\040\063" +
    "\041\231\042\230\044\225\045\224\046\227\047\226\001" +
    "\002\000\020\005\050\006\052\007\062\011\055\012\044" +
    "\035\046\127\056\001\002\000\020\005\050\006\052\007" +
    "\062\011\055\012\044\035\046\127\056\001\002\000\020" +
    "\005\050\006\052\007\062\011\055\012\044\035\046\127" +
    "\056\001\002\000\020\005\050\006\052\007\062\011\055" +
    "\012\044\035\046\127\056\001\002\000\020\005\050\006" +
    "\052\007\062\011\055\012\044\035\046\127\056\001\002" +
    "\000\020\005\050\006\052\007\062\011\055\012\044\035" +
    "\046\127\056\001\002\000\026\003\ufef6\013\ufef6\034\064" +
    "\035\065\036\067\037\066\040\063\050\ufef6\052\ufef6\067" +
    "\ufef6\001\002\000\026\003\ufef5\013\ufef5\034\064\035\065" +
    "\036\067\037\066\040\063\050\ufef5\052\ufef5\067\ufef5\001" +
    "\002\000\026\003\ufef2\013\ufef2\034\064\035\065\036\067" +
    "\037\066\040\063\050\ufef2\052\ufef2\067\ufef2\001\002\000" +
    "\026\003\ufef1\013\ufef1\034\064\035\065\036\067\037\066" +
    "\040\063\050\ufef1\052\ufef1\067\ufef1\001\002\000\026\003" +
    "\ufef4\013\ufef4\034\064\035\065\036\067\037\066\040\063" +
    "\050\ufef4\052\ufef4\067\ufef4\001\002\000\026\003\ufef3\013" +
    "\ufef3\034\064\035\065\036\067\037\066\040\063\050\ufef3" +
    "\052\ufef3\067\ufef3\001\002\000\014\003\ufeee\013\ufeee\050" +
    "\ufeee\052\ufeee\067\ufeee\001\002\000\022\005\050\006\052" +
    "\007\062\011\055\012\044\035\046\051\222\127\056\001" +
    "\002\000\022\005\050\006\052\007\062\011\055\012\044" +
    "\035\046\051\222\127\056\001\002\000\014\003\ufeef\013" +
    "\ufeef\050\241\052\ufeef\067\ufeef\001\002\000\014\003\ufef0" +
    "\013\ufef0\050\ufef0\052\ufef0\067\ufef0\001\002\000\004\011" +
    "\246\001\002\000\012\003\250\043\251\076\247\077\253" +
    "\001\002\000\006\003\uff31\013\uff31\001\002\000\006\003" +
    "\uff2f\013\uff2f\001\002\000\020\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\004\013" +
    "\254\001\002\000\006\003\uff30\013\uff30\001\002\000\004" +
    "\057\255\001\002\000\046\011\157\023\053\024\043\025" +
    "\057\027\155\030\146\033\174\053\150\056\uff54\060\035" +
    "\061\024\062\032\074\162\125\165\127\160\130\177\135" +
    "\153\140\163\001\002\000\004\056\257\001\002\000\054" +
    "\003\uff36\011\uff36\023\uff36\024\uff36\025\uff36\027\uff36\030" +
    "\uff36\033\uff36\053\uff36\056\uff36\060\uff36\061\uff36\062\uff36" +
    "\074\uff36\113\uff36\125\uff36\127\uff36\130\uff36\135\uff36\137" +
    "\uff36\140\uff36\001\002\000\020\003\uff32\013\uff32\034\064" +
    "\035\065\036\067\037\066\040\063\001\002\000\004\067" +
    "\311\001\002\000\020\005\050\006\052\007\062\011\055" +
    "\012\044\035\046\127\056\001\002\000\016\034\064\035" +
    "\065\036\067\037\066\040\063\067\264\001\002\000\024" +
    "\003\266\005\050\006\052\007\062\011\055\012\044\035" +
    "\046\051\222\127\056\001\002\000\010\050\241\052\242" +
    "\067\276\001\002\000\004\067\267\001\002\000\004\011" +
    "\270\001\002\000\012\003\250\043\251\076\247\077\253" +
    "\001\002\000\004\013\272\001\002\000\004\057\273\001" +
    "\002\000\046\011\157\023\053\024\043\025\057\027\155" +
    "\030\146\033\174\053\150\056\uff54\060\035\061\024\062" +
    "\032\074\162\125\165\127\160\130\177\135\153\140\163" +
    "\001\002\000\004\056\275\001\002\000\054\003\uff35\011" +
    "\uff35\023\uff35\024\uff35\025\uff35\027\uff35\030\uff35\033\uff35" +
    "\053\uff35\056\uff35\060\uff35\061\uff35\062\uff35\074\uff35\113" +
    "\uff35\125\uff35\127\uff35\130\uff35\135\uff35\137\uff35\140\uff35" +
    "\001\002\000\004\011\277\001\002\000\012\003\250\043" +
    "\251\076\247\077\253\001\002\000\006\003\302\013\301" +
    "\001\002\000\004\057\306\001\002\000\004\057\303\001" +
    "\002\000\046\011\157\023\053\024\043\025\057\027\155" +
    "\030\146\033\174\053\150\056\uff54\060\035\061\024\062" +
    "\032\074\162\125\165\127\160\130\177\135\153\140\163" +
    "\001\002\000\004\056\305\001\002\000\054\003\uff33\011" +
    "\uff33\023\uff33\024\uff33\025\uff33\027\uff33\030\uff33\033\uff33" +
    "\053\uff33\056\uff33\060\uff33\061\uff33\062\uff33\074\uff33\113" +
    "\uff33\125\uff33\127\uff33\130\uff33\135\uff33\137\uff33\140\uff33" +
    "\001\002\000\046\011\157\023\053\024\043\025\057\027" +
    "\155\030\146\033\174\053\150\056\uff54\060\035\061\024" +
    "\062\032\074\162\125\165\127\160\130\177\135\153\140" +
    "\163\001\002\000\004\056\310\001\002\000\054\003\uff38" +
    "\011\uff38\023\uff38\024\uff38\025\uff38\027\uff38\030\uff38\033" +
    "\uff38\053\uff38\056\uff38\060\uff38\061\uff38\062\uff38\074\uff38" +
    "\113\uff38\125\uff38\127\uff38\130\uff38\135\uff38\137\uff38\140" +
    "\uff38\001\002\000\022\005\050\006\052\007\062\011\055" +
    "\012\044\035\046\051\222\127\056\001\002\000\010\050" +
    "\241\052\242\067\313\001\002\000\004\011\314\001\002" +
    "\000\012\003\250\043\251\076\247\077\253\001\002\000" +
    "\004\013\316\001\002\000\004\057\317\001\002\000\046" +
    "\011\157\023\053\024\043\025\057\027\155\030\146\033" +
    "\174\053\150\056\uff54\060\035\061\024\062\032\074\162" +
    "\125\165\127\160\130\177\135\153\140\163\001\002\000" +
    "\004\056\321\001\002\000\054\003\uff37\011\uff37\023\uff37" +
    "\024\uff37\025\uff37\027\uff37\030\uff37\033\uff37\053\uff37\056" +
    "\uff37\060\uff37\061\uff37\062\uff37\074\uff37\113\uff37\125\uff37" +
    "\127\uff37\130\uff37\135\uff37\137\uff37\140\uff37\001\002\000" +
    "\046\011\157\023\053\024\043\025\057\027\155\030\146" +
    "\033\174\053\150\056\uff54\060\035\061\024\062\032\074" +
    "\162\125\165\127\160\130\177\135\153\140\163\001\002" +
    "\000\004\056\324\001\002\000\054\003\uff34\011\uff34\023" +
    "\uff34\024\uff34\025\uff34\027\uff34\030\uff34\033\uff34\053\uff34" +
    "\056\uff34\060\uff34\061\uff34\062\uff34\074\uff34\113\uff34\125" +
    "\uff34\127\uff34\130\uff34\135\uff34\137\uff34\140\uff34\001\002" +
    "\000\054\003\uff4d\011\uff4d\023\uff4d\024\uff4d\025\uff4d\027" +
    "\uff4d\030\uff4d\033\uff4d\053\uff4d\056\uff4d\060\uff4d\061\uff4d" +
    "\062\uff4d\074\uff4d\113\uff4d\125\uff4d\127\uff4d\130\uff4d\135" +
    "\uff4d\137\uff4d\140\uff4d\001\002\000\004\067\uff07\001\002" +
    "\000\024\003\331\005\050\006\052\007\062\011\055\012" +
    "\044\020\202\035\046\127\056\001\002\000\010\003\333" +
    "\013\332\034\206\001\002\000\012\003\uff03\013\uff03\034" +
    "\uff03\067\uff08\001\002\000\004\067\uff0d\001\002\000\004" +
    "\067\uff09\001\002\000\046\011\157\023\053\024\043\025" +
    "\057\027\155\030\146\033\174\053\150\056\uff54\060\035" +
    "\061\024\062\032\074\162\125\165\127\160\130\177\135" +
    "\153\140\163\001\002\000\004\056\336\001\002\000\006" +
    "\003\337\030\340\001\002\000\004\067\uff18\001\002\000" +
    "\006\003\341\012\342\001\002\000\004\067\uff19\001\002" +
    "\000\024\003\344\005\050\006\052\007\062\011\055\012" +
    "\044\035\046\051\222\127\056\001\002\000\012\003\346" +
    "\013\345\050\241\052\242\001\002\000\004\067\uff1a\001" +
    "\002\000\004\067\uff1c\001\002\000\004\067\uff1b\001\002" +
    "\000\054\003\uff53\011\uff53\023\uff53\024\uff53\025\uff53\027" +
    "\uff53\030\uff53\033\uff53\053\uff53\056\uff53\060\uff53\061\uff53" +
    "\062\uff53\074\uff53\113\uff53\125\uff53\127\uff53\130\uff53\135" +
    "\uff53\137\uff53\140\uff53\001\002\000\004\043\351\001\002" +
    "\000\026\005\050\006\052\007\062\011\055\012\044\023" +
    "\053\024\043\025\057\035\046\127\056\001\002\000\004" +
    "\067\uff11\001\002\000\026\005\050\006\052\007\062\011" +
    "\055\012\044\023\053\024\043\025\057\035\046\127\056" +
    "\001\002\000\004\067\uff12\001\002\000\004\057\u0118\001" +
    "\002\000\024\003\360\005\050\006\052\007\062\011\055" +
    "\012\044\035\046\051\222\127\056\001\002\000\010\013" +
    "\u010f\050\241\052\242\001\002\000\004\013\361\001\002" +
    "\000\004\057\362\001\002\000\046\011\157\023\053\024" +
    "\043\025\057\027\155\030\146\033\174\053\150\056\uff54" +
    "\060\035\061\024\062\032\074\162\125\165\127\160\130" +
    "\177\135\153\140\163\001\002\000\004\056\364\001\002" +
    "\000\056\003\uff39\011\uff39\023\uff39\024\uff39\025\uff39\026" +
    "\366\027\uff39\030\uff39\033\uff39\053\uff39\056\uff39\060\uff39" +
    "\061\uff39\062\uff39\074\uff39\113\uff39\125\uff39\127\uff39\130" +
    "\uff39\135\uff39\137\uff39\140\uff39\001\002\000\054\003\uff42" +
    "\011\uff42\023\uff42\024\uff42\025\uff42\027\uff42\030\uff42\033" +
    "\uff42\053\uff42\056\uff42\060\uff42\061\uff42\062\uff42\074\uff42" +
    "\113\uff42\125\uff42\127\uff42\130\uff42\135\uff42\137\uff42\140" +
    "\uff42\001\002\000\010\003\367\027\370\057\371\001\002" +
    "\000\054\003\uff3a\011\uff3a\023\uff3a\024\uff3a\025\uff3a\027" +
    "\uff3a\030\uff3a\033\uff3a\053\uff3a\056\uff3a\060\uff3a\061\uff3a" +
    "\062\uff3a\074\uff3a\113\uff3a\125\uff3a\127\uff3a\130\uff3a\135" +
    "\uff3a\137\uff3a\140\uff3a\001\002\000\006\003\374\012\375" +
    "\001\002\000\046\011\157\023\053\024\043\025\057\027" +
    "\155\030\146\033\174\053\150\056\uff54\060\035\061\024" +
    "\062\032\074\162\125\165\127\160\130\177\135\153\140" +
    "\163\001\002\000\004\056\373\001\002\000\054\003\uff3e" +
    "\011\uff3e\023\uff3e\024\uff3e\025\uff3e\027\uff3e\030\uff3e\033" +
    "\uff3e\053\uff3e\056\uff3e\060\uff3e\061\uff3e\062\uff3e\074\uff3e" +
    "\113\uff3e\125\uff3e\127\uff3e\130\uff3e\135\uff3e\137\uff3e\140" +
    "\uff3e\001\002\000\004\057\u010b\001\002\000\024\003\377" +
    "\005\050\006\052\007\062\011\055\012\044\035\046\051" +
    "\222\127\056\001\002\000\010\013\u0105\050\241\052\242" +
    "\001\002\000\004\013\u0100\001\002\000\004\057\u0101\001" +
    "\002\000\046\011\157\023\053\024\043\025\057\027\155" +
    "\030\146\033\174\053\150\056\uff54\060\035\061\024\062" +
    "\032\074\162\125\165\127\160\130\177\135\153\140\163" +
    "\001\002\000\004\056\u0103\001\002\000\056\003\uff39\011" +
    "\uff39\023\uff39\024\uff39\025\uff39\026\366\027\uff39\030\uff39" +
    "\033\uff39\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39\074" +
    "\uff39\113\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137\uff39" +
    "\140\uff39\001\002\000\054\003\uff3d\011\uff3d\023\uff3d\024" +
    "\uff3d\025\uff3d\027\uff3d\030\uff3d\033\uff3d\053\uff3d\056\uff3d" +
    "\060\uff3d\061\uff3d\062\uff3d\074\uff3d\113\uff3d\125\uff3d\127" +
    "\uff3d\130\uff3d\135\uff3d\137\uff3d\140\uff3d\001\002\000\006" +
    "\003\u0106\057\u0107\001\002\000\054\003\uff3b\011\uff3b\023" +
    "\uff3b\024\uff3b\025\uff3b\027\uff3b\030\uff3b\033\uff3b\053\uff3b" +
    "\056\uff3b\060\uff3b\061\uff3b\062\uff3b\074\uff3b\113\uff3b\125" +
    "\uff3b\127\uff3b\130\uff3b\135\uff3b\137\uff3b\140\uff3b\001\002" +
    "\000\046\011\157\023\053\024\043\025\057\027\155\030" +
    "\146\033\174\053\150\056\uff54\060\035\061\024\062\032" +
    "\074\162\125\165\127\160\130\177\135\153\140\163\001" +
    "\002\000\004\056\u0109\001\002\000\056\003\uff39\011\uff39" +
    "\023\uff39\024\uff39\025\uff39\026\366\027\uff39\030\uff39\033" +
    "\uff39\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39\074\uff39" +
    "\113\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137\uff39\140" +
    "\uff39\001\002\000\054\003\uff3f\011\uff3f\023\uff3f\024\uff3f" +
    "\025\uff3f\027\uff3f\030\uff3f\033\uff3f\053\uff3f\056\uff3f\060" +
    "\uff3f\061\uff3f\062\uff3f\074\uff3f\113\uff3f\125\uff3f\127\uff3f" +
    "\130\uff3f\135\uff3f\137\uff3f\140\uff3f\001\002\000\046\011" +
    "\157\023\053\024\043\025\057\027\155\030\146\033\174" +
    "\053\150\056\uff54\060\035\061\024\062\032\074\162\125" +
    "\165\127\160\130\177\135\153\140\163\001\002\000\004" +
    "\056\u010d\001\002\000\056\003\uff39\011\uff39\023\uff39\024" +
    "\uff39\025\uff39\026\366\027\uff39\030\uff39\033\uff39\053\uff39" +
    "\056\uff39\060\uff39\061\uff39\062\uff39\074\uff39\113\uff39\125" +
    "\uff39\127\uff39\130\uff39\135\uff39\137\uff39\140\uff39\001\002" +
    "\000\054\003\uff3c\011\uff3c\023\uff3c\024\uff3c\025\uff3c\027" +
    "\uff3c\030\uff3c\033\uff3c\053\uff3c\056\uff3c\060\uff3c\061\uff3c" +
    "\062\uff3c\074\uff3c\113\uff3c\125\uff3c\127\uff3c\130\uff3c\135" +
    "\uff3c\137\uff3c\140\uff3c\001\002\000\036\003\u0111\011\157" +
    "\023\053\024\043\025\057\053\150\057\u0112\060\035\061" +
    "\024\062\032\125\165\127\160\130\177\140\163\001\002" +
    "\000\004\067\u0117\001\002\000\056\003\uff39\011\uff39\023" +
    "\uff39\024\uff39\025\uff39\026\366\027\uff39\030\uff39\033\uff39" +
    "\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39\074\uff39\113" +
    "\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137\uff39\140\uff39" +
    "\001\002\000\046\011\157\023\053\024\043\025\057\027" +
    "\155\030\146\033\174\053\150\056\uff54\060\035\061\024" +
    "\062\032\074\162\125\165\127\160\130\177\135\153\140" +
    "\163\001\002\000\004\056\u0114\001\002\000\056\003\uff39" +
    "\011\uff39\023\uff39\024\uff39\025\uff39\026\366\027\uff39\030" +
    "\uff39\033\uff39\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39" +
    "\074\uff39\113\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137" +
    "\uff39\140\uff39\001\002\000\054\003\uff44\011\uff44\023\uff44" +
    "\024\uff44\025\uff44\027\uff44\030\uff44\033\uff44\053\uff44\056" +
    "\uff44\060\uff44\061\uff44\062\uff44\074\uff44\113\uff44\125\uff44" +
    "\127\uff44\130\uff44\135\uff44\137\uff44\140\uff44\001\002\000" +
    "\054\003\uff40\011\uff40\023\uff40\024\uff40\025\uff40\027\uff40" +
    "\030\uff40\033\uff40\053\uff40\056\uff40\060\uff40\061\uff40\062" +
    "\uff40\074\uff40\113\uff40\125\uff40\127\uff40\130\uff40\135\uff40" +
    "\137\uff40\140\uff40\001\002\000\054\003\uff43\011\uff43\023" +
    "\uff43\024\uff43\025\uff43\027\uff43\030\uff43\033\uff43\053\uff43" +
    "\056\uff43\060\uff43\061\uff43\062\uff43\074\uff43\113\uff43\125" +
    "\uff43\127\uff43\130\uff43\135\uff43\137\uff43\140\uff43\001\002" +
    "\000\046\011\157\023\053\024\043\025\057\027\155\030" +
    "\146\033\174\053\150\056\uff54\060\035\061\024\062\032" +
    "\074\162\125\165\127\160\130\177\135\153\140\163\001" +
    "\002\000\004\056\u011a\001\002\000\056\003\uff39\011\uff39" +
    "\023\uff39\024\uff39\025\uff39\026\366\027\uff39\030\uff39\033" +
    "\uff39\053\uff39\056\uff39\060\uff39\061\uff39\062\uff39\074\uff39" +
    "\113\uff39\125\uff39\127\uff39\130\uff39\135\uff39\137\uff39\140" +
    "\uff39\001\002\000\054\003\uff41\011\uff41\023\uff41\024\uff41" +
    "\025\uff41\027\uff41\030\uff41\033\uff41\053\uff41\056\uff41\060" +
    "\uff41\061\uff41\062\uff41\074\uff41\113\uff41\125\uff41\127\uff41" +
    "\130\uff41\135\uff41\137\uff41\140\uff41\001\002\000\004\057" +
    "\u014f\001\002\000\022\003\u011e\005\050\006\052\007\062" +
    "\011\055\012\044\035\046\127\056\001\002\000\004\013" +
    "\u013d\001\002\000\020\003\u0121\013\u0120\034\064\035\065" +
    "\036\067\037\066\040\063\001\002\000\004\057\u013a\001" +
    "\002\000\004\057\u0122\001\002\000\010\003\u0124\113\u0127" +
    "\137\u0123\001\002\000\004\014\uff1f\001\002\000\004\014" +
    "\u0138\001\002\000\012\003\u0131\056\u0132\113\u0127\137\u0123" +
    "\001\002\000\004\014\u012b\001\002\000\010\005\u012a\006" +
    "\u0128\007\u0129\001\002\000\004\014\uff21\001\002\000\004" +
    "\014\uff20\001\002\000\004\014\uff22\001\002\000\056\003" +
    "\uff54\011\157\023\053\024\043\025\057\027\155\030\146" +
    "\033\174\053\150\056\uff54\057\u012d\060\035\061\024\062" +
    "\032\074\162\113\uff54\125\165\127\160\130\177\135\153" +
    "\137\uff54\140\163\001\002\000\012\003\uff1d\056\uff1d\113" +
    "\uff1d\137\uff1d\001\002\000\046\011\157\023\053\024\043" +
    "\025\057\027\155\030\146\033\174\053\150\056\uff54\060" +
    "\035\061\024\062\032\074\162\125\165\127\160\130\177" +
    "\135\153\140\163\001\002\000\012\003\uff25\056\uff25\113" +
    "\uff25\137\uff25\001\002\000\004\056\u0130\001\002\000\012" +
    "\003\uff1e\056\uff1e\113\uff1e\137\uff1e\001\002\000\004\014" +
    "\u0136\001\002\000\054\003\uff27\011\uff27\023\uff27\024\uff27" +
    "\025\uff27\027\uff27\030\uff27\033\uff27\053\uff27\056\uff27\060" +
    "\uff27\061\uff27\062\uff27\074\uff27\113\uff27\125\uff27\127\uff27" +
    "\130\uff27\135\uff27\137\uff27\140\uff27\001\002\000\004\014" +
    "\u0134\001\002\000\056\003\uff54\011\157\023\053\024\043" +
    "\025\057\027\155\030\146\033\174\053\150\056\uff54\057" +
    "\u012d\060\035\061\024\062\032\074\162\113\uff54\125\165" +
    "\127\160\130\177\135\153\137\uff54\140\163\001\002\000" +
    "\012\003\uff26\056\uff26\113\uff26\137\uff26\001\002\000\056" +
    "\003\uff54\011\157\023\053\024\043\025\057\027\155\030" +
    "\146\033\174\053\150\056\uff54\057\u012d\060\035\061\024" +
    "\062\032\074\162\113\uff54\125\165\127\160\130\177\135" +
    "\153\137\uff54\140\163\001\002\000\012\003\uff24\056\uff24" +
    "\113\uff24\137\uff24\001\002\000\056\003\uff54\011\157\023" +
    "\053\024\043\025\057\027\155\030\146\033\174\053\150" +
    "\056\uff54\057\u012d\060\035\061\024\062\032\074\162\113" +
    "\uff54\125\165\127\160\130\177\135\153\137\uff54\140\163" +
    "\001\002\000\012\003\uff23\056\uff23\113\uff23\137\uff23\001" +
    "\002\000\010\003\u0124\113\u0127\137\u0123\001\002\000\012" +
    "\003\u0131\056\u013c\113\u0127\137\u0123\001\002\000\054\003" +
    "\uff2a\011\uff2a\023\uff2a\024\uff2a\025\uff2a\027\uff2a\030\uff2a" +
    "\033\uff2a\053\uff2a\056\uff2a\060\uff2a\061\uff2a\062\uff2a\074" +
    "\uff2a\113\uff2a\125\uff2a\127\uff2a\130\uff2a\135\uff2a\137\uff2a" +
    "\140\uff2a\001\002\000\004\057\u013e\001\002\000\010\003" +
    "\u0141\113\u0143\137\u013f\001\002\000\004\014\ufdc6\001\002" +
    "\000\012\003\u0141\056\u014b\113\u0143\137\u013f\001\002\000" +
    "\004\014\ufdc5\001\002\000\004\014\u0147\001\002\000\010" +
    "\005\u0146\006\u0144\007\u0145\001\002\000\004\014\ufdc8\001" +
    "\002\000\004\014\ufdc7\001\002\000\004\014\ufdc9\001\002" +
    "\000\004\003\u0148\001\002\000\014\003\ufdcb\056\ufdcb\106" +
    "\ufdcb\113\ufdcb\137\ufdcb\001\002\000\014\003\ufdcc\056\ufdcc" +
    "\106\ufdcc\113\ufdcc\137\ufdcc\001\002\000\004\014\u014c\001" +
    "\002\000\054\003\uff28\011\uff28\023\uff28\024\uff28\025\uff28" +
    "\027\uff28\030\uff28\033\uff28\053\uff28\056\uff28\060\uff28\061" +
    "\uff28\062\uff28\074\uff28\113\uff28\125\uff28\127\uff28\130\uff28" +
    "\135\uff28\137\uff28\140\uff28\001\002\000\004\003\u014d\001" +
    "\002\000\014\003\ufdca\056\ufdca\106\ufdca\113\ufdca\137\ufdca" +
    "\001\002\000\014\003\ufdcd\056\ufdcd\106\ufdcd\113\ufdcd\137" +
    "\ufdcd\001\002\000\010\003\u0141\113\u0143\137\u013f\001\002" +
    "\000\012\003\u0141\056\u0151\113\u0143\137\u013f\001\002\000" +
    "\054\003\uff29\011\uff29\023\uff29\024\uff29\025\uff29\027\uff29" +
    "\030\uff29\033\uff29\053\uff29\056\uff29\060\uff29\061\uff29\062" +
    "\uff29\074\uff29\113\uff29\125\uff29\127\uff29\130\uff29\135\uff29" +
    "\137\uff29\140\uff29\001\002\000\020\003\uff61\056\uff61\060" +
    "\uff61\061\uff61\062\uff61\120\uff61\133\uff61\001\002\000\054" +
    "\003\uff4c\011\uff4c\023\uff4c\024\uff4c\025\uff4c\027\uff4c\030" +
    "\uff4c\033\uff4c\053\uff4c\056\uff4c\060\uff4c\061\uff4c\062\uff4c" +
    "\074\uff4c\113\uff4c\125\uff4c\127\uff4c\130\uff4c\135\uff4c\137" +
    "\uff4c\140\uff4c\001\002\000\004\067\uff01\001\002\000\016" +
    "\034\064\035\065\036\067\037\066\040\063\067\uff02\001" +
    "\002\000\004\057\u0166\001\002\000\024\003\u0159\005\050" +
    "\006\052\007\062\011\055\012\044\035\046\051\222\127" +
    "\056\001\002\000\012\003\u015f\013\u015e\050\241\052\242" +
    "\001\002\000\004\013\u015a\001\002\000\004\057\u015b\001" +
    "\002\000\046\011\157\023\053\024\043\025\057\027\155" +
    "\030\146\033\174\053\150\056\uff54\060\035\061\024\062" +
    "\032\074\162\125\165\127\160\130\177\135\153\140\163" +
    "\001\002\000\004\056\u015d\001\002\000\054\003\uff2c\011" +
    "\uff2c\023\uff2c\024\uff2c\025\uff2c\027\uff2c\030\uff2c\033\uff2c" +
    "\053\uff2c\056\uff2c\060\uff2c\061\uff2c\062\uff2c\074\uff2c\113" +
    "\uff2c\125\uff2c\127\uff2c\130\uff2c\135\uff2c\137\uff2c\140\uff2c" +
    "\001\002\000\004\057\u0163\001\002\000\004\057\u0160\001" +
    "\002\000\046\011\157\023\053\024\043\025\057\027\155" +
    "\030\146\033\174\053\150\056\uff54\060\035\061\024\062" +
    "\032\074\162\125\165\127\160\130\177\135\153\140\163" +
    "\001\002\000\004\056\u0162\001\002\000\054\003\uff2b\011" +
    "\uff2b\023\uff2b\024\uff2b\025\uff2b\027\uff2b\030\uff2b\033\uff2b" +
    "\053\uff2b\056\uff2b\060\uff2b\061\uff2b\062\uff2b\074\uff2b\113" +
    "\uff2b\125\uff2b\127\uff2b\130\uff2b\135\uff2b\137\uff2b\140\uff2b" +
    "\001\002\000\046\011\157\023\053\024\043\025\057\027" +
    "\155\030\146\033\174\053\150\056\uff54\060\035\061\024" +
    "\062\032\074\162\125\165\127\160\130\177\135\153\140" +
    "\163\001\002\000\004\056\u0165\001\002\000\054\003\uff2e" +
    "\011\uff2e\023\uff2e\024\uff2e\025\uff2e\027\uff2e\030\uff2e\033" +
    "\uff2e\053\uff2e\056\uff2e\060\uff2e\061\uff2e\062\uff2e\074\uff2e" +
    "\113\uff2e\125\uff2e\127\uff2e\130\uff2e\135\uff2e\137\uff2e\140" +
    "\uff2e\001\002\000\046\011\157\023\053\024\043\025\057" +
    "\027\155\030\146\033\174\053\150\056\uff54\060\035\061" +
    "\024\062\032\074\162\125\165\127\160\130\177\135\153" +
    "\140\163\001\002\000\004\056\u0168\001\002\000\054\003" +
    "\uff2d\011\uff2d\023\uff2d\024\uff2d\025\uff2d\027\uff2d\030\uff2d" +
    "\033\uff2d\053\uff2d\056\uff2d\060\uff2d\061\uff2d\062\uff2d\074" +
    "\uff2d\113\uff2d\125\uff2d\127\uff2d\130\uff2d\135\uff2d\137\uff2d" +
    "\140\uff2d\001\002\000\006\013\uff56\021\uff56\001\002\000" +
    "\006\003\u0172\012\u0173\001\002\000\004\012\u016c\001\002" +
    "\000\014\003\127\013\uff5c\060\035\061\024\062\032\001" +
    "\002\000\004\013\u016e\001\002\000\004\057\u016f\001\002" +
    "\000\046\011\157\023\053\024\043\025\057\027\155\030" +
    "\146\033\174\053\150\056\uff54\060\035\061\024\062\032" +
    "\074\162\125\165\127\160\130\177\135\153\140\163\001" +
    "\002\000\004\056\u0171\001\002\000\020\003\uff60\056\uff60" +
    "\060\uff60\061\uff60\062\uff60\120\uff60\133\uff60\001\002\000" +
    "\004\057\u017a\001\002\000\014\003\127\013\uff5c\060\035" +
    "\061\024\062\032\001\002\000\004\013\u0175\001\002\000" +
    "\006\003\u0176\057\u0177\001\002\000\020\003\uff5e\056\uff5e" +
    "\060\uff5e\061\uff5e\062\uff5e\120\uff5e\133\uff5e\001\002\000" +
    "\046\011\157\023\053\024\043\025\057\027\155\030\146" +
    "\033\174\053\150\056\uff54\060\035\061\024\062\032\074" +
    "\162\125\165\127\160\130\177\135\153\140\163\001\002" +
    "\000\004\056\u0179\001\002\000\020\003\uff62\056\uff62\060" +
    "\uff62\061\uff62\062\uff62\120\uff62\133\uff62\001\002\000\046" +
    "\011\157\023\053\024\043\025\057\027\155\030\146\033" +
    "\174\053\150\056\uff54\060\035\061\024\062\032\074\162" +
    "\125\165\127\160\130\177\135\153\140\163\001\002\000" +
    "\004\056\u017c\001\002\000\020\003\uff5f\056\uff5f\060\uff5f" +
    "\061\uff5f\062\uff5f\120\uff5f\133\uff5f\001\002\000\020\003" +
    "\uff66\056\uff66\060\uff66\061\uff66\062\uff66\120\uff66\133\uff66" +
    "\001\002\000\012\003\uff6a\111\uff6a\126\uff6a\133\uff6a\001" +
    "\002\000\012\003\uff69\111\uff69\126\uff69\133\uff69\001\002" +
    "\000\020\003\ufd99\056\uff67\060\035\061\024\062\032\120" +
    "\ufd99\133\015\001\002\000\004\056\u0182\001\002\000\012" +
    "\003\uff6c\111\uff6c\126\uff6c\133\uff6c\001\002\000\004\057" +
    "\u0184\001\002\000\020\003\ufd99\056\uff67\060\035\061\024" +
    "\062\032\120\ufd99\133\015\001\002\000\004\056\u0186\001" +
    "\002\000\012\003\uff6b\111\uff6b\126\uff6b\133\uff6b\001\002" +
    "\000\012\003\uff6e\111\uff6e\126\uff6e\133\uff6e\001\002\000" +
    "\004\004\u0316\001\002\000\004\143\u018b\001\002\000\004" +
    "\002\000\001\002\000\020\060\ufe7e\061\ufe7e\062\ufe7e\071" +
    "\u018d\120\ufe7e\123\ufe7e\131\ufe7e\001\002\000\020\060\ufe7f" +
    "\061\ufe7f\062\ufe7f\071\u018d\120\ufe7f\123\ufe7f\131\ufe7f\001" +
    "\002\000\006\003\u0301\141\u0302\001\002\000\016\060\ufe6c" +
    "\061\ufe6c\062\ufe6c\120\ufe6c\123\ufe6c\131\u0190\001\002\000" +
    "\020\060\ufe7c\061\ufe7c\062\ufe7c\071\ufe7c\120\ufe7c\123\ufe7c" +
    "\131\ufe7c\001\002\000\012\003\u02f7\060\035\061\024\062" +
    "\032\001\002\000\014\060\035\061\024\062\032\120\ufe62" +
    "\123\u0195\001\002\000\016\060\ufe6a\061\ufe6a\062\ufe6a\120" +
    "\ufe6a\123\ufe6a\131\ufe6a\001\002\000\016\060\ufe6d\061\ufe6d" +
    "\062\ufe6d\120\ufe6d\123\ufe6d\131\u0190\001\002\000\016\060" +
    "\ufe6b\061\ufe6b\062\ufe6b\120\ufe6b\123\ufe6b\131\ufe6b\001\002" +
    "\000\006\003\u02c6\072\u02f5\001\002\000\014\060\035\061" +
    "\024\062\032\120\ufe63\123\u0195\001\002\000\004\120\u01dd" +
    "\001\002\000\006\003\u01da\067\u01db\001\002\000\006\003" +
    "\u019c\011\u019b\001\002\000\014\060\ufe60\061\ufe60\062\ufe60" +
    "\120\ufe60\123\ufe60\001\002\000\014\003\ufe4d\021\ufe4d\043" +
    "\u01a2\063\u01cf\067\ufe4d\001\002\000\006\003\ufe5a\067\ufe5a" +
    "\001\002\000\006\003\ufe5b\067\ufe5b\001\002\000\010\003" +
    "\ufe5d\021\u019f\067\ufe5d\001\002\000\006\003\u01a1\011\u01a0" +
    "\001\002\000\012\003\ufe4d\021\ufe4d\043\u01a2\067\ufe4d\001" +
    "\002\000\010\003\ufe50\021\ufe50\067\ufe50\001\002\000\026" +
    "\003\u01ac\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\010\003\ufe52" +
    "\021\ufe52\067\ufe52\001\002\000\024\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5" +
    "\001\002\000\004\072\u01c5\001\002\000\004\072\u01c0\001" +
    "\002\000\004\072\u01b7\001\002\000\022\003\ufe4f\021\ufe4f" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\067\ufe4f\001" +
    "\002\000\046\003\ufdbd\013\ufdbd\021\ufdbd\034\ufdbd\035\ufdbd" +
    "\036\ufdbd\037\ufdbd\040\ufdbd\041\ufdbd\042\ufdbd\044\ufdbd\045" +
    "\ufdbd\046\ufdbd\047\ufdbd\050\ufdbd\052\ufdbd\064\ufdbd\067\ufdbd" +
    "\001\002\000\046\003\ufdbe\013\ufdbe\021\ufdbe\034\ufdbe\035" +
    "\ufdbe\036\ufdbe\037\ufdbe\040\ufdbe\041\ufdbe\042\ufdbe\044\ufdbe" +
    "\045\ufdbe\046\ufdbe\047\ufdbe\050\ufdbe\052\ufdbe\064\ufdbe\067" +
    "\ufdbe\001\002\000\046\003\ufd9d\013\ufd9d\021\ufd9d\034\ufd9d" +
    "\035\ufd9d\036\ufd9d\037\ufd9d\040\ufd9d\041\ufd9d\042\ufd9d\044" +
    "\ufd9d\045\ufd9d\046\ufd9d\047\ufd9d\050\ufd9d\052\ufd9d\064\ufd9d" +
    "\067\ufd9d\001\002\000\010\003\ufe4e\021\ufe4e\067\ufe4e\001" +
    "\002\000\024\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\024\005" +
    "\050\006\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a7" +
    "\101\u01a6\123\u01a5\001\002\000\024\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5" +
    "\001\002\000\024\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\024" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046\100" +
    "\u01a7\101\u01a6\123\u01a5\001\002\000\046\003\ufdc1\013\ufdc1" +
    "\021\ufdc1\034\ufdc1\035\ufdc1\036\ufdc1\037\ufdc1\040\ufdc1\041" +
    "\ufdc1\042\ufdc1\044\ufdc1\045\ufdc1\046\ufdc1\047\ufdc1\050\ufdc1" +
    "\052\ufdc1\064\ufdc1\067\ufdc1\001\002\000\046\003\ufdc2\013" +
    "\ufdc2\021\ufdc2\034\ufdc2\035\ufdc2\036\ufdc2\037\ufdc2\040\ufdc2" +
    "\041\ufdc2\042\ufdc2\044\ufdc2\045\ufdc2\046\ufdc2\047\ufdc2\050" +
    "\ufdc2\052\ufdc2\064\ufdc2\067\ufdc2\001\002\000\046\003\ufdc3" +
    "\013\ufdc3\021\ufdc3\034\ufdc3\035\ufdc3\036\u01b1\037\u01b0\040" +
    "\u01ad\041\ufdc3\042\ufdc3\044\ufdc3\045\ufdc3\046\ufdc3\047\ufdc3" +
    "\050\ufdc3\052\ufdc3\064\ufdc3\067\ufdc3\001\002\000\046\003" +
    "\ufdc4\013\ufdc4\021\ufdc4\034\ufdc4\035\ufdc4\036\u01b1\037\u01b0" +
    "\040\u01ad\041\ufdc4\042\ufdc4\044\ufdc4\045\ufdc4\046\ufdc4\047" +
    "\ufdc4\050\ufdc4\052\ufdc4\064\ufdc4\067\ufdc4\001\002\000\046" +
    "\003\ufdc0\013\ufdc0\021\ufdc0\034\ufdc0\035\ufdc0\036\ufdc0\037" +
    "\ufdc0\040\ufdc0\041\ufdc0\042\ufdc0\044\ufdc0\045\ufdc0\046\ufdc0" +
    "\047\ufdc0\050\ufdc0\052\ufdc0\064\ufdc0\067\ufdc0\001\002\000" +
    "\004\011\u01b8\001\002\000\004\012\u01b9\001\002\000\026" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\013\ufdaf\035" +
    "\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\004\013\u01bf" +
    "\001\002\000\022\003\ufdad\013\ufdad\021\ufdad\034\u01ae\035" +
    "\u01af\036\u01b1\037\u01b0\040\u01ad\001\002\000\010\003\ufdb0" +
    "\013\ufdb0\021\u01bd\001\002\000\024\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5" +
    "\001\002\000\022\003\ufdae\013\ufdae\021\ufdae\034\u01ae\035" +
    "\u01af\036\u01b1\037\u01b0\040\u01ad\001\002\000\046\003\ufdb2" +
    "\013\ufdb2\021\ufdb2\034\ufdb2\035\ufdb2\036\ufdb2\037\ufdb2\040" +
    "\ufdb2\041\ufdb2\042\ufdb2\044\ufdb2\045\ufdb2\046\ufdb2\047\ufdb2" +
    "\050\ufdb2\052\ufdb2\064\ufdb2\067\ufdb2\001\002\000\004\011" +
    "\u01c1\001\002\000\004\012\u01c2\001\002\000\026\005\050" +
    "\006\052\007\062\011\u01ab\012\u01a4\013\ufdaf\035\046\100" +
    "\u01a7\101\u01a6\123\u01a5\001\002\000\004\013\u01c4\001\002" +
    "\000\046\003\ufdb1\013\ufdb1\021\ufdb1\034\ufdb1\035\ufdb1\036" +
    "\ufdb1\037\ufdb1\040\ufdb1\041\ufdb1\042\ufdb1\044\ufdb1\045\ufdb1" +
    "\046\ufdb1\047\ufdb1\050\ufdb1\052\ufdb1\064\ufdb1\067\ufdb1\001" +
    "\002\000\004\011\u01c6\001\002\000\004\072\u01c7\001\002" +
    "\000\004\011\u01c8\001\002\000\004\012\u01c9\001\002\000" +
    "\026\005\050\006\052\007\062\011\u01ab\012\u01a4\013\ufdaf" +
    "\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\004\013" +
    "\u01cb\001\002\000\046\003\ufdb3\013\ufdb3\021\ufdb3\034\ufdb3" +
    "\035\ufdb3\036\ufdb3\037\ufdb3\040\ufdb3\041\ufdb3\042\ufdb3\044" +
    "\ufdb3\045\ufdb3\046\ufdb3\047\ufdb3\050\ufdb3\052\ufdb3\064\ufdb3" +
    "\067\ufdb3\001\002\000\016\013\u01cd\034\u01ae\035\u01af\036" +
    "\u01b1\037\u01b0\040\u01ad\001\002\000\046\003\ufdbf\013\ufdbf" +
    "\021\ufdbf\034\ufdbf\035\ufdbf\036\ufdbf\037\ufdbf\040\ufdbf\041" +
    "\ufdbf\042\ufdbf\044\ufdbf\045\ufdbf\046\ufdbf\047\ufdbf\050\ufdbf" +
    "\052\ufdbf\064\ufdbf\067\ufdbf\001\002\000\014\003\ufe57\013" +
    "\ufe57\043\ufe57\063\u01d5\067\ufe57\001\002\000\026\003\u01d2" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046\100" +
    "\u01a7\101\u01a6\123\u01a5\001\002\000\010\003\ufe51\021\ufe51" +
    "\067\ufe51\001\002\000\016\034\u01ae\035\u01af\036\u01b1\037" +
    "\u01b0\040\u01ad\064\u01d4\001\002\000\004\064\u01d3\001\002" +
    "\000\014\003\ufe54\013\ufe54\043\ufe54\063\ufe54\067\ufe54\001" +
    "\002\000\014\003\ufe55\013\ufe55\043\ufe55\063\ufe55\067\ufe55" +
    "\001\002\000\026\003\u01d7\005\050\006\052\007\062\011" +
    "\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5\001\002" +
    "\000\016\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\064" +
    "\u01d9\001\002\000\004\064\u01d8\001\002\000\014\003\ufe53" +
    "\013\ufe53\043\ufe53\063\ufe53\067\ufe53\001\002\000\014\003" +
    "\ufe56\013\ufe56\043\ufe56\063\ufe56\067\ufe56\001\002\000\014" +
    "\060\ufe5e\061\ufe5e\062\ufe5e\120\ufe5e\123\ufe5e\001\002\000" +
    "\014\060\ufe5f\061\ufe5f\062\ufe5f\120\ufe5f\123\ufe5f\001\002" +
    "\000\004\002\ufe80\001\002\000\006\003\u01de\124\u01df\001" +
    "\002\000\046\002\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\006\003\u01e0\012\u01e1\001\002\000\046\002" +
    "\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec\060\035\061\024" +
    "\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123" +
    "\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\006" +
    "\003\u01e3\013\u01e2\001\002\000\006\003\u02ec\057\u02ed\001" +
    "\002\000\046\002\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\004\067\ufe31\001\002\000\052\002\ufe38\003" +
    "\ufe38\011\ufe38\027\ufe38\030\ufe38\033\ufe38\056\ufe38\060\ufe38" +
    "\061\ufe38\062\ufe38\065\ufe38\066\ufe38\074\ufe38\100\ufe38\101" +
    "\ufe38\123\ufe38\125\ufe38\132\ufe38\135\ufe38\136\ufe38\001\002" +
    "\000\052\002\ufe3b\003\ufe3b\011\ufe3b\027\ufe3b\030\ufe3b\033" +
    "\ufe3b\056\ufe3b\060\ufe3b\061\ufe3b\062\ufe3b\065\ufe3b\066\ufe3b" +
    "\074\ufe3b\100\ufe3b\101\ufe3b\123\ufe3b\125\ufe3b\132\ufe3b\135" +
    "\ufe3b\136\ufe3b\001\002\000\006\003\u02d5\012\u02d6\001\002" +
    "\000\006\003\u02c6\072\u02c5\001\002\000\052\002\ufe3a\003" +
    "\ufe3a\011\ufe3a\027\ufe3a\030\ufe3a\033\ufe3a\056\ufe3a\060\ufe3a" +
    "\061\ufe3a\062\ufe3a\065\ufe3a\066\ufe3a\074\ufe3a\100\ufe3a\101" +
    "\ufe3a\123\ufe3a\125\ufe3a\132\ufe3a\135\ufe3a\136\ufe3a\001\002" +
    "\000\006\003\u02c1\012\u02c2\001\002\000\004\067\ufe30\001" +
    "\002\000\004\012\u02a5\001\002\000\004\002\ufe42\001\002" +
    "\000\004\067\ufe2f\001\002\000\004\067\ufe35\001\002\000" +
    "\006\003\u0274\012\u0275\001\002\000\004\067\ufe34\001\002" +
    "\000\012\003\ufe2a\013\ufe2a\043\ufe2a\063\u01cf\001\002\000" +
    "\052\002\ufe3f\003\ufe3f\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\056\ufe3f\060\035\061\024\062\032\065\u01f5\066\u01e7\074" +
    "\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6" +
    "\136\u01ea\001\002\000\004\067\ufdfb\001\002\000\006\003" +
    "\u0255\012\u0256\001\002\000\006\003\u0241\012\u0242\001\002" +
    "\000\006\003\u023d\012\u023e\001\002\000\052\002\ufe37\003" +
    "\ufe37\011\ufe37\027\ufe37\030\ufe37\033\ufe37\056\ufe37\060\ufe37" +
    "\061\ufe37\062\ufe37\065\ufe37\066\ufe37\074\ufe37\100\ufe37\101" +
    "\ufe37\123\ufe37\125\ufe37\132\ufe37\135\ufe37\136\ufe37\001\002" +
    "\000\004\067\ufe2e\001\002\000\004\067\u023c\001\002\000" +
    "\006\003\u0228\012\u0229\001\002\000\052\002\ufe3c\003\ufe3c" +
    "\011\ufe3c\027\ufe3c\030\ufe3c\033\ufe3c\056\ufe3c\060\ufe3c\061" +
    "\ufe3c\062\ufe3c\065\ufe3c\066\ufe3c\074\ufe3c\100\ufe3c\101\ufe3c" +
    "\123\ufe3c\125\ufe3c\132\ufe3c\135\ufe3c\136\ufe3c\001\002\000" +
    "\004\067\ufe33\001\002\000\052\002\ufe39\003\ufe39\011\ufe39" +
    "\027\ufe39\030\ufe39\033\ufe39\056\ufe39\060\ufe39\061\ufe39\062" +
    "\ufe39\065\ufe39\066\ufe39\074\ufe39\100\ufe39\101\ufe39\123\ufe39" +
    "\125\ufe39\132\ufe39\135\ufe39\136\ufe39\001\002\000\004\067" +
    "\ufe32\001\002\000\006\003\u0224\043\u0225\001\002\000\004" +
    "\057\u0203\001\002\000\010\003\ufe29\013\ufe29\043\ufe29\001" +
    "\002\000\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\056\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7\074" +
    "\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6" +
    "\136\u01ea\001\002\000\006\003\u0205\056\u0206\001\002\000" +
    "\052\002\ufdd4\003\ufdd4\011\ufdd4\027\ufdd4\030\ufdd4\033\ufdd4" +
    "\056\ufdd4\060\ufdd4\061\ufdd4\062\ufdd4\065\ufdd4\066\ufdd4\074" +
    "\ufdd4\100\ufdd4\101\ufdd4\123\ufdd4\125\ufdd4\132\ufdd4\135\ufdd4" +
    "\136\ufdd4\001\002\000\006\003\u0207\030\u0208\001\002\000" +
    "\052\002\ufdd5\003\ufdd5\011\ufdd5\027\ufdd5\030\ufdd5\033\ufdd5" +
    "\056\ufdd5\060\ufdd5\061\ufdd5\062\ufdd5\065\ufdd5\066\ufdd5\074" +
    "\ufdd5\100\ufdd5\101\ufdd5\123\ufdd5\125\ufdd5\132\ufdd5\135\ufdd5" +
    "\136\ufdd5\001\002\000\006\003\u0209\012\u020a\001\002\000" +
    "\052\002\ufdd6\003\ufdd6\011\ufdd6\027\ufdd6\030\ufdd6\033\ufdd6" +
    "\056\ufdd6\060\ufdd6\061\ufdd6\062\ufdd6\065\ufdd6\066\ufdd6\074" +
    "\ufdd6\100\ufdd6\101\ufdd6\123\ufdd6\125\ufdd6\132\ufdd6\135\ufdd6" +
    "\136\ufdd6\001\002\000\030\003\u020d\005\050\006\052\007" +
    "\062\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a7\101\u01a6" +
    "\123\u01a5\001\002\000\030\034\u01ae\035\u01af\036\u01b1\037" +
    "\u01b0\040\u01ad\041\u021d\042\u021c\044\u0219\045\u0218\046\u021b" +
    "\047\u021a\001\002\000\012\003\u0215\013\u0214\050\u0210\052" +
    "\u0211\001\002\000\052\002\ufdd7\003\ufdd7\011\ufdd7\027\ufdd7" +
    "\030\ufdd7\033\ufdd7\056\ufdd7\060\ufdd7\061\ufdd7\062\ufdd7\065" +
    "\ufdd7\066\ufdd7\074\ufdd7\100\ufdd7\101\ufdd7\123\ufdd7\125\ufdd7" +
    "\132\ufdd7\135\ufdd7\136\ufdd7\001\002\000\026\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a7" +
    "\101\u01a6\123\u01a5\001\002\000\014\003\ufdb4\013\ufdb4\050" +
    "\ufdb4\052\ufdb4\067\ufdb4\001\002\000\026\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a7\101" +
    "\u01a6\123\u01a5\001\002\000\026\005\050\006\052\007\062" +
    "\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a7\101\u01a6\123" +
    "\u01a5\001\002\000\014\003\ufdb5\013\ufdb5\050\u0210\052\ufdb5" +
    "\067\ufdb5\001\002\000\014\003\ufdb6\013\ufdb6\050\ufdb6\052" +
    "\ufdb6\067\ufdb6\001\002\000\006\003\u0216\067\u0217\001\002" +
    "\000\052\002\ufdd8\003\ufdd8\011\ufdd8\027\ufdd8\030\ufdd8\033" +
    "\ufdd8\056\ufdd8\060\ufdd8\061\ufdd8\062\ufdd8\065\ufdd8\066\ufdd8" +
    "\074\ufdd8\100\ufdd8\101\ufdd8\123\ufdd8\125\ufdd8\132\ufdd8\135" +
    "\ufdd8\136\ufdd8\001\002\000\052\002\ufdd9\003\ufdd9\011\ufdd9" +
    "\027\ufdd9\030\ufdd9\033\ufdd9\056\ufdd9\060\ufdd9\061\ufdd9\062" +
    "\ufdd9\065\ufdd9\066\ufdd9\074\ufdd9\100\ufdd9\101\ufdd9\123\ufdd9" +
    "\125\ufdd9\132\ufdd9\135\ufdd9\136\ufdd9\001\002\000\052\002" +
    "\ufdda\003\ufdda\011\ufdda\027\ufdda\030\ufdda\033\ufdda\056\ufdda" +
    "\060\ufdda\061\ufdda\062\ufdda\065\ufdda\066\ufdda\074\ufdda\100" +
    "\ufdda\101\ufdda\123\ufdda\125\ufdda\132\ufdda\135\ufdda\136\ufdda" +
    "\001\002\000\024\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\024" +
    "\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046\100" +
    "\u01a7\101\u01a6\123\u01a5\001\002\000\024\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123" +
    "\u01a5\001\002\000\024\005\050\006\052\007\062\011\u01ab" +
    "\012\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000" +
    "\024\005\050\006\052\007\062\011\u01ab\012\u01a4\035\046" +
    "\100\u01a7\101\u01a6\123\u01a5\001\002\000\024\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6" +
    "\123\u01a5\001\002\000\026\003\ufdbc\013\ufdbc\034\u01ae\035" +
    "\u01af\036\u01b1\037\u01b0\040\u01ad\050\ufdbc\052\ufdbc\067\ufdbc" +
    "\001\002\000\026\003\ufdbb\013\ufdbb\034\u01ae\035\u01af\036" +
    "\u01b1\037\u01b0\040\u01ad\050\ufdbb\052\ufdbb\067\ufdbb\001\002" +
    "\000\026\003\ufdb8\013\ufdb8\034\u01ae\035\u01af\036\u01b1\037" +
    "\u01b0\040\u01ad\050\ufdb8\052\ufdb8\067\ufdb8\001\002\000\026" +
    "\003\ufdb7\013\ufdb7\034\u01ae\035\u01af\036\u01b1\037\u01b0\040" +
    "\u01ad\050\ufdb7\052\ufdb7\067\ufdb7\001\002\000\026\003\ufdba" +
    "\013\ufdba\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\050" +
    "\ufdba\052\ufdba\067\ufdba\001\002\000\026\003\ufdb9\013\ufdb9" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\050\ufdb9\052" +
    "\ufdb9\067\ufdb9\001\002\000\004\067\ufe2b\001\002\000\026" +
    "\003\u0227\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\016\034\u01ae" +
    "\035\u01af\036\u01b1\037\u01b0\040\u01ad\067\ufe2d\001\002\000" +
    "\004\067\ufe2c\001\002\000\004\057\u0239\001\002\000\030" +
    "\003\u022b\005\050\006\052\007\062\011\u01ab\012\u01a4\035" +
    "\046\051\u020e\100\u01a7\101\u01a6\123\u01a5\001\002\000\012" +
    "\003\u0230\013\u022f\050\u0210\052\u0211\001\002\000\004\057" +
    "\u022c\001\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\056\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7\074" +
    "\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6" +
    "\136\u01ea\001\002\000\004\056\u022e\001\002\000\052\002" +
    "\ufddc\003\ufddc\011\ufddc\027\ufddc\030\ufddc\033\ufddc\056\ufddc" +
    "\060\ufddc\061\ufddc\062\ufddc\065\ufddc\066\ufddc\074\ufddc\100" +
    "\ufddc\101\ufddc\123\ufddc\125\ufddc\132\ufddc\135\ufddc\136\ufddc" +
    "\001\002\000\006\003\u0234\057\u0235\001\002\000\004\057" +
    "\u0231\001\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\056\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7\074" +
    "\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6" +
    "\136\u01ea\001\002\000\004\056\u0233\001\002\000\052\002" +
    "\ufddd\003\ufddd\011\ufddd\027\ufddd\030\ufddd\033\ufddd\056\ufddd" +
    "\060\ufddd\061\ufddd\062\ufddd\065\ufddd\066\ufddd\074\ufddd\100" +
    "\ufddd\101\ufddd\123\ufddd\125\ufddd\132\ufddd\135\ufddd\136\ufddd" +
    "\001\002\000\052\002\ufdde\003\ufdde\011\ufdde\027\ufdde\030" +
    "\ufdde\033\ufdde\056\ufdde\060\ufdde\061\ufdde\062\ufdde\065\ufdde" +
    "\066\ufdde\074\ufdde\100\ufdde\101\ufdde\123\ufdde\125\ufdde\132" +
    "\ufdde\135\ufdde\136\ufdde\001\002\000\050\003\ufe3e\011\u01f2" +
    "\027\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035\061\024\062" +
    "\032\065\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8" +
    "\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\006\003" +
    "\u0237\056\u0238\001\002\000\052\002\ufddf\003\ufddf\011\ufddf" +
    "\027\ufddf\030\ufddf\033\ufddf\056\ufddf\060\ufddf\061\ufddf\062" +
    "\ufddf\065\ufddf\066\ufddf\074\ufddf\100\ufddf\101\ufddf\123\ufddf" +
    "\125\ufddf\132\ufddf\135\ufddf\136\ufddf\001\002\000\052\002" +
    "\ufde0\003\ufde0\011\ufde0\027\ufde0\030\ufde0\033\ufde0\056\ufde0" +
    "\060\ufde0\061\ufde0\062\ufde0\065\ufde0\066\ufde0\074\ufde0\100" +
    "\ufde0\101\ufde0\123\ufde0\125\ufde0\132\ufde0\135\ufde0\136\ufde0" +
    "\001\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056" +
    "\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201" +
    "\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136" +
    "\u01ea\001\002\000\004\056\u023b\001\002\000\052\002\ufddb" +
    "\003\ufddb\011\ufddb\027\ufddb\030\ufddb\033\ufddb\056\ufddb\060" +
    "\ufddb\061\ufddb\062\ufddb\065\ufddb\066\ufddb\074\ufddb\100\ufddb" +
    "\101\ufddb\123\ufddb\125\ufddb\132\ufddb\135\ufddb\136\ufddb\001" +
    "\002\000\052\002\ufe36\003\ufe36\011\ufe36\027\ufe36\030\ufe36" +
    "\033\ufe36\056\ufe36\060\ufe36\061\ufe36\062\ufe36\065\ufe36\066" +
    "\ufe36\074\ufe36\100\ufe36\101\ufe36\123\ufe36\125\ufe36\132\ufe36" +
    "\135\ufe36\136\ufe36\001\002\000\004\067\ufdfc\001\002\000" +
    "\006\003\u0240\013\u023f\001\002\000\004\067\ufdfe\001\002" +
    "\000\004\067\ufdfd\001\002\000\004\057\u0252\001\002\000" +
    "\026\003\u0244\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\020\003" +
    "\u0249\013\u0248\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad" +
    "\001\002\000\004\057\u0245\001\002\000\010\003\u0141\113" +
    "\u0143\137\u013f\001\002\000\012\003\u0141\056\u0247\113\u0143" +
    "\137\u013f\001\002\000\052\002\ufdcf\003\ufdcf\011\ufdcf\027" +
    "\ufdcf\030\ufdcf\033\ufdcf\056\ufdcf\060\ufdcf\061\ufdcf\062\ufdcf" +
    "\065\ufdcf\066\ufdcf\074\ufdcf\100\ufdcf\101\ufdcf\123\ufdcf\125" +
    "\ufdcf\132\ufdcf\135\ufdcf\136\ufdcf\001\002\000\004\057\u024d" +
    "\001\002\000\004\057\u024a\001\002\000\010\003\u0141\113" +
    "\u0143\137\u013f\001\002\000\012\003\u0141\056\u024c\113\u0143" +
    "\137\u013f\001\002\000\052\002\ufdd0\003\ufdd0\011\ufdd0\027" +
    "\ufdd0\030\ufdd0\033\ufdd0\056\ufdd0\060\ufdd0\061\ufdd0\062\ufdd0" +
    "\065\ufdd0\066\ufdd0\074\ufdd0\100\ufdd0\101\ufdd0\123\ufdd0\125" +
    "\ufdd0\132\ufdd0\135\ufdd0\136\ufdd0\001\002\000\010\003\u024f" +
    "\113\u0143\137\u013f\001\002\000\012\003\u0250\056\u0251\113" +
    "\u0143\137\u013f\001\002\000\054\002\ufdd1\003\ufdd1\011\ufdd1" +
    "\014\ufdc5\027\ufdd1\030\ufdd1\033\ufdd1\056\ufdd1\060\ufdd1\061" +
    "\ufdd1\062\ufdd1\065\ufdd1\066\ufdd1\074\ufdd1\100\ufdd1\101\ufdd1" +
    "\123\ufdd1\125\ufdd1\132\ufdd1\135\ufdd1\136\ufdd1\001\002\000" +
    "\054\002\ufdd2\003\ufdd2\011\ufdd2\014\ufdc5\027\ufdd2\030\ufdd2" +
    "\033\ufdd2\056\ufdd2\060\ufdd2\061\ufdd2\062\ufdd2\065\ufdd2\066" +
    "\ufdd2\074\ufdd2\100\ufdd2\101\ufdd2\123\ufdd2\125\ufdd2\132\ufdd2" +
    "\135\ufdd2\136\ufdd2\001\002\000\052\002\ufdd3\003\ufdd3\011" +
    "\ufdd3\027\ufdd3\030\ufdd3\033\ufdd3\056\ufdd3\060\ufdd3\061\ufdd3" +
    "\062\ufdd3\065\ufdd3\066\ufdd3\074\ufdd3\100\ufdd3\101\ufdd3\123" +
    "\ufdd3\125\ufdd3\132\ufdd3\135\ufdd3\136\ufdd3\001\002\000\010" +
    "\003\u0141\113\u0143\137\u013f\001\002\000\012\003\u0141\056" +
    "\u0254\113\u0143\137\u013f\001\002\000\052\002\ufdce\003\ufdce" +
    "\011\ufdce\027\ufdce\030\ufdce\033\ufdce\056\ufdce\060\ufdce\061" +
    "\ufdce\062\ufdce\065\ufdce\066\ufdce\074\ufdce\100\ufdce\101\ufdce" +
    "\123\ufdce\125\ufdce\132\ufdce\135\ufdce\136\ufdce\001\002\000" +
    "\004\067\ufe23\001\002\000\016\003\u025d\007\u0260\020\u0257" +
    "\102\u0259\103\u025a\104\u025f\001\002\000\022\003\ufe0d\007" +
    "\ufe0d\013\ufe0d\020\ufe0d\021\ufe0d\102\ufe0d\103\ufe0d\104\ufe0d" +
    "\001\002\000\022\003\ufe1f\007\ufe1f\013\ufe1f\020\ufe1f\021" +
    "\ufe1f\102\ufe1f\103\ufe1f\104\ufe1f\001\002\000\022\003\ufe0a" +
    "\007\ufe0a\013\ufe0a\020\ufe0a\021\ufe0a\102\ufe0a\103\ufe0a\104" +
    "\ufe0a\001\002\000\022\003\ufe0b\007\ufe0b\013\ufe0b\020\ufe0b" +
    "\021\ufe0b\102\ufe0b\103\ufe0b\104\ufe0b\001\002\000\022\003" +
    "\ufe0f\007\ufe0f\013\ufe0f\020\ufe0f\021\ufe0f\102\ufe0f\103\ufe0f" +
    "\104\ufe0f\001\002\000\022\003\u0263\007\u0260\013\u0264\020" +
    "\u0257\021\u0262\102\u0259\103\u025a\104\u025f\001\002\000\004" +
    "\067\ufe24\001\002\000\022\003\ufe0e\007\ufe0e\013\ufe0e\020" +
    "\ufe0e\021\ufe0e\102\ufe0e\103\ufe0e\104\ufe0e\001\002\000\022" +
    "\003\ufe09\007\ufe09\013\ufe09\020\ufe09\021\ufe09\102\ufe09\103" +
    "\ufe09\104\ufe09\001\002\000\022\003\ufe0c\007\ufe0c\013\ufe0c" +
    "\020\ufe0c\021\ufe0c\102\ufe0c\103\ufe0c\104\ufe0c\001\002\000" +
    "\022\003\ufe20\007\ufe20\013\ufe20\020\ufe20\021\ufe20\102\ufe20" +
    "\103\ufe20\104\ufe20\001\002\000\030\003\u0268\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\070\u0266\100\u01a7" +
    "\101\u01a6\123\u01a5\001\002\000\004\067\ufe25\001\002\000" +
    "\004\067\ufe27\001\002\000\022\003\ufe1d\013\ufe1d\021\ufe1d" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\001\002\000" +
    "\026\003\u0272\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\010\003" +
    "\u026b\013\u026a\021\u0269\001\002\000\004\067\ufe21\001\002" +
    "\000\030\003\u026e\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\035\046\070\u026d\100\u01a7\101\u01a6\123\u01a5\001\002" +
    "\000\004\067\ufe26\001\002\000\004\067\ufe22\001\002\000" +
    "\022\003\ufe1e\013\ufe1e\021\ufe1e\034\u01ae\035\u01af\036\u01b1" +
    "\037\u01b0\040\u01ad\001\002\000\026\003\u0270\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6" +
    "\123\u01a5\001\002\000\010\003\ufe18\013\ufe18\021\ufe18\001" +
    "\002\000\022\003\ufe1c\013\ufe1c\021\ufe1c\034\u01ae\035\u01af" +
    "\036\u01b1\037\u01b0\040\u01ad\001\002\000\010\003\ufe19\013" +
    "\ufe19\021\ufe19\001\002\000\022\003\ufe1b\013\ufe1b\021\ufe1b" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\001\002\000" +
    "\010\003\ufe1a\013\ufe1a\021\ufe1a\001\002\000\052\002\ufe3d" +
    "\003\ufe3d\011\ufe3d\027\ufe3d\030\ufe3d\033\ufe3d\056\ufe3d\060" +
    "\ufe3d\061\ufe3d\062\ufe3d\065\ufe3d\066\ufe3d\074\ufe3d\100\ufe3d" +
    "\101\ufe3d\123\ufe3d\125\ufe3d\132\ufe3d\135\ufe3d\136\ufe3d\001" +
    "\002\000\004\057\u02a2\001\002\000\030\003\u0277\005\050" +
    "\006\052\007\062\011\u01ab\012\u01a4\035\046\051\u020e\100" +
    "\u01a7\101\u01a6\123\u01a5\001\002\000\012\003\u027c\013\u027b" +
    "\050\u0210\052\u0211\001\002\000\004\057\u0278\001\002\000" +
    "\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035" +
    "\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a7\101" +
    "\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002" +
    "\000\004\056\u027a\001\002\000\052\002\ufdf6\003\ufdf6\011" +
    "\ufdf6\027\ufdf6\030\ufdf6\033\ufdf6\056\ufdf6\060\ufdf6\061\ufdf6" +
    "\062\ufdf6\065\ufdf6\066\ufdf6\074\ufdf6\100\ufdf6\101\ufdf6\123" +
    "\ufdf6\125\ufdf6\132\ufdf6\135\ufdf6\136\ufdf6\001\002\000\006" +
    "\003\u0280\057\u0281\001\002\000\004\057\u027d\001\002\000" +
    "\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035" +
    "\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a7\101" +
    "\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002" +
    "\000\004\056\u027f\001\002\000\052\002\ufdf7\003\ufdf7\011" +
    "\ufdf7\027\ufdf7\030\ufdf7\033\ufdf7\056\ufdf7\060\ufdf7\061\ufdf7" +
    "\062\ufdf7\065\ufdf7\066\ufdf7\074\ufdf7\100\ufdf7\101\ufdf7\123" +
    "\ufdf7\125\ufdf7\132\ufdf7\135\ufdf7\136\ufdf7\001\002\000\052" +
    "\002\ufdf8\003\ufdf8\011\ufdf8\027\ufdf8\030\ufdf8\033\ufdf8\056" +
    "\ufdf8\060\ufdf8\061\ufdf8\062\ufdf8\065\ufdf8\066\ufdf8\074\ufdf8" +
    "\100\ufdf8\101\ufdf8\123\ufdf8\125\ufdf8\132\ufdf8\135\ufdf8\136" +
    "\ufdf8\001\002\000\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb" +
    "\033\u01ec\056\ufe3e\060\035\061\024\062\032\065\u01f5\066" +
    "\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7" +
    "\135\u01f6\136\u01ea\001\002\000\006\003\u0283\056\u0284\001" +
    "\002\000\052\002\ufdf9\003\ufdf9\011\ufdf9\027\ufdf9\030\ufdf9" +
    "\033\ufdf9\056\ufdf9\060\ufdf9\061\ufdf9\062\ufdf9\065\ufdf9\066" +
    "\ufdf9\074\ufdf9\100\ufdf9\101\ufdf9\123\ufdf9\125\ufdf9\132\ufdf9" +
    "\135\ufdf9\136\ufdf9\001\002\000\054\002\ufdf2\003\ufdf2\011" +
    "\ufdf2\026\u0286\027\ufdf2\030\ufdf2\033\ufdf2\056\ufdf2\060\ufdf2" +
    "\061\ufdf2\062\ufdf2\065\ufdf2\066\ufdf2\074\ufdf2\100\ufdf2\101" +
    "\ufdf2\123\ufdf2\125\ufdf2\132\ufdf2\135\ufdf2\136\ufdf2\001\002" +
    "\000\052\002\ufdfa\003\ufdfa\011\ufdfa\027\ufdfa\030\ufdfa\033" +
    "\ufdfa\056\ufdfa\060\ufdfa\061\ufdfa\062\ufdfa\065\ufdfa\066\ufdfa" +
    "\074\ufdfa\100\ufdfa\101\ufdfa\123\ufdfa\125\ufdfa\132\ufdfa\135" +
    "\ufdfa\136\ufdfa\001\002\000\010\003\u0287\027\u0288\057\u0289" +
    "\001\002\000\052\002\ufdeb\003\ufdeb\011\ufdeb\027\ufdeb\030" +
    "\ufdeb\033\ufdeb\056\ufdeb\060\ufdeb\061\ufdeb\062\ufdeb\065\ufdeb" +
    "\066\ufdeb\074\ufdeb\100\ufdeb\101\ufdeb\123\ufdeb\125\ufdeb\132" +
    "\ufdeb\135\ufdeb\136\ufdeb\001\002\000\006\003\u028d\012\u028e" +
    "\001\002\000\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb\033" +
    "\u01ec\056\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7" +
    "\074\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135" +
    "\u01f6\136\u01ea\001\002\000\006\003\u028b\056\u028c\001\002" +
    "\000\052\002\ufdec\003\ufdec\011\ufdec\027\ufdec\030\ufdec\033" +
    "\ufdec\056\ufdec\060\ufdec\061\ufdec\062\ufdec\065\ufdec\066\ufdec" +
    "\074\ufdec\100\ufdec\101\ufdec\123\ufdec\125\ufdec\132\ufdec\135" +
    "\ufdec\136\ufdec\001\002\000\052\002\ufdf3\003\ufdf3\011\ufdf3" +
    "\027\ufdf3\030\ufdf3\033\ufdf3\056\ufdf3\060\ufdf3\061\ufdf3\062" +
    "\ufdf3\065\ufdf3\066\ufdf3\074\ufdf3\100\ufdf3\101\ufdf3\123\ufdf3" +
    "\125\ufdf3\132\ufdf3\135\ufdf3\136\ufdf3\001\002\000\004\057" +
    "\u029f\001\002\000\030\003\u0290\005\050\006\052\007\062" +
    "\011\u01ab\012\u01a4\035\046\051\u020e\100\u01a7\101\u01a6\123" +
    "\u01a5\001\002\000\012\003\u0295\013\u0294\050\u0210\052\u0211" +
    "\001\002\000\004\057\u0291\001\002\000\046\011\u01f2\027" +
    "\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035\061\024\062\032" +
    "\065\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8\125" +
    "\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u0293" +
    "\001\002\000\052\002\ufdee\003\ufdee\011\ufdee\027\ufdee\030" +
    "\ufdee\033\ufdee\056\ufdee\060\ufdee\061\ufdee\062\ufdee\065\ufdee" +
    "\066\ufdee\074\ufdee\100\ufdee\101\ufdee\123\ufdee\125\ufdee\132" +
    "\ufdee\135\ufdee\136\ufdee\001\002\000\006\003\u0299\057\u029a" +
    "\001\002\000\004\057\u0296\001\002\000\046\011\u01f2\027" +
    "\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035\061\024\062\032" +
    "\065\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8\125" +
    "\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u0298" +
    "\001\002\000\052\002\ufdef\003\ufdef\011\ufdef\027\ufdef\030" +
    "\ufdef\033\ufdef\056\ufdef\060\ufdef\061\ufdef\062\ufdef\065\ufdef" +
    "\066\ufdef\074\ufdef\100\ufdef\101\ufdef\123\ufdef\125\ufdef\132" +
    "\ufdef\135\ufdef\136\ufdef\001\002\000\052\002\ufdf0\003\ufdf0" +
    "\011\ufdf0\027\ufdf0\030\ufdf0\033\ufdf0\056\ufdf0\060\ufdf0\061" +
    "\ufdf0\062\ufdf0\065\ufdf0\066\ufdf0\074\ufdf0\100\ufdf0\101\ufdf0" +
    "\123\ufdf0\125\ufdf0\132\ufdf0\135\ufdf0\136\ufdf0\001\002\000" +
    "\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\006\003\u029c\056\u029d\001\002\000\052\002" +
    "\ufdf1\003\ufdf1\011\ufdf1\027\ufdf1\030\ufdf1\033\ufdf1\056\ufdf1" +
    "\060\ufdf1\061\ufdf1\062\ufdf1\065\ufdf1\066\ufdf1\074\ufdf1\100" +
    "\ufdf1\101\ufdf1\123\ufdf1\125\ufdf1\132\ufdf1\135\ufdf1\136\ufdf1" +
    "\001\002\000\054\002\ufdf2\003\ufdf2\011\ufdf2\026\u0286\027" +
    "\ufdf2\030\ufdf2\033\ufdf2\056\ufdf2\060\ufdf2\061\ufdf2\062\ufdf2" +
    "\065\ufdf2\066\ufdf2\074\ufdf2\100\ufdf2\101\ufdf2\123\ufdf2\125" +
    "\ufdf2\132\ufdf2\135\ufdf2\136\ufdf2\001\002\000\052\002\ufdf4" +
    "\003\ufdf4\011\ufdf4\027\ufdf4\030\ufdf4\033\ufdf4\056\ufdf4\060" +
    "\ufdf4\061\ufdf4\062\ufdf4\065\ufdf4\066\ufdf4\074\ufdf4\100\ufdf4" +
    "\101\ufdf4\123\ufdf4\125\ufdf4\132\ufdf4\135\ufdf4\136\ufdf4\001" +
    "\002\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\004\056\u02a1\001\002\000\052\002\ufded\003" +
    "\ufded\011\ufded\027\ufded\030\ufded\033\ufded\056\ufded\060\ufded" +
    "\061\ufded\062\ufded\065\ufded\066\ufded\074\ufded\100\ufded\101" +
    "\ufded\123\ufded\125\ufded\132\ufded\135\ufded\136\ufded\001\002" +
    "\000\046\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e\060" +
    "\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100\u01a7" +
    "\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea\001" +
    "\002\000\004\056\u02a4\001\002\000\052\002\ufdf5\003\ufdf5" +
    "\011\ufdf5\027\ufdf5\030\ufdf5\033\ufdf5\056\ufdf5\060\ufdf5\061" +
    "\ufdf5\062\ufdf5\065\ufdf5\066\ufdf5\074\ufdf5\100\ufdf5\101\ufdf5" +
    "\123\ufdf5\125\ufdf5\132\ufdf5\135\ufdf5\136\ufdf5\001\002\000" +
    "\010\060\035\061\024\062\032\001\002\000\004\011\u02a7" +
    "\001\002\000\024\005\050\006\052\007\062\011\u01ab\012" +
    "\u01a4\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\016" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\067\u02a9\001" +
    "\002\000\026\005\050\006\052\007\062\011\u01ab\012\u01a4" +
    "\035\046\051\u020e\100\u01a7\101\u01a6\123\u01a5\001\002\000" +
    "\010\050\u0210\052\u0211\067\u02ab\001\002\000\004\011\u02ac" +
    "\001\002\000\012\003\u02ae\043\u02af\076\u02ad\077\u02b0\001" +
    "\002\000\006\003\ufde3\013\ufde3\001\002\000\010\003\ufde1" +
    "\013\ufde1\057\u02be\001\002\000\026\003\u02bd\005\050\006" +
    "\052\007\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6" +
    "\123\u01a5\001\002\000\006\003\ufde2\013\ufde2\001\002\000" +
    "\006\003\u02b3\013\u02b2\001\002\000\006\003\u02b7\057\u02b8" +
    "\001\002\000\004\057\u02b4\001\002\000\046\011\u01f2\027" +
    "\u01f0\030\u01fb\033\u01ec\056\ufe3e\060\035\061\024\062\032" +
    "\065\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8\125" +
    "\u01f4\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u02b6" +
    "\001\002\000\052\002\ufde7\003\ufde7\011\ufde7\027\ufde7\030" +
    "\ufde7\033\ufde7\056\ufde7\060\ufde7\061\ufde7\062\ufde7\065\ufde7" +
    "\066\ufde7\074\ufde7\100\ufde7\101\ufde7\123\ufde7\125\ufde7\132" +
    "\ufde7\135\ufde7\136\ufde7\001\002\000\052\002\ufde8\003\ufde8" +
    "\011\ufde8\027\ufde8\030\ufde8\033\ufde8\056\ufde8\060\ufde8\061" +
    "\ufde8\062\ufde8\065\ufde8\066\ufde8\074\ufde8\100\ufde8\101\ufde8" +
    "\123\ufde8\125\ufde8\132\ufde8\135\ufde8\136\ufde8\001\002\000" +
    "\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec\056\ufe3e" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\006\003\u02ba\056\u02bb\001\002\000\052\002" +
    "\ufde9\003\ufde9\011\ufde9\027\ufde9\030\ufde9\033\ufde9\056\ufde9" +
    "\060\ufde9\061\ufde9\062\ufde9\065\ufde9\066\ufde9\074\ufde9\100" +
    "\ufde9\101\ufde9\123\ufde9\125\ufde9\132\ufde9\135\ufde9\136\ufde9" +
    "\001\002\000\052\002\ufdea\003\ufdea\011\ufdea\027\ufdea\030" +
    "\ufdea\033\ufdea\056\ufdea\060\ufdea\061\ufdea\062\ufdea\065\ufdea" +
    "\066\ufdea\074\ufdea\100\ufdea\101\ufdea\123\ufdea\125\ufdea\132" +
    "\ufdea\135\ufdea\136\ufdea\001\002\000\020\003\ufde5\013\ufde5" +
    "\034\u01ae\035\u01af\036\u01b1\037\u01b0\040\u01ad\001\002\000" +
    "\006\003\ufde4\013\ufde4\001\002\000\046\011\u01f2\027\u01f0" +
    "\030\u01fb\033\u01ec\056\ufe3e\060\035\061\024\062\032\065" +
    "\u01f5\066\u01e7\074\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4" +
    "\132\u01f7\135\u01f6\136\u01ea\001\002\000\004\056\u02c0\001" +
    "\002\000\052\002\ufde6\003\ufde6\011\ufde6\027\ufde6\030\ufde6" +
    "\033\ufde6\056\ufde6\060\ufde6\061\ufde6\062\ufde6\065\ufde6\066" +
    "\ufde6\074\ufde6\100\ufde6\101\ufde6\123\ufde6\125\ufde6\132\ufde6" +
    "\135\ufde6\136\ufde6\001\002\000\004\067\ufdff\001\002\000" +
    "\006\003\u02c4\013\u02c3\001\002\000\004\067\ufe01\001\002" +
    "\000\004\067\ufe00\001\002\000\006\003\u02c8\011\u02c7\001" +
    "\002\000\006\003\ufe58\067\ufe58\001\002\000\012\003\ufe28" +
    "\011\u02c9\043\ufe28\072\u01c7\001\002\000\006\003\ufe59\067" +
    "\ufe59\001\002\000\012\003\ufe48\012\u02d0\021\ufe48\067\ufe48" +
    "\001\002\000\010\003\ufe5c\021\u02cb\067\ufe5c\001\002\000" +
    "\006\003\u02cd\011\u02cc\001\002\000\012\003\ufe48\012\u02d0" +
    "\021\ufe48\067\ufe48\001\002\000\010\003\ufe4a\021\ufe4a\067" +
    "\ufe4a\001\002\000\010\003\ufe49\021\ufe49\067\ufe49\001\002" +
    "\000\010\003\ufe4c\021\ufe4c\067\ufe4c\001\002\000\030\003" +
    "\ufdaf\005\050\006\052\007\062\011\u01ab\012\u01a4\013\ufdaf" +
    "\035\046\100\u01a7\101\u01a6\123\u01a5\001\002\000\006\003" +
    "\u02d3\013\u02d2\001\002\000\010\003\ufe47\021\ufe47\067\ufe47" +
    "\001\002\000\010\003\ufe46\021\ufe46\067\ufe46\001\002\000" +
    "\010\003\ufe4b\021\ufe4b\067\ufe4b\001\002\000\004\067\ufe02" +
    "\001\002\000\016\003\u02d9\007\u0260\020\u0257\102\u0259\103" +
    "\u025a\104\u025f\001\002\000\006\003\u02e2\021\u02e1\001\002" +
    "\000\012\003\u02dd\102\u0259\103\u025a\104\u025f\001\002\000" +
    "\014\003\ufe10\007\u0260\020\u0257\021\ufe10\067\ufe03\001\002" +
    "\000\012\003\ufe14\007\u0260\020\u0257\021\ufe14\001\002\000" +
    "\006\003\ufe16\021\ufe16\001\002\000\006\003\ufe12\021\ufe12" +
    "\001\002\000\012\003\ufe13\007\u0260\020\u0257\021\ufe13\001" +
    "\002\000\012\003\ufe17\007\u0260\020\u0257\021\ufe17\001\002" +
    "\000\006\003\ufe15\021\ufe15\001\002\000\006\003\ufe11\021" +
    "\ufe11\001\002\000\006\003\u02e3\070\u02e4\001\002\000\004" +
    "\067\ufe04\001\002\000\004\067\ufe05\001\002\000\010\003" +
    "\u02e6\011\u01f2\123\u02e7\001\002\000\006\003\u02eb\013\u02ea" +
    "\001\002\000\004\067\ufe06\001\002\000\004\072\u02e8\001" +
    "\002\000\004\011\u02e9\001\002\000\006\003\ufe28\013\ufe28" +
    "\001\002\000\004\067\ufe08\001\002\000\004\067\ufe07\001" +
    "\002\000\046\002\ufe3e\011\u01f2\027\u01f0\030\u01fb\033\u01ec" +
    "\060\035\061\024\062\032\065\u01f5\066\u01e7\074\u0201\100" +
    "\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135\u01f6\136\u01ea" +
    "\001\002\000\050\003\ufe3e\011\u01f2\027\u01f0\030\u01fb\033" +
    "\u01ec\056\ufe3e\060\035\061\024\062\032\065\u01f5\066\u01e7" +
    "\074\u0201\100\u01a7\101\u01a6\123\u01e8\125\u01f4\132\u01f7\135" +
    "\u01f6\136\u01ea\001\002\000\006\003\u02ef\056\u02f0\001\002" +
    "\000\004\002\ufe44\001\002\000\004\002\ufe45\001\002\000" +
    "\004\002\ufe43\001\002\000\004\002\ufe41\001\002\000\004" +
    "\002\ufe40\001\002\000\014\060\ufe61\061\ufe61\062\ufe61\120" +
    "\ufe61\123\ufe61\001\002\000\006\003\u02c8\011\u02f6\001\002" +
    "\000\004\011\u02c9\001\002\000\016\060\ufe64\061\ufe64\062" +
    "\ufe64\120\ufe64\123\ufe64\131\ufe64\001\002\000\006\003\u02fa" +
    "\011\u02f9\001\002\000\006\003\u02fb\043\u02fc\001\002\000" +
    "\016\060\ufe65\061\ufe65\062\ufe65\120\ufe65\123\ufe65\131\ufe65" +
    "\001\002\000\016\060\ufe66\061\ufe66\062\ufe66\120\ufe66\123" +
    "\ufe66\131\ufe66\001\002\000\026\003\u02fe\005\050\006\052" +
    "\007\062\011\u01ab\012\u01a4\035\046\100\u01a7\101\u01a6\123" +
    "\u01a5\001\002\000\020\003\u02ff\034\u01ae\035\u01af\036\u01b1" +
    "\037\u01b0\040\u01ad\067\u0300\001\002\000\016\060\ufe67\061" +
    "\ufe67\062\ufe67\120\ufe67\123\ufe67\131\ufe67\001\002\000\016" +
    "\060\ufe68\061\ufe68\062\ufe68\120\ufe68\123\ufe68\131\ufe68\001" +
    "\002\000\016\060\ufe69\061\ufe69\062\ufe69\120\ufe69\123\ufe69" +
    "\131\ufe69\001\002\000\020\060\ufe79\061\ufe79\062\ufe79\071" +
    "\ufe79\120\ufe79\123\ufe79\131\ufe79\001\002\000\014\003\u0303" +
    "\044\u0306\100\u0304\101\u0305\123\u0307\001\002\000\020\060" +
    "\ufe7a\061\ufe7a\062\ufe7a\071\ufe7a\120\ufe7a\123\ufe7a\131\ufe7a" +
    "\001\002\000\020\060\ufe76\061\ufe76\062\ufe76\071\ufe76\120" +
    "\ufe76\123\ufe76\131\ufe76\001\002\000\020\060\ufe75\061\ufe75" +
    "\062\ufe75\071\ufe75\120\ufe75\123\ufe75\131\ufe75\001\002\000" +
    "\006\003\u0310\011\u030f\001\002\000\006\003\u030a\072\u0309" +
    "\001\002\000\020\060\ufe7b\061\ufe7b\062\ufe7b\071\ufe7b\120" +
    "\ufe7b\123\ufe7b\131\ufe7b\001\002\000\006\007\u030c\020\u030d" +
    "\001\002\000\020\060\ufe77\061\ufe77\062\ufe77\071\ufe77\120" +
    "\ufe77\123\ufe77\131\ufe77\001\002\000\020\060\ufe78\061\ufe78" +
    "\062\ufe78\071\ufe78\120\ufe78\123\ufe78\131\ufe78\001\002\000" +
    "\020\060\ufe6e\061\ufe6e\062\ufe6e\071\ufe6e\120\ufe6e\123\ufe6e" +
    "\131\ufe6e\001\002\000\020\060\ufe6f\061\ufe6f\062\ufe6f\071" +
    "\ufe6f\120\ufe6f\123\ufe6f\131\ufe6f\001\002\000\010\003\u0312" +
    "\046\u0313\072\u0311\001\002\000\010\003\ufe70\046\ufe70\072" +
    "\ufe70\001\002\000\020\060\ufe72\061\ufe72\062\ufe72\071\ufe72" +
    "\120\ufe72\123\ufe72\131\ufe72\001\002\000\004\011\u0314\001" +
    "\002\000\020\060\ufe73\061\ufe73\062\ufe73\071\ufe73\120\ufe73" +
    "\123\ufe73\131\ufe73\001\002\000\020\060\ufe74\061\ufe74\062" +
    "\ufe74\071\ufe74\120\ufe74\123\ufe74\131\ufe74\001\002\000\010" +
    "\003\ufe71\046\ufe71\072\ufe71\001\002\000\020\060\ufe7d\061" +
    "\ufe7d\062\ufe7d\071\ufe7d\120\ufe7d\123\ufe7d\131\ufe7d\001\002" +
    "\000\006\010\u0318\143\ufee5\001\002\000\006\010\ufee3\143" +
    "\ufee3\001\002\000\006\003\u031d\011\u031c\001\002\000\004" +
    "\143\ufee7\001\002\000\006\010\u0318\143\ufee6\001\002\000" +
    "\006\010\ufee4\143\ufee4\001\002\000\006\003\u031e\012\u031f" +
    "\001\002\000\006\010\ufee1\143\ufee1\001\002\000\006\010" +
    "\ufee0\143\ufee0\001\002\000\010\003\ufedb\011\u0320\013\ufedb" +
    "\001\002\000\012\003\ufed8\013\ufed8\021\ufed8\073\ufed8\001" +
    "\002\000\010\003\ufedc\013\ufedc\021\u03ba\001\002\000\006" +
    "\003\u0324\013\u0323\001\002\000\006\003\u0325\014\u0326\001" +
    "\002\000\006\010\ufedf\143\ufedf\001\002\000\006\010\ufede" +
    "\143\ufede\001\002\000\020\003\u032e\004\u0331\011\u032d\023" +
    "\053\024\043\025\057\130\u0330\001\002\000\014\004\ufecd" +
    "\010\ufecd\022\ufecd\026\ufecd\143\ufecd\001\002\000\014\004" +
    "\ufece\010\ufece\022\ufece\026\ufece\143\ufece\001\002\000\014" +
    "\004\ufecc\010\ufecc\022\ufecc\026\ufecc\143\ufecc\001\002\000" +
    "\014\004\ufecb\010\ufecb\022\ufecb\026\ufecb\143\ufecb\001\002" +
    "\000\006\010\ufee2\143\ufee2\001\002\000\014\004\ufecf\010" +
    "\ufecf\022\ufecf\026\ufecf\143\ufecf\001\002\000\012\003\ufed8" +
    "\012\u0367\021\ufed8\043\u03c5\001\002\000\006\010\ufedd\143" +
    "\ufedd\001\002\000\010\003\u03bb\021\u03ba\043\u03bc\001\002" +
    "\000\006\003\u03af\012\u03b0\001\002\000\004\015\u0332\001" +
    "\002\000\024\003\u033a\011\u032d\023\053\024\043\025\057" +
    "\027\u0336\030\u0333\033\u033b\130\u0330\001\002\000\022\003" +
    "\u03ac\005\050\006\052\007\062\011\u034e\012\u0374\035\046" +
    "\051\u0379\001\002\000\004\004\u03aa\001\002\000\004\004" +
    "\u03a9\001\002\000\022\003\u0377\005\050\006\052\007\062" +
    "\011\u034e\012\u0374\035\046\051\u0379\001\002\000\026\003" +
    "\u033a\011\u032d\016\u0372\023\053\024\043\025\057\027\u0336" +
    "\030\u0333\033\u033b\130\u0330\001\002\000\004\004\u0371\001" +
    "\002\000\026\003\ufed6\011\ufed6\016\ufed6\023\ufed6\024\ufed6" +
    "\025\ufed6\027\ufed6\030\ufed6\033\ufed6\130\ufed6\001\002\000" +
    "\026\003\ufed1\011\ufed1\016\ufed1\023\ufed1\024\ufed1\025\ufed1" +
    "\027\ufed1\030\ufed1\033\ufed1\130\ufed1\001\002\000\006\003" +
    "\u033f\011\u033e\001\002\000\004\004\u033d\001\002\000\026" +
    "\003\ufed4\011\ufed4\016\ufed4\023\ufed4\024\ufed4\025\ufed4\027" +
    "\ufed4\030\ufed4\033\ufed4\130\ufed4\001\002\000\006\003\u0341" +
    "\032\u0340\001\002\000\004\004\ufeaa\001\002\000\006\003" +
    "\u0344\031\u0342\001\002\000\004\004\ufeab\001\002\000\006" +
    "\003\u0349\012\u034a\001\002\000\006\003\u0345\014\u0346\001" +
    "\002\000\004\004\ufeac\001\002\000\004\004\ufead\001\002" +
    "\000\020\003\u0348\004\u0331\011\u032d\023\053\024\043\025" +
    "\057\130\u0330\001\002\000\004\004\ufeaf\001\002\000\004" +
    "\004\ufeae\001\002\000\006\003\ufea0\014\ufea0\001\002\000" +
    "\020\003\u034f\005\050\006\052\007\062\011\u034e\012\u034b" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u034e\012\u034b\035\046\001\002\000\070\003\ufe93\004\ufe93" +
    "\010\ufe93\011\ufe93\013\ufe93\014\ufe93\021\ufe93\022\ufe93\023" +
    "\ufe93\024\ufe93\025\ufe93\026\ufe93\034\ufe93\035\ufe93\036\ufe93" +
    "\037\ufe93\040\ufe93\041\ufe93\042\ufe93\044\ufe93\045\ufe93\046" +
    "\ufe93\047\ufe93\050\ufe93\052\ufe93\130\ufe93\143\ufe93\001\002" +
    "\000\070\003\ufe94\004\ufe94\010\ufe94\011\ufe94\013\ufe94\014" +
    "\ufe94\021\ufe94\022\ufe94\023\ufe94\024\ufe94\025\ufe94\026\ufe94" +
    "\034\ufe94\035\ufe94\036\ufe94\037\ufe94\040\ufe94\041\ufe94\042" +
    "\ufe94\044\ufe94\045\ufe94\046\ufe94\047\ufe94\050\ufe94\052\ufe94" +
    "\130\ufe94\143\ufe94\001\002\000\072\003\ufd9d\004\ufd9d\010" +
    "\ufd9d\011\ufd9d\012\u0367\013\ufd9d\014\ufd9d\021\ufd9d\022\ufd9d" +
    "\023\ufd9d\024\ufd9d\025\ufd9d\026\ufd9d\034\ufd9d\035\ufd9d\036" +
    "\ufd9d\037\ufd9d\040\ufd9d\041\ufd9d\042\ufd9d\044\ufd9d\045\ufd9d" +
    "\046\ufd9d\047\ufd9d\050\ufd9d\052\ufd9d\130\ufd9d\143\ufd9d\001" +
    "\002\000\006\003\ufea1\014\ufea1\001\002\000\022\003\u0355" +
    "\013\u0353\021\u0351\034\u0354\035\u0356\036\u0358\037\u0357\040" +
    "\u0352\001\002\000\020\003\u035e\005\050\006\052\007\062" +
    "\011\u034e\012\u034b\035\046\001\002\000\016\005\050\006" +
    "\052\007\062\011\u034e\012\u034b\035\046\001\002\000\006" +
    "\003\ufea9\014\ufea9\001\002\000\016\005\050\006\052\007" +
    "\062\011\u034e\012\u034b\035\046\001\002\000\006\003\ufea2" +
    "\014\ufea2\001\002\000\016\005\050\006\052\007\062\011" +
    "\u034e\012\u034b\035\046\001\002\000\016\005\050\006\052" +
    "\007\062\011\u034e\012\u034b\035\046\001\002\000\016\005" +
    "\050\006\052\007\062\011\u034e\012\u034b\035\046\001\002" +
    "\000\070\003\ufe97\004\ufe97\010\ufe97\011\ufe97\013\ufe97\014" +
    "\ufe97\021\ufe97\022\ufe97\023\ufe97\024\ufe97\025\ufe97\026\ufe97" +
    "\034\ufe97\035\ufe97\036\ufe97\037\ufe97\040\ufe97\041\ufe97\042" +
    "\ufe97\044\ufe97\045\ufe97\046\ufe97\047\ufe97\050\ufe97\052\ufe97" +
    "\130\ufe97\143\ufe97\001\002\000\070\003\ufe98\004\ufe98\010" +
    "\ufe98\011\ufe98\013\ufe98\014\ufe98\021\ufe98\022\ufe98\023\ufe98" +
    "\024\ufe98\025\ufe98\026\ufe98\034\ufe98\035\ufe98\036\ufe98\037" +
    "\ufe98\040\ufe98\041\ufe98\042\ufe98\044\ufe98\045\ufe98\046\ufe98" +
    "\047\ufe98\050\ufe98\052\ufe98\130\ufe98\143\ufe98\001\002\000" +
    "\070\003\ufe99\004\ufe99\010\ufe99\011\ufe99\013\ufe99\014\ufe99" +
    "\021\ufe99\022\ufe99\023\ufe99\024\ufe99\025\ufe99\026\ufe99\034" +
    "\ufe99\035\ufe99\036\u0358\037\u0357\040\u0352\041\ufe99\042\ufe99" +
    "\044\ufe99\045\ufe99\046\ufe99\047\ufe99\050\ufe99\052\ufe99\130" +
    "\ufe99\143\ufe99\001\002\000\070\003\ufe9a\004\ufe9a\010\ufe9a" +
    "\011\ufe9a\013\ufe9a\014\ufe9a\021\ufe9a\022\ufe9a\023\ufe9a\024" +
    "\ufe9a\025\ufe9a\026\ufe9a\034\ufe9a\035\ufe9a\036\u0358\037\u0357" +
    "\040\u0352\041\ufe9a\042\ufe9a\044\ufe9a\045\ufe9a\046\ufe9a\047" +
    "\ufe9a\050\ufe9a\052\ufe9a\130\ufe9a\143\ufe9a\001\002\000\070" +
    "\003\ufe96\004\ufe96\010\ufe96\011\ufe96\013\ufe96\014\ufe96\021" +
    "\ufe96\022\ufe96\023\ufe96\024\ufe96\025\ufe96\026\ufe96\034\ufe96" +
    "\035\ufe96\036\ufe96\037\ufe96\040\ufe96\041\ufe96\042\ufe96\044" +
    "\ufe96\045\ufe96\046\ufe96\047\ufe96\050\ufe96\052\ufe96\130\ufe96" +
    "\143\ufe96\001\002\000\006\003\ufea3\014\ufea3\001\002\000" +
    "\022\003\u0362\013\u0361\021\u0360\034\u0354\035\u0356\036\u0358" +
    "\037\u0357\040\u0352\001\002\000\020\003\u0363\005\050\006" +
    "\052\007\062\011\u034e\012\u034b\035\046\001\002\000\006" +
    "\003\ufea8\014\ufea8\001\002\000\006\003\ufea4\014\ufea4\001" +
    "\002\000\006\003\ufea5\014\ufea5\001\002\000\020\003\u0366" +
    "\013\u0365\034\u0354\035\u0356\036\u0358\037\u0357\040\u0352\001" +
    "\002\000\006\003\ufea7\014\ufea7\001\002\000\006\003\ufea6" +
    "\014\ufea6\001\002\000\020\005\050\006\052\007\062\011" +
    "\u034e\012\u034b\013\u036a\035\046\001\002\000\010\003\u036d" +
    "\013\u036c\021\u036b\001\002\000\022\003\ufe8a\013\ufe8a\021" +
    "\ufe8a\034\u0354\035\u0356\036\u0358\037\u0357\040\u0352\001\002" +
    "\000\070\003\ufe90\004\ufe90\010\ufe90\011\ufe90\013\ufe90\014" +
    "\ufe90\021\ufe90\022\ufe90\023\ufe90\024\ufe90\025\ufe90\026\ufe90" +
    "\034\ufe90\035\ufe90\036\ufe90\037\ufe90\040\ufe90\041\ufe90\042" +
    "\ufe90\044\ufe90\045\ufe90\046\ufe90\047\ufe90\050\ufe90\052\ufe90" +
    "\130\ufe90\143\ufe90\001\002\000\016\005\050\006\052\007" +
    "\062\011\u034e\012\u034b\035\046\001\002\000\070\003\ufe92" +
    "\004\ufe92\010\ufe92\011\ufe92\013\ufe92\014\ufe92\021\ufe92\022" +
    "\ufe92\023\ufe92\024\ufe92\025\ufe92\026\ufe92\034\ufe92\035\ufe92" +
    "\036\ufe92\037\ufe92\040\ufe92\041\ufe92\042\ufe92\044\ufe92\045" +
    "\ufe92\046\ufe92\047\ufe92\050\ufe92\052\ufe92\130\ufe92\143\ufe92" +
    "\001\002\000\070\003\ufe91\004\ufe91\010\ufe91\011\ufe91\013" +
    "\ufe91\014\ufe91\021\ufe91\022\ufe91\023\ufe91\024\ufe91\025\ufe91" +
    "\026\ufe91\034\ufe91\035\ufe91\036\ufe91\037\ufe91\040\ufe91\041" +
    "\ufe91\042\ufe91\044\ufe91\045\ufe91\046\ufe91\047\ufe91\050\ufe91" +
    "\052\ufe91\130\ufe91\143\ufe91\001\002\000\022\003\ufe8b\013" +
    "\ufe8b\021\ufe8b\034\u0354\035\u0356\036\u0358\037\u0357\040\u0352" +
    "\001\002\000\016\013\u0370\034\u0354\035\u0356\036\u0358\037" +
    "\u0357\040\u0352\001\002\000\070\003\ufe95\004\ufe95\010\ufe95" +
    "\011\ufe95\013\ufe95\014\ufe95\021\ufe95\022\ufe95\023\ufe95\024" +
    "\ufe95\025\ufe95\026\ufe95\034\ufe95\035\ufe95\036\ufe95\037\ufe95" +
    "\040\ufe95\041\ufe95\042\ufe95\044\ufe95\045\ufe95\046\ufe95\047" +
    "\ufe95\050\ufe95\052\ufe95\130\ufe95\143\ufe95\001\002\000\026" +
    "\003\ufed5\011\ufed5\016\ufed5\023\ufed5\024\ufed5\025\ufed5\027" +
    "\ufed5\030\ufed5\033\ufed5\130\ufed5\001\002\000\014\004\ufed0" +
    "\010\ufed0\022\ufed0\026\ufed0\143\ufed0\001\002\000\026\003" +
    "\ufed7\011\ufed7\016\ufed7\023\ufed7\024\ufed7\025\ufed7\027\ufed7" +
    "\030\ufed7\033\ufed7\130\ufed7\001\002\000\022\003\u03a5\005" +
    "\050\006\052\007\062\011\u034e\012\u034b\035\046\051\u0379" +
    "\001\002\000\026\003\ufe9c\004\ufe9c\011\ufe9c\014\ufe9c\023" +
    "\ufe9c\024\ufe9c\025\ufe9c\050\u037b\052\u037c\130\ufe9c\001\002" +
    "\000\006\003\u039d\014\u039e\001\002\000\014\003\ufe9b\004" +
    "\ufeb5\014\ufe9b\022\u038c\026\u038d\001\002\000\030\034\u0354" +
    "\035\u0356\036\u0358\037\u0357\040\u0352\041\u0384\042\u0383\044" +
    "\u0380\045\u037f\046\u0382\047\u0381\001\002\000\020\005\050" +
    "\006\052\007\062\011\u034e\012\u034b\035\046\051\u0379\001" +
    "\002\000\030\003\ufe81\004\ufe81\011\ufe81\013\ufe81\014\ufe81" +
    "\023\ufe81\024\ufe81\025\ufe81\050\ufe81\052\ufe81\130\ufe81\001" +
    "\002\000\020\005\050\006\052\007\062\011\u034e\012\u034b" +
    "\035\046\051\u0379\001\002\000\020\005\050\006\052\007" +
    "\062\011\u034e\012\u034b\035\046\051\u0379\001\002\000\030" +
    "\003\ufe82\004\ufe82\011\ufe82\013\ufe82\014\ufe82\023\ufe82\024" +
    "\ufe82\025\ufe82\050\u037b\052\ufe82\130\ufe82\001\002\000\030" +
    "\003\ufe83\004\ufe83\011\ufe83\013\ufe83\014\ufe83\023\ufe83\024" +
    "\ufe83\025\ufe83\050\ufe83\052\ufe83\130\ufe83\001\002\000\016" +
    "\005\050\006\052\007\062\011\u034e\012\u034b\035\046\001" +
    "\002\000\016\005\050\006\052\007\062\011\u034e\012\u034b" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u034e\012\u034b\035\046\001\002\000\016\005\050\006\052" +
    "\007\062\011\u034e\012\u034b\035\046\001\002\000\016\005" +
    "\050\006\052\007\062\011\u034e\012\u034b\035\046\001\002" +
    "\000\016\005\050\006\052\007\062\011\u034e\012\u034b\035" +
    "\046\001\002\000\042\003\ufe89\004\ufe89\011\ufe89\013\ufe89" +
    "\014\ufe89\023\ufe89\024\ufe89\025\ufe89\034\u0354\035\u0356\036" +
    "\u0358\037\u0357\040\u0352\050\ufe89\052\ufe89\130\ufe89\001\002" +
    "\000\042\003\ufe88\004\ufe88\011\ufe88\013\ufe88\014\ufe88\023" +
    "\ufe88\024\ufe88\025\ufe88\034\u0354\035\u0356\036\u0358\037\u0357" +
    "\040\u0352\050\ufe88\052\ufe88\130\ufe88\001\002\000\042\003" +
    "\ufe85\004\ufe85\011\ufe85\013\ufe85\014\ufe85\023\ufe85\024\ufe85" +
    "\025\ufe85\034\u0354\035\u0356\036\u0358\037\u0357\040\u0352\050" +
    "\ufe85\052\ufe85\130\ufe85\001\002\000\042\003\ufe84\004\ufe84" +
    "\011\ufe84\013\ufe84\014\ufe84\023\ufe84\024\ufe84\025\ufe84\034" +
    "\u0354\035\u0356\036\u0358\037\u0357\040\u0352\050\ufe84\052\ufe84" +
    "\130\ufe84\001\002\000\042\003\ufe87\004\ufe87\011\ufe87\013" +
    "\ufe87\014\ufe87\023\ufe87\024\ufe87\025\ufe87\034\u0354\035\u0356" +
    "\036\u0358\037\u0357\040\u0352\050\ufe87\052\ufe87\130\ufe87\001" +
    "\002\000\042\003\ufe86\004\ufe86\011\ufe86\013\ufe86\014\ufe86" +
    "\023\ufe86\024\ufe86\025\ufe86\034\u0354\035\u0356\036\u0358\037" +
    "\u0357\040\u0352\050\ufe86\052\ufe86\130\ufe86\001\002\000\004" +
    "\004\ufeb6\001\002\000\022\003\u0394\005\050\006\052\007" +
    "\062\011\u034e\012\u0374\035\046\051\u0379\001\002\000\006" +
    "\003\u038f\014\u0390\001\002\000\004\004\ufebb\001\002\000" +
    "\004\004\ufeb2\001\002\000\020\003\u0392\004\u0331\011\u032d" +
    "\023\053\024\043\025\057\130\u0330\001\002\000\004\004" +
    "\ufeb4\001\002\000\004\004\ufeb3\001\002\000\006\003\u0396" +
    "\014\u0397\001\002\000\014\003\ufe9b\004\ufeb5\014\ufe9b\022" +
    "\u038c\026\u038d\001\002\000\004\004\ufeb7\001\002\000\010" +
    "\004\ufeb5\022\u038c\026\u038d\001\002\000\020\003\u0399\004" +
    "\u0331\011\u032d\023\053\024\043\025\057\130\u0330\001\002" +
    "\000\010\004\ufeb5\022\u038c\026\u038d\001\002\000\010\004" +
    "\ufeb5\022\u038c\026\u038d\001\002\000\004\004\ufeb9\001\002" +
    "\000\004\004\ufeba\001\002\000\004\004\ufeb8\001\002\000" +
    "\010\004\ufeb5\022\u038c\026\u038d\001\002\000\020\003\u03a0" +
    "\004\u0331\011\u032d\023\053\024\043\025\057\130\u0330\001" +
    "\002\000\010\004\ufeb5\022\u038c\026\u038d\001\002\000\010" +
    "\004\ufeb5\022\u038c\026\u038d\001\002\000\004\004\ufebd\001" +
    "\002\000\004\004\ufebe\001\002\000\004\004\ufebc\001\002" +
    "\000\012\003\u03a8\013\u03a7\050\u037b\052\u037c\001\002\000" +
    "\022\003\ufe9d\004\ufe9d\011\ufe9d\014\ufe9d\023\ufe9d\024\ufe9d" +
    "\025\ufe9d\130\ufe9d\001\002\000\032\013\u0370\034\u0354\035" +
    "\u0356\036\u0358\037\u0357\040\u0352\041\u0384\042\u0383\044\u0380" +
    "\045\u037f\046\u0382\047\u0381\001\002\000\022\003\ufe9f\004" +
    "\ufe9f\011\ufe9f\014\ufe9f\023\ufe9f\024\ufe9f\025\ufe9f\130\ufe9f" +
    "\001\002\000\022\003\ufe9e\004\ufe9e\011\ufe9e\014\ufe9e\023" +
    "\ufe9e\024\ufe9e\025\ufe9e\130\ufe9e\001\002\000\026\003\ufed3" +
    "\011\ufed3\016\ufed3\023\ufed3\024\ufed3\025\ufed3\027\ufed3\030" +
    "\ufed3\033\ufed3\130\ufed3\001\002\000\026\003\ufed2\011\ufed2" +
    "\016\ufed2\023\ufed2\024\ufed2\025\ufed2\027\ufed2\030\ufed2\033" +
    "\ufed2\130\ufed2\001\002\000\020\003\u03ae\004\u0331\011\u032d" +
    "\023\053\024\043\025\057\130\u0330\001\002\000\020\003" +
    "\ufe9b\004\ufe9b\011\ufe9b\023\ufe9b\024\ufe9b\025\ufe9b\130\ufe9b" +
    "\001\002\000\004\004\ufeb1\001\002\000\004\004\ufeb0\001" +
    "\002\000\014\004\ufec8\010\ufec8\022\ufec8\026\ufec8\143\ufec8" +
    "\001\002\000\022\003\u03b3\005\050\006\052\007\062\011" +
    "\u034e\012\u034b\020\u03b1\035\046\001\002\000\010\003\ufec4" +
    "\013\ufec4\021\ufec4\001\002\000\010\003\u03b8\013\u03b7\021" +
    "\u03b6\001\002\000\014\004\ufec9\010\ufec9\022\ufec9\026\ufec9" +
    "\143\ufec9\001\002\000\022\003\ufec3\013\ufec3\021\ufec3\034" +
    "\u0354\035\u0356\036\u0358\037\u0357\040\u0352\001\002\000\010" +
    "\003\ufec5\013\ufec5\021\ufec5\001\002\000\020\005\050\006" +
    "\052\007\062\011\u034e\012\u034b\020\u03b1\035\046\001\002" +
    "\000\014\004\ufeca\010\ufeca\022\ufeca\026\ufeca\143\ufeca\001" +
    "\002\000\014\004\ufec7\010\ufec7\022\ufec7\026\ufec7\143\ufec7" +
    "\001\002\000\010\003\ufec6\013\ufec6\021\ufec6\001\002\000" +
    "\006\003\u03c4\011\u03c3\001\002\000\014\004\ufe8e\010\ufe8e" +
    "\022\ufe8e\026\ufe8e\143\ufe8e\001\002\000\020\003\u03be\005" +
    "\050\006\052\007\062\011\u034e\012\u034b\035\046\001\002" +
    "\000\016\004\ufe8f\010\ufe8f\021\u03c0\022\ufe8f\026\ufe8f\143" +
    "\ufe8f\001\002\000\016\004\ufebf\010\ufebf\021\ufebf\022\ufebf" +
    "\026\ufebf\143\ufebf\001\002\000\030\004\ufec0\010\ufec0\021" +
    "\ufec0\022\ufec0\026\ufec0\034\u0354\035\u0356\036\u0358\037\u0357" +
    "\040\u0352\143\ufec0\001\002\000\020\003\u03c1\005\050\006" +
    "\052\007\062\011\u034e\012\u034b\035\046\001\002\000\016" +
    "\004\ufec1\010\ufec1\021\ufec1\022\ufec1\026\ufec1\143\ufec1\001" +
    "\002\000\030\004\ufec2\010\ufec2\021\ufec2\022\ufec2\026\ufec2" +
    "\034\u0354\035\u0356\036\u0358\037\u0357\040\u0352\143\ufec2\001" +
    "\002\000\014\003\ufeda\013\ufeda\021\ufeda\043\ufeda\073\ufeda" +
    "\001\002\000\014\003\ufed9\013\ufed9\021\ufed9\043\ufed9\073" +
    "\ufed9\001\002\000\024\005\050\006\052\007\062\011\u034e" +
    "\012\u034b\023\053\024\043\025\057\035\046\001\002\000" +
    "\014\004\ufe8d\010\ufe8d\022\ufe8d\026\ufe8d\143\ufe8d\001\002" +
    "\000\026\004\ufe8c\010\ufe8c\022\ufe8c\026\ufe8c\034\u0354\035" +
    "\u0356\036\u0358\037\u0357\040\u0352\143\ufe8c\001\002\000\066" +
    "\003\uff72\011\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\033\uff72\053\uff72\067\uff72\074\uff72" +
    "\105\uff72\106\uff72\107\uff72\112\uff72\113\uff72\114\uff72\115" +
    "\uff72\130\uff72\133\uff72\134\uff72\137\uff72\140\uff72\142\uff72" +
    "\001\002\000\014\067\u03cb\107\ufd99\112\ufffd\133\015\142" +
    "\ufd99\001\002\000\012\107\ufd99\112\ufffe\133\015\142\ufd99" +
    "\001\002\000\066\003\uff73\011\uff73\022\uff73\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\033\uff73\053\uff73" +
    "\067\uff73\074\uff73\105\uff73\106\uff73\107\uff73\112\uff73\113" +
    "\uff73\114\uff73\115\uff73\130\uff73\133\uff73\134\uff73\137\uff73" +
    "\140\uff73\142\uff73\001\002\000\012\107\ufffb\112\ufffb\133" +
    "\ufffb\142\ufffb\001\002\000\012\107\ufffa\112\ufffa\133\ufffa" +
    "\142\ufffa\001\002\000\004\112\uffff\001\002\000\012\107" +
    "\ufff9\112\ufff9\133\ufff9\142\ufff9\001\002\000\006\107\u03d1" +
    "\142\u03d2\001\002\000\006\003\u051a\011\u0519\001\002\000" +
    "\006\003\u03d4\011\u03d3\001\002\000\010\003\uff94\012\u03d5" +
    "\073\uff94\001\002\000\006\012\u03d5\073\uff94\001\002\000" +
    "\012\003\u04f8\011\u04f5\013\u04f7\055\u04f9\001\002\000\004" +
    "\073\u03d7\001\002\000\010\060\035\061\024\062\032\001" +
    "\002\000\004\067\u03c8\001\002\000\040\011\u03e4\023\053" +
    "\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067" +
    "\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\022\003\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\035\uffb6\113\u04d3\001\002\000\012\021\u044a" +
    "\026\uffa7\067\uffa7\106\uffa7\001\002\000\010\026\uffe2\067" +
    "\uffe2\106\uffe2\001\002\000\004\067\u03c8\001\002\000\004" +
    "\067\u03c8\001\002\000\022\003\u04c5\005\050\006\052\007" +
    "\062\011\u03fb\012\u0466\035\046\051\u046a\001\002\000\052" +
    "\003\uffea\011\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\033\uffea\053\uffea\074\uffea\105\uffea" +
    "\106\uffea\113\uffea\114\uffea\115\uffea\130\uffea\134\uffea\140" +
    "\uffea\001\002\000\020\003\u04c3\005\050\006\052\007\062" +
    "\011\u03fb\012\u03f6\035\046\001\002\000\004\067\u03c8\001" +
    "\002\000\022\003\u0488\005\050\006\052\007\062\011\u03fb" +
    "\012\u0466\035\046\051\u046a\001\002\000\010\003\u0481\012" +
    "\u03ff\043\u0482\001\002\000\010\026\uffde\067\uffde\106\uffde" +
    "\001\002\000\004\067\u03c8\001\002\000\004\067\u03c8\001" +
    "\002\000\004\012\u045c\001\002\000\010\026\uffe0\067\uffe0" +
    "\106\uffe0\001\002\000\010\026\uffe1\067\uffe1\106\uffe1\001" +
    "\002\000\010\026\uffe3\067\uffe3\106\uffe3\001\002\000\004" +
    "\067\u03c8\001\002\000\004\106\u0458\001\002\000\004\011" +
    "\u0320\001\002\000\004\067\u03c8\001\002\000\006\003\u0419" +
    "\011\u0418\001\002\000\010\026\uffdf\067\uffdf\106\uffdf\001" +
    "\002\000\052\003\uffed\011\u03e4\022\uffed\023\053\024\043" +
    "\025\057\026\uffed\027\u03e3\030\u03df\033\u03f0\053\u03e1\074" +
    "\u03e7\105\u03ee\106\uffed\113\uffed\114\uffed\115\uffed\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\012\u03f4\001\002\000" +
    "\024\003\u03fc\005\050\006\052\007\062\011\u03fb\012\u03f6" +
    "\013\u03fe\020\u03f5\035\046\001\002\000\006\013\uff9b\070" +
    "\uff9b\001\002\000\016\005\050\006\052\007\062\011\u03fb" +
    "\012\u03f6\035\046\001\002\000\006\013\u0412\070\u0413\001" +
    "\002\000\060\003\uff86\013\uff86\021\uff86\026\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\052\uff86\067\uff86" +
    "\070\uff86\075\uff86\106\uff86\116\uff86\117\uff86\001\002\000" +
    "\060\003\uff85\013\uff85\021\uff85\026\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\052\uff85\067\uff85\070\uff85" +
    "\075\uff85\106\uff85\116\uff85\117\uff85\001\002\000\020\013" +
    "\uff9a\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\070\uff9a" +
    "\001\002\000\062\003\ufd9d\012\u03ff\013\ufd9d\021\ufd9d\026" +
    "\ufd9d\034\ufd9d\035\ufd9d\036\ufd9d\037\ufd9d\040\ufd9d\041\ufd9d" +
    "\043\ufd9d\044\ufd9d\045\ufd9d\046\ufd9d\047\ufd9d\050\ufd9d\052" +
    "\ufd9d\067\ufd9d\070\ufd9d\075\ufd9d\106\ufd9d\116\ufd9d\117\ufd9d" +
    "\001\002\000\006\013\uff99\070\uff99\001\002\000\006\013" +
    "\uff9c\070\uff9c\001\002\000\010\026\uff9f\067\uff9f\106\uff9f" +
    "\001\002\000\022\003\u0401\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f6\013\u0402\035\046\001\002\000\020\013\uff75" +
    "\021\uff75\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\001" +
    "\002\000\006\013\uff74\021\uff74\001\002\000\060\003\uff78" +
    "\013\uff78\021\uff78\026\uff78\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\043\uff78\044\uff78\045\uff78\046\uff78" +
    "\047\uff78\050\uff78\052\uff78\067\uff78\070\uff78\075\uff78\106" +
    "\uff78\116\uff78\117\uff78\001\002\000\006\013\u0405\021\u0404" +
    "\001\002\000\020\003\u0407\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f6\035\046\001\002\000\060\003\uff79\013\uff79" +
    "\021\uff79\026\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\052\uff79\067\uff79\070\uff79\075\uff79\106\uff79\116" +
    "\uff79\117\uff79\001\002\000\020\013\uff77\021\uff77\034\u0409" +
    "\035\u040a\036\u040c\037\u040b\040\u0408\001\002\000\006\013" +
    "\uff76\021\uff76\001\002\000\016\005\050\006\052\007\062" +
    "\011\u03fb\012\u03f6\035\046\001\002\000\016\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f6\035\046\001\002\000\016" +
    "\005\050\006\052\007\062\011\u03fb\012\u03f6\035\046\001" +
    "\002\000\016\005\050\006\052\007\062\011\u03fb\012\u03f6" +
    "\035\046\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f6\035\046\001\002\000\060\003\uff89\013\uff89" +
    "\021\uff89\026\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89" +
    "\050\uff89\052\uff89\067\uff89\070\uff89\075\uff89\106\uff89\116" +
    "\uff89\117\uff89\001\002\000\060\003\uff8a\013\uff8a\021\uff8a" +
    "\026\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\052\uff8a\067\uff8a\070\uff8a\075\uff8a\106\uff8a\116\uff8a\117" +
    "\uff8a\001\002\000\060\003\uff8b\013\uff8b\021\uff8b\026\uff8b" +
    "\034\uff8b\035\uff8b\036\u040c\037\u040b\040\u0408\041\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\052\uff8b" +
    "\067\uff8b\070\uff8b\075\uff8b\106\uff8b\116\uff8b\117\uff8b\001" +
    "\002\000\060\003\uff8c\013\uff8c\021\uff8c\026\uff8c\034\uff8c" +
    "\035\uff8c\036\u040c\037\u040b\040\u0408\041\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\052\uff8c\067\uff8c" +
    "\070\uff8c\075\uff8c\106\uff8c\116\uff8c\117\uff8c\001\002\000" +
    "\060\003\uff88\013\uff88\021\uff88\026\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\052\uff88\067\uff88\070\uff88" +
    "\075\uff88\106\uff88\116\uff88\117\uff88\001\002\000\010\026" +
    "\uffa1\067\uffa1\106\uffa1\001\002\000\022\003\u03fc\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f6\020\u03f5\035\046\001" +
    "\002\000\006\013\uff9d\070\uff9d\001\002\000\016\013\u0416" +
    "\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\001\002\000" +
    "\060\003\uff87\013\uff87\021\uff87\026\uff87\034\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\052\uff87\067\uff87\070\uff87" +
    "\075\uff87\106\uff87\116\uff87\117\uff87\001\002\000\052\003" +
    "\uffeb\011\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\033\uffeb\053\uffeb\074\uffeb\105\uffeb\106" +
    "\uffeb\113\uffeb\114\uffeb\115\uffeb\130\uffeb\134\uffeb\140\uffeb" +
    "\001\002\000\014\003\uffc5\043\uffc5\060\035\061\024\062" +
    "\032\001\002\000\012\043\uffc5\060\035\061\024\062\032" +
    "\001\002\000\004\043\u041c\001\002\000\006\003\uffc6\043" +
    "\uffc6\001\002\000\016\005\050\006\052\007\062\011\u03fb" +
    "\012\u03f6\035\046\001\002\000\016\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\075\u041e\001\002\000\016\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f6\035\046\001\002\000" +
    "\020\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067\uffc3" +
    "\116\u0420\001\002\000\016\005\050\006\052\007\062\011" +
    "\u03fb\012\u03f6\035\046\001\002\000\004\067\u03c8\001\002" +
    "\000\040\011\u03e4\023\053\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\004\115\u0424\001" +
    "\002\000\006\011\u0425\067\uffc1\001\002\000\004\067\uffc2" +
    "\001\002\000\004\067\uffca\001\002\000\016\034\u0409\035" +
    "\u040a\036\u040c\037\u040b\040\u0408\067\uffc4\001\002\000\006" +
    "\003\u0429\043\u042a\001\002\000\004\075\u043e\001\002\000" +
    "\016\005\050\006\052\007\062\011\u03fb\012\u03f6\035\046" +
    "\001\002\000\020\003\u042d\034\u0409\035\u040a\036\u040c\037" +
    "\u040b\040\u0408\075\u042c\001\002\000\016\005\050\006\052" +
    "\007\062\011\u03fb\012\u03f6\035\046\001\002\000\006\067" +
    "\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002\000\040" +
    "\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\115\u0431\001\002\000" +
    "\006\011\u0425\067\uffc1\001\002\000\004\067\uffc8\001\002" +
    "\000\022\003\u0434\034\u0409\035\u040a\036\u040c\037\u040b\040" +
    "\u0408\067\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002" +
    "\000\004\067\u03c8\001\002\000\040\011\u03e4\023\053\024" +
    "\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb" +
    "\074\u03e7\105\u03ee\115\uffec\130\u03f3\134\u03da\140\u03e8\001" +
    "\002\000\004\115\u0438\001\002\000\006\011\u0425\067\uffc1" +
    "\001\002\000\004\067\uffcb\001\002\000\040\011\u03e4\023" +
    "\053\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1" +
    "\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3\134\u03da\140" +
    "\u03e8\001\002\000\004\115\u043c\001\002\000\006\011\u0425" +
    "\067\uffc1\001\002\000\004\067\uffc7\001\002\000\016\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f6\035\046\001\002" +
    "\000\020\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067" +
    "\uffc3\116\u0420\001\002\000\004\067\u03c8\001\002\000\040" +
    "\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\115\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\115\u0443\001\002\000" +
    "\006\011\u0425\067\uffc1\001\002\000\004\067\uffc9\001\002" +
    "\000\054\003\uffe7\011\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7\053\uffe7\067\u03cb" +
    "\074\uffe7\105\uffe7\106\uffe7\113\uffe7\114\uffe7\115\uffe7\130" +
    "\uffe7\134\uffe7\140\uffe7\001\002\000\010\003\u0448\021\u03ba" +
    "\073\u0447\001\002\000\010\060\035\061\024\062\032\001" +
    "\002\000\012\021\uffab\026\uffab\067\uffab\106\uffab\001\002" +
    "\000\014\021\u044a\026\uffa7\043\u044b\067\uffa7\106\uffa7\001" +
    "\002\000\004\011\u0320\001\002\000\016\005\050\006\052" +
    "\007\062\011\u03fb\012\u03f6\035\046\001\002\000\012\021" +
    "\uffac\026\uffac\067\uffac\106\uffac\001\002\000\024\021\u044a" +
    "\026\uffa7\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067" +
    "\uffa7\106\uffa7\001\002\000\012\021\uffad\026\uffad\067\uffad" +
    "\106\uffad\001\002\000\010\003\u0451\021\u03ba\073\u0450\001" +
    "\002\000\010\060\035\061\024\062\032\001\002\000\012" +
    "\021\u044a\026\uffa7\067\uffa7\106\uffa7\001\002\000\012\021" +
    "\uffa8\026\uffa8\067\uffa8\106\uffa8\001\002\000\014\021\u044a" +
    "\026\uffa7\043\u0454\067\uffa7\106\uffa7\001\002\000\016\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f6\035\046\001\002" +
    "\000\012\021\uffa9\026\uffa9\067\uffa9\106\uffa9\001\002\000" +
    "\024\021\u044a\026\uffa7\034\u0409\035\u040a\036\u040c\037\u040b" +
    "\040\u0408\067\uffa7\106\uffa7\001\002\000\012\021\uffaa\026" +
    "\uffaa\067\uffaa\106\uffaa\001\002\000\004\142\u0459\001\002" +
    "\000\004\067\u03c8\001\002\000\014\067\u03cb\107\ufff6\112" +
    "\ufff6\133\ufff6\142\ufff6\001\002\000\054\003\uffe4\011\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\033\uffe4\053\uffe4\067\u03cb\074\uffe4\105\uffe4\106\uffe4" +
    "\113\uffe4\114\uffe4\115\uffe4\130\uffe4\134\uffe4\140\uffe4\001" +
    "\002\000\024\003\u03fc\005\050\006\052\007\062\011\u03fb" +
    "\012\u03f6\013\u045e\020\u03f5\035\046\001\002\000\006\013" +
    "\u045f\070\u0413\001\002\000\010\026\uff9e\067\uff9e\106\uff9e" +
    "\001\002\000\010\026\uffa0\067\uffa0\106\uffa0\001\002\000" +
    "\040\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df" +
    "\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\114\uffec\130" +
    "\u03f3\134\u03da\140\u03e8\001\002\000\004\114\u0462\001\002" +
    "\000\006\003\u0463\030\u0464\001\002\000\020\005\050\006" +
    "\052\007\062\011\u03fb\012\u0466\035\046\051\u046a\001\002" +
    "\000\022\003\u0469\005\050\006\052\007\062\011\u03fb\012" +
    "\u0466\035\046\051\u046a\001\002\000\014\003\uff83\050\u046c" +
    "\052\u046d\067\uff83\117\uff83\001\002\000\020\005\050\006" +
    "\052\007\062\011\u03fb\012\u03f6\035\046\051\u046a\001\002" +
    "\000\004\067\uffbd\001\002\000\030\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\041\u0475\043\u0474\044\u0471\045\u0470" +
    "\046\u0473\047\u0472\001\002\000\004\067\uffbb\001\002\000" +
    "\020\005\050\006\052\007\062\011\u03fb\012\u03f6\035\046" +
    "\051\u046a\001\002\000\016\003\uff7a\013\uff7a\050\uff7a\052" +
    "\uff7a\067\uff7a\117\uff7a\001\002\000\020\005\050\006\052" +
    "\007\062\011\u03fb\012\u03f6\035\046\051\u046a\001\002\000" +
    "\020\005\050\006\052\007\062\011\u03fb\012\u03f6\035\046" +
    "\051\u046a\001\002\000\016\003\uff7b\013\uff7b\050\u046c\052" +
    "\uff7b\067\uff7b\117\uff7b\001\002\000\016\003\uff7c\013\uff7c" +
    "\050\uff7c\052\uff7c\067\uff7c\117\uff7c\001\002\000\016\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f6\035\046\001\002" +
    "\000\016\005\050\006\052\007\062\011\u03fb\012\u03f6\035" +
    "\046\001\002\000\016\005\050\006\052\007\062\011\u03fb" +
    "\012\u03f6\035\046\001\002\000\016\005\050\006\052\007" +
    "\062\011\u03fb\012\u03f6\035\046\001\002\000\016\005\050" +
    "\006\052\007\062\011\u03fb\012\u03f6\035\046\001\002\000" +
    "\016\005\050\006\052\007\062\011\u03fb\012\u03f6\035\046" +
    "\001\002\000\030\003\uff82\013\uff82\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff82\052\uff82\067\uff82\117\uff82" +
    "\001\002\000\030\003\uff81\013\uff81\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff81\052\uff81\067\uff81\117\uff81" +
    "\001\002\000\030\003\uff7e\013\uff7e\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff7e\052\uff7e\067\uff7e\117\uff7e" +
    "\001\002\000\030\003\uff7d\013\uff7d\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff7d\052\uff7d\067\uff7d\117\uff7d" +
    "\001\002\000\030\003\uff80\013\uff80\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff80\052\uff80\067\uff80\117\uff80" +
    "\001\002\000\030\003\uff7f\013\uff7f\034\u0409\035\u040a\036" +
    "\u040c\037\u040b\040\u0408\050\uff7f\052\uff7f\067\uff7f\117\uff7f" +
    "\001\002\000\010\013\u047e\050\u046c\052\u046d\001\002\000" +
    "\032\013\u0416\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408" +
    "\041\u0475\043\u0474\044\u0471\045\u0470\046\u0473\047\u0472\001" +
    "\002\000\010\003\uff84\067\uff84\117\uff84\001\002\000\004" +
    "\067\uffbc\001\002\000\054\003\uffe8\011\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8" +
    "\053\uffe8\067\u03cb\074\uffe8\105\uffe8\106\uffe8\113\uffe8\114" +
    "\uffe8\115\uffe8\130\uffe8\134\uffe8\140\uffe8\001\002\000\010" +
    "\026\uffa5\067\uffa5\106\uffa5\001\002\000\026\003\u0486\005" +
    "\050\006\052\007\062\011\u03fb\012\u03f6\023\053\024\043" +
    "\025\057\035\046\001\002\000\010\026\uffa3\067\uffa3\106" +
    "\uffa3\001\002\000\010\026\uffa6\067\uffa6\106\uffa6\001\002" +
    "\000\022\026\uffa2\034\u0409\035\u040a\036\u040c\037\u040b\040" +
    "\u0408\067\uffa2\106\uffa2\001\002\000\010\026\uffa4\067\uffa4" +
    "\106\uffa4\001\002\000\010\003\u04a6\067\u03c8\117\u04a7\001" +
    "\002\000\004\117\u0489\001\002\000\024\011\u03e4\023\053" +
    "\024\043\025\057\053\u03e1\067\u03c8\105\u03ee\130\u03f3\140" +
    "\u03e8\001\002\000\044\011\u03e4\022\uffec\023\053\024\043" +
    "\025\057\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067" +
    "\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\006\026\u048c\067\uffd3\001\002\000\022\011" +
    "\u03e4\023\053\024\043\025\057\053\u03e1\105\u03ee\130\u03f3" +
    "\140\u03e8\001\002\000\004\067\uffd6\001\002\000\010\022" +
    "\u0491\026\u048f\106\uffcc\001\002\000\004\067\u03c8\001\002" +
    "\000\004\106\u04a2\001\002\000\022\003\u0493\005\050\006" +
    "\052\007\062\011\u03fb\012\u0466\035\046\051\u046a\001\002" +
    "\000\006\067\u03c8\117\u049b\001\002\000\006\067\u03c8\117" +
    "\u0494\001\002\000\004\067\u03c8\001\002\000\044\011\u03e4" +
    "\022\uffec\023\053\024\043\025\057\026\uffec\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\010\022\u0491\026" +
    "\u048f\106\uffcc\001\002\000\004\106\uffce\001\002\000\044" +
    "\011\u03e4\022\uffec\023\053\024\043\025\057\026\uffec\027" +
    "\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee" +
    "\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\010\022" +
    "\u0491\026\u048f\106\uffcc\001\002\000\004\106\uffcd\001\002" +
    "\000\004\067\u03c8\001\002\000\044\011\u03e4\022\uffec\023" +
    "\053\024\043\025\057\026\uffec\027\u03e3\030\u03df\033\u03f0" +
    "\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134" +
    "\u03da\140\u03e8\001\002\000\010\022\u0491\026\u048f\106\uffcc" +
    "\001\002\000\004\106\uffd0\001\002\000\044\011\u03e4\022" +
    "\uffec\023\053\024\043\025\057\026\uffec\027\u03e3\030\u03df" +
    "\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130" +
    "\u03f3\134\u03da\140\u03e8\001\002\000\010\022\u0491\026\u048f" +
    "\106\uffcc\001\002\000\004\106\uffd1\001\002\000\004\027" +
    "\u04a3\001\002\000\004\067\uffd4\001\002\000\040\011\u03e4" +
    "\023\053\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053" +
    "\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da" +
    "\140\u03e8\001\002\000\004\106\uffcf\001\002\000\022\011" +
    "\u03e4\023\053\024\043\025\057\053\u03e1\105\u03ee\130\u03f3" +
    "\140\u03e8\001\002\000\024\011\u03e4\023\053\024\043\025" +
    "\057\053\u03e1\067\u03c8\105\u03ee\130\u03f3\140\u03e8\001\002" +
    "\000\044\011\u03e4\022\uffec\023\053\024\043\025\057\026" +
    "\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000" +
    "\010\022\u0491\026\u048f\106\uffcc\001\002\000\004\106\u04ab" +
    "\001\002\000\006\003\u04ac\027\u04ad\001\002\000\004\067" +
    "\uffd9\001\002\000\004\067\uffda\001\002\000\044\011\u03e4" +
    "\022\uffec\023\053\024\043\025\057\026\uffec\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec" +
    "\130\u03f3\134\u03da\140\u03e8\001\002\000\006\026\u04b0\067" +
    "\uffdd\001\002\000\022\011\u03e4\023\053\024\043\025\057" +
    "\053\u03e1\105\u03ee\130\u03f3\140\u03e8\001\002\000\004\106" +
    "\u04b2\001\002\000\006\003\u04b3\027\u04b4\001\002\000\004" +
    "\067\uffd7\001\002\000\004\067\uffdc\001\002\000\006\026" +
    "\u04ba\067\u03c8\001\002\000\010\022\u0491\026\u048f\106\uffcc" +
    "\001\002\000\004\106\u04b8\001\002\000\004\027\u04b9\001" +
    "\002\000\004\067\uffdb\001\002\000\022\011\u03e4\023\053" +
    "\024\043\025\057\053\u03e1\105\u03ee\130\u03f3\140\u03e8\001" +
    "\002\000\004\106\u04bc\001\002\000\004\003\u04bd\001\002" +
    "\000\004\067\uffd8\001\002\000\006\026\u04bf\067\uffd2\001" +
    "\002\000\022\011\u03e4\023\053\024\043\025\057\053\u03e1" +
    "\105\u03ee\130\u03f3\140\u03e8\001\002\000\004\067\uffd5\001" +
    "\002\000\054\003\uffe6\011\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6\053\uffe6\067" +
    "\u03cb\074\uffe6\105\uffe6\106\uffe6\113\uffe6\114\uffe6\115\uffe6" +
    "\130\uffe6\134\uffe6\140\uffe6\001\002\000\022\026\uff98\034" +
    "\u0409\035\u040a\036\u040c\037\u040b\040\u0408\067\uff98\106\uff98" +
    "\001\002\000\010\026\uff97\067\uff97\106\uff97\001\002\000" +
    "\004\067\u03c8\001\002\000\004\067\u03c8\001\002\000\040" +
    "\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\106\u04c8\001\002\000" +
    "\004\030\u04c9\001\002\000\004\067\uffbf\001\002\000\040" +
    "\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\004\106\u04cc\001\002\000" +
    "\006\003\u04cd\030\u04ce\001\002\000\004\067\uffbe\001\002" +
    "\000\004\067\uffc0\001\002\000\054\003\uffe5\011\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\033\uffe5\053\uffe5\067\u03cb\074\uffe5\105\uffe5\106\uffe5\113" +
    "\uffe5\114\uffe5\115\uffe5\130\uffe5\134\uffe5\140\uffe5\001\002" +
    "\000\054\003\uffe9\011\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\053\uffe9\067\u03cb" +
    "\074\uffe9\105\uffe9\106\uffe9\113\uffe9\114\uffe9\115\uffe9\130" +
    "\uffe9\134\uffe9\140\uffe9\001\002\000\010\026\uffae\067\uffae" +
    "\106\uffae\001\002\000\020\003\u04d5\005\050\006\052\007" +
    "\062\011\u03fb\012\u03f6\035\046\001\002\000\020\003\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\035\uffb7\001" +
    "\002\000\016\034\u0409\035\u040a\036\u040c\037\u040b\040\u0408" +
    "\067\u03c8\001\002\000\004\067\u03c8\001\002\000\012\003" +
    "\u0141\067\u03cb\113\u0143\137\u013f\001\002\000\012\003\u0141" +
    "\106\u04d8\113\u0143\137\u013f\001\002\000\004\134\u04d9\001" +
    "\002\000\004\067\uffb9\001\002\000\014\003\u04df\026\u04de" +
    "\067\u03cb\113\u04e0\137\u013f\001\002\000\012\003\u0141\106" +
    "\u04f3\113\u0143\137\u013f\001\002\000\004\067\u03c8\001\002" +
    "\000\012\003\u04e9\026\u04de\106\u04ea\113\u04eb\001\002\000" +
    "\004\067\uffaf\001\002\000\006\014\ufdc5\067\u03c8\001\002" +
    "\000\016\003\u04e1\005\u04e5\006\u04e4\007\u04e3\011\u01ab\035" +
    "\046\001\002\000\004\067\uffb0\001\002\000\004\067\uffb1" +
    "\001\002\000\006\014\ufdc7\067\ufd9f\001\002\000\006\014" +
    "\ufdc8\067\ufda0\001\002\000\006\014\ufdc9\067\ufda1\001\002" +
    "\000\046\003\uffec\011\u03e4\023\053\024\043\025\057\026" +
    "\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8\001" +
    "\002\000\012\003\uffb2\026\uffb2\106\uffb2\113\uffb2\001\002" +
    "\000\004\067\u03c8\001\002\000\004\067\u03c8\001\002\000" +
    "\004\134\u04ec\001\002\000\016\003\u04e1\005\050\006\052" +
    "\007\062\011\u01ab\035\046\001\002\000\004\067\uffba\001" +
    "\002\000\046\003\uffec\011\u03e4\023\053\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb4\026\uffb4\106\uffb4\113\uffb4\001" +
    "\002\000\046\003\uffec\011\u03e4\023\053\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb5\026\uffb5\106\uffb5\113\uffb5\001" +
    "\002\000\046\003\uffec\011\u03e4\023\053\024\043\025\057" +
    "\026\uffec\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074" +
    "\u03e7\105\u03ee\106\uffec\113\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\012\003\uffb3\026\uffb3\106\uffb3\113\uffb3\001" +
    "\002\000\004\003\u04f4\001\002\000\004\067\uffb8\001\002" +
    "\000\006\003\u0503\073\u0502\001\002\000\006\013\uff92\021" +
    "\uff92\001\002\000\010\003\uff95\067\uff95\073\uff95\001\002" +
    "\000\006\013\uff8d\021\uff8d\001\002\000\004\011\u04fe\001" +
    "\002\000\006\013\u04fc\021\u04fb\001\002\000\010\003\u04f8" +
    "\011\u04f5\055\u04f9\001\002\000\010\003\uff96\067\uff96\073" +
    "\uff96\001\002\000\006\013\uff93\021\uff93\001\002\000\006" +
    "\003\u0500\073\u04ff\001\002\000\010\060\035\061\024\062" +
    "\032\001\002\000\006\013\uff8e\021\uff8e\001\002\000\006" +
    "\013\uff91\021\uff91\001\002\000\010\060\035\061\024\062" +
    "\032\001\002\000\006\013\uff8f\021\uff8f\001\002\000\006" +
    "\013\uff90\021\uff90\001\002\000\006\003\u0507\073\u0506\001" +
    "\002\000\010\060\035\061\024\062\032\001\002\000\004" +
    "\067\u03c8\001\002\000\040\011\u03e4\023\053\024\043\025" +
    "\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067\u03cb\074\u03e7" +
    "\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000" +
    "\004\106\u050a\001\002\000\004\142\u050b\001\002\000\004" +
    "\067\u03c8\001\002\000\014\067\u03cb\107\ufff7\112\ufff7\133" +
    "\ufff7\142\ufff7\001\002\000\006\003\u050e\067\u03c8\001\002" +
    "\000\036\011\u03e4\023\053\024\043\025\057\027\u03e3\030" +
    "\u03df\033\u03f0\053\u03e1\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\042\003\uffec\011\u03e4\023" +
    "\053\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1" +
    "\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140" +
    "\u03e8\001\002\000\006\003\u0511\106\u0512\001\002\000\012" +
    "\107\ufff4\112\ufff4\133\ufff4\142\ufff4\001\002\000\006\003" +
    "\u0513\142\u0514\001\002\000\012\107\ufff5\112\ufff5\133\ufff5" +
    "\142\ufff5\001\002\000\004\067\u03c8\001\002\000\014\067" +
    "\u03cb\107\ufff8\112\ufff8\133\ufff8\142\ufff8\001\002\000\004" +
    "\106\u0517\001\002\000\004\142\u0518\001\002\000\012\107" +
    "\ufff3\112\ufff3\133\ufff3\142\ufff3\001\002\000\010\003\uff94" +
    "\012\u03d5\067\uff94\001\002\000\006\012\u03d5\067\uff94\001" +
    "\002\000\004\067\u03c8\001\002\000\040\011\u03e4\023\053" +
    "\024\043\025\057\027\u03e3\030\u03df\033\u03f0\053\u03e1\067" +
    "\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3\134\u03da\140\u03e8" +
    "\001\002\000\004\106\u051e\001\002\000\004\107\u051f\001" +
    "\002\000\004\067\u03c8\001\002\000\014\067\u03cb\107\ufff1" +
    "\112\ufff1\133\ufff1\142\ufff1\001\002\000\006\003\u0522\067" +
    "\u03c8\001\002\000\036\011\u03e4\023\053\024\043\025\057" +
    "\027\u03e3\030\u03df\033\u03f0\053\u03e1\074\u03e7\105\u03ee\106" +
    "\uffec\130\u03f3\134\u03da\140\u03e8\001\002\000\042\003\uffec" +
    "\011\u03e4\023\053\024\043\025\057\027\u03e3\030\u03df\033" +
    "\u03f0\053\u03e1\067\u03cb\074\u03e7\105\u03ee\106\uffec\130\u03f3" +
    "\134\u03da\140\u03e8\001\002\000\006\003\u0525\106\u0526\001" +
    "\002\000\012\107\uffef\112\uffef\133\uffef\142\uffef\001\002" +
    "\000\006\003\u0528\107\u0527\001\002\000\004\067\u03c8\001" +
    "\002\000\012\107\ufff0\112\ufff0\133\ufff0\142\ufff0\001\002" +
    "\000\014\067\u03cb\107\ufff2\112\ufff2\133\ufff2\142\ufff2\001" +
    "\002\000\004\106\u052b\001\002\000\004\107\u052c\001\002" +
    "\000\012\107\uffee\112\uffee\133\uffee\142\uffee\001\002\000" +
    "\012\107\ufffc\112\ufffc\133\ufffc\142\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u052b\000\006\054\005\055\004\001\001\000\004\062" +
    "\u03c8\001\001\000\004\074\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\137\u0188\001\001\000\012\075" +
    "\013\076\011\077\012\244\015\001\001\000\006\077\u0186" +
    "\244\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\032\100\025\101\027\102\024\103\026\124\033\244\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\032\102\u017c\103\026" +
    "\124\033\244\030\001\001\000\006\027\122\243\120\001" +
    "\001\000\002\001\001\000\006\125\036\126\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\126\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\050\032\060\047\046\130\057\135\053\245" +
    "\044\001\001\000\002\001\001\000\010\032\116\047\046" +
    "\135\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\073\047" +
    "\046\135\053\001\001\000\010\032\072\047\046\135\053" +
    "\001\001\000\010\032\071\047\046\135\053\001\001\000" +
    "\010\032\070\047\046\135\053\001\001\000\010\032\067" +
    "\047\046\135\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\100\047\046\064\076\135" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\105\047\046\135" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\130\104\127\105\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\016\167" +
    "\027\032\106\151\107\160\110\170\111\150\112\163\114" +
    "\175\116\153\117\165\123\172\124\146\127\166\131\144" +
    "\132\174\133\171\135\155\245\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\u0154" +
    "\047\046\135\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\016\167\027\032\110\346\111\150\112\163\114\175" +
    "\116\153\117\165\123\172\124\146\127\166\131\144\132" +
    "\174\133\171\135\155\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\204\047\046\135\053\136" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\032\204\047\046\135" +
    "\053\136\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\222\043\220\047\046\135" +
    "\053\001\001\000\002\001\001\000\012\032\222\043\237" +
    "\047\046\135\053\001\001\000\002\001\001\000\010\032" +
    "\236\047\046\135\053\001\001\000\010\032\235\047\046" +
    "\135\053\001\001\000\010\032\234\047\046\135\053\001" +
    "\001\000\010\032\233\047\046\135\053\001\001\000\010" +
    "\032\232\047\046\135\053\001\001\000\010\032\231\047" +
    "\046\135\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\222\043\243" +
    "\047\046\135\053\001\001\000\012\032\222\043\242\047" +
    "\046\135\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\257\047\046\135\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\016\167\027\032\106\255\107\160\110\170" +
    "\111\150\112\163\114\175\116\153\117\165\123\172\124" +
    "\146\127\166\131\144\132\174\133\171\135\155\245\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\262\047\046\135\053" +
    "\001\001\000\002\001\001\000\012\032\222\043\264\047" +
    "\046\135\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\016\167\027\032\106\273" +
    "\107\160\110\170\111\150\112\163\114\175\116\153\117" +
    "\165\123\172\124\146\127\166\131\144\132\174\133\171" +
    "\135\155\245\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\016" +
    "\167\027\032\106\303\107\160\110\170\111\150\112\163" +
    "\114\175\116\153\117\165\123\172\124\146\127\166\131" +
    "\144\132\174\133\171\135\155\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\016\167\027\032\106" +
    "\306\107\160\110\170\111\150\112\163\114\175\116\153" +
    "\117\165\123\172\124\146\127\166\131\144\132\174\133" +
    "\171\135\155\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\032\222\043\311\047\046\135\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\016" +
    "\167\027\032\106\317\107\160\110\170\111\150\112\163" +
    "\114\175\116\153\117\165\123\172\124\146\127\166\131" +
    "\144\132\174\133\171\135\155\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\016\167\027\032\106" +
    "\322\107\160\110\170\111\150\112\163\114\175\116\153" +
    "\117\165\123\172\124\146\127\166\131\144\132\174\133" +
    "\171\135\155\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\204\047\046\135\053\136\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\016\167\027\032\106\334\107\160\110\170\111\150" +
    "\112\163\114\175\116\153\117\165\123\172\124\146\127" +
    "\166\131\144\132\174\133\171\135\155\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\222\043\342" +
    "\047\046\135\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\050\032\060\047\046\130" +
    "\351\135\053\245\044\001\001\000\002\001\001\000\016" +
    "\016\050\032\060\047\046\130\353\135\053\245\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\032\222" +
    "\043\356\047\046\135\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\016\167\027\032" +
    "\106\362\107\160\110\170\111\150\112\163\114\175\116" +
    "\153\117\165\123\172\124\146\127\166\131\144\132\174" +
    "\133\171\135\155\245\044\001\001\000\002\001\001\000" +
    "\004\113\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\016\167\027" +
    "\032\106\371\107\160\110\170\111\150\112\163\114\175" +
    "\116\153\117\165\123\172\124\146\127\166\131\144\132" +
    "\174\133\171\135\155\245\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\222\043" +
    "\375\047\046\135\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\016\167\027\032\106" +
    "\u0101\107\160\110\170\111\150\112\163\114\175\116\153" +
    "\117\165\123\172\124\146\127\166\131\144\132\174\133" +
    "\171\135\155\245\044\001\001\000\002\001\001\000\004" +
    "\113\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\016\167\027\032\106\u0107\107\160" +
    "\110\170\111\150\112\163\114\175\116\153\117\165\123" +
    "\172\124\146\127\166\131\144\132\174\133\171\135\155" +
    "\245\044\001\001\000\002\001\001\000\004\113\u0109\001" +
    "\001\000\002\001\001\000\046\016\167\027\032\106\u010b" +
    "\107\160\110\170\111\150\112\163\114\175\116\153\117" +
    "\165\123\172\124\146\127\166\131\144\132\174\133\171" +
    "\135\155\245\044\001\001\000\002\001\001\000\004\113" +
    "\u010d\001\001\000\002\001\001\000\026\016\167\027\032" +
    "\111\u010f\124\146\127\166\131\144\132\174\133\171\135" +
    "\155\245\044\001\001\000\002\001\001\000\004\113\u0115" +
    "\001\001\000\046\016\167\027\032\106\u0112\107\160\110" +
    "\170\111\150\112\163\114\175\116\153\117\165\123\172" +
    "\124\146\127\166\131\144\132\174\133\171\135\155\245" +
    "\044\001\001\000\002\001\001\000\004\113\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\016\167\027\032\106\u0118\107\160\110\170\111\150" +
    "\112\163\114\175\116\153\117\165\123\172\124\146\127" +
    "\166\131\144\132\174\133\171\135\155\245\044\001\001" +
    "\000\002\001\001\000\004\113\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\u011e\047\046\135\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\120\u0124\121\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\016\167\027" +
    "\032\106\u012b\107\160\110\170\111\150\112\163\114\175" +
    "\116\153\117\165\122\u012d\123\172\124\146\127\166\131" +
    "\144\132\174\133\171\135\155\245\044\001\001\000\002" +
    "\001\001\000\046\016\167\027\032\106\u012e\107\160\110" +
    "\170\111\150\112\163\114\175\116\153\117\165\123\172" +
    "\124\146\127\166\131\144\132\174\133\171\135\155\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\016\167\027\032\106\u012b\107\160\110\170" +
    "\111\150\112\163\114\175\116\153\117\165\122\u0134\123" +
    "\172\124\146\127\166\131\144\132\174\133\171\135\155" +
    "\245\044\001\001\000\002\001\001\000\050\016\167\027" +
    "\032\106\u012b\107\160\110\170\111\150\112\163\114\175" +
    "\116\153\117\165\122\u0136\123\172\124\146\127\166\131" +
    "\144\132\174\133\171\135\155\245\044\001\001\000\002" +
    "\001\001\000\050\016\167\027\032\106\u012b\107\160\110" +
    "\170\111\150\112\163\114\175\116\153\117\165\122\u0138" +
    "\123\172\124\146\127\166\131\144\132\174\133\171\135" +
    "\155\245\044\001\001\000\002\001\001\000\006\120\u013a" +
    "\121\u0125\001\001\000\004\121\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\236\u013f\237\u0141\001\001" +
    "\000\002\001\001\000\004\237\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\240\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\240\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\236\u014f\237\u0141\001\001" +
    "\000\004\237\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\222\043\u0157\047\046\135" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\016\167\027\032\106\u015b\107\160\110" +
    "\170\111\150\112\163\114\175\116\153\117\165\123\172" +
    "\124\146\127\166\131\144\132\174\133\171\135\155\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\016\167\027\032\106" +
    "\u0160\107\160\110\170\111\150\112\163\114\175\116\153" +
    "\117\165\123\172\124\146\127\166\131\144\132\174\133" +
    "\171\135\155\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\016\167\027\032\106\u0163\107\160\110" +
    "\170\111\150\112\163\114\175\116\153\117\165\123\172" +
    "\124\146\127\166\131\144\132\174\133\171\135\155\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\016\167\027\032\106\u0166\107\160\110\170\111\150\112" +
    "\163\114\175\116\153\117\165\123\172\124\146\127\166" +
    "\131\144\132\174\133\171\135\155\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\130\104\u016c\105" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\016\167\027\032\106\u016f\107\160\110\170\111\150\112" +
    "\163\114\175\116\153\117\165\123\172\124\146\127\166" +
    "\131\144\132\174\133\171\135\155\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\130\104\u0173\105\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\016\167\027\032" +
    "\106\u0177\107\160\110\170\111\150\112\163\114\175\116" +
    "\153\117\165\123\172\124\146\127\166\131\144\132\174" +
    "\133\171\135\155\245\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\016\167\027\032\106\u017a\107\160" +
    "\110\170\111\150\112\163\114\175\116\153\117\165\123" +
    "\172\124\146\127\166\131\144\132\174\133\171\135\155" +
    "\245\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\032\100\u0180\101\027\102\024\103\026\124\033\244" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\027\032\100\u0184\101\027\102\024\103" +
    "\026\124\033\244\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\163" +
    "\u0189\001\001\000\002\001\001\000\010\164\u018d\165\u018b" +
    "\166\u018e\001\001\000\004\166\u0314\001\001\000\002\001" +
    "\001\000\010\172\u0190\173\u0192\174\u0191\001\001\000\002" +
    "\001\001\000\004\027\u02f7\001\001\000\014\027\u0198\175" +
    "\u0196\176\u0195\177\u0197\242\u0199\001\001\000\002\001\001" +
    "\000\004\174\u0193\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\u0198\177\u0197\242\u02f3\001\001\000\004" +
    "\207\u01db\001\001\000\002\001\001\000\006\200\u019c\202" +
    "\u019d\001\001\000\002\001\001\000\006\201\u01cd\203\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\203\u01a2\001\001\000\002" +
    "\001\001\000\010\034\u01a7\047\u01a8\241\u01a9\001\001\000" +
    "\002\001\001\000\010\034\u01cb\047\u01a8\241\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u01b5\047\u01a8\241" +
    "\u01a9\001\001\000\010\034\u01b4\047\u01a8\241\u01a9\001\001" +
    "\000\010\034\u01b3\047\u01a8\241\u01a9\001\001\000\010\034" +
    "\u01b2\047\u01a8\241\u01a9\001\001\000\010\034\u01b1\047\u01a8" +
    "\241\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\u01ba\047\u01a8\063" +
    "\u01b9\071\u01bb\241\u01a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u01bd\047\u01a8\241" +
    "\u01a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\u01ba\047\u01a8\063" +
    "\u01c2\071\u01bb\241\u01a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\u01ba\047\u01a8\063\u01c9" +
    "\071\u01bb\241\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\u01d0\047\u01a8\241\u01a9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\u01d5\047\u01a8\241\u01a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\027\u0198\177\u01f0" +
    "\200\u0201\210\u02f2\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215" +
    "\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5" +
    "\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000" +
    "\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u02f1" +
    "\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223" +
    "\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd" +
    "\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u01ec" +
    "\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223" +
    "\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd" +
    "\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\201\u01cd\001\001\000\046\027\u0198\177\u01f0\200\u0201" +
    "\212\u0272\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224" +
    "\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4" +
    "\235\u01f7\241\u01ed\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\027\u0198\177\u01f0\200\u0201\210\u0203\211\u01f2" +
    "\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224" +
    "\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4" +
    "\235\u01f7\241\u01ed\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\u020a\044\u020b\047\u01a8\241" +
    "\u01a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\u020a\044\u020e\047\u01a8\241\u01a9\001" +
    "\001\000\002\001\001\000\012\034\u020a\044\u0212\047\u01a8" +
    "\241\u01a9\001\001\000\012\034\u020a\044\u0211\047\u01a8\241" +
    "\u01a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\u0222\047\u01a8\241\u01a9\001\001\000\010" +
    "\034\u0221\047\u01a8\241\u01a9\001\001\000\010\034\u0220\047" +
    "\u01a8\241\u01a9\001\001\000\010\034\u021f\047\u01a8\241\u01a9" +
    "\001\001\000\010\034\u021e\047\u01a8\241\u01a9\001\001\000" +
    "\010\034\u021d\047\u01a8\241\u01a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u0225\047\u01a8\241\u01a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\u020a\044\u0229" +
    "\047\u01a8\241\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\027\u0198\177\u01f0\200\u0201\210\u022c\211\u01f2" +
    "\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224" +
    "\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4" +
    "\235\u01f7\241\u01ed\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\027\u0198" +
    "\177\u01f0\200\u0201\210\u0231\211\u01f2\212\u01fb\213\u01f9\214" +
    "\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8" +
    "\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\027\u0198\177\u01f0\200\u0201\210\u0235\211\u01f2\212" +
    "\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3" +
    "\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235" +
    "\u01f7\241\u01ed\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210" +
    "\u0239\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc" +
    "\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233" +
    "\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\u0242\047\u01a8\241\u01a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\236\u0245\237\u0141" +
    "\001\001\000\004\237\u0149\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\236\u024a\237\u0141" +
    "\001\001\000\004\237\u0149\001\001\000\002\001\001\000" +
    "\006\236\u024d\237\u0141\001\001\000\004\237\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\236\u0252\237\u0141\001\001\000\004\237\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\171\u025a\217" +
    "\u025b\221\u0257\222\u025d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\171\u025a\221\u0260\222\u025d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\u0264\047\u01a8\070\u0266" +
    "\241\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\u0270\047\u01a8\241\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\u026b\047" +
    "\u01a8\241\u01a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\u026e\047\u01a8\241\u01a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\u020a\044\u0275\047\u01a8\241\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\027" +
    "\u0198\177\u01f0\200\u0201\210\u0278\211\u01f2\212\u01fb\213\u01f9" +
    "\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226" +
    "\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\027\u0198\177\u01f0\200\u0201" +
    "\210\u027d\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216" +
    "\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8" +
    "\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\027\u0198" +
    "\177\u01f0\200\u0201\210\u0281\211\u01f2\212\u01fb\213\u01f9\214" +
    "\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8" +
    "\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\230\u0284" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\027\u0198\177\u01f0\200\u0201" +
    "\210\u0289\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216" +
    "\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8" +
    "\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\u020a\044\u028e\047\u01a8\241\u01a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\027\u0198\177\u01f0" +
    "\200\u0201\210\u0291\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215" +
    "\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5" +
    "\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u0296\211" +
    "\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe" +
    "\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234" +
    "\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\027\u0198\177\u01f0\200" +
    "\u0201\210\u029a\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff" +
    "\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231" +
    "\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\230\u029d\001\001\000" +
    "\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u029f" +
    "\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223" +
    "\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd" +
    "\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u02a2" +
    "\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223" +
    "\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd" +
    "\234\u01e4\235\u01f7\241\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u02a5\001\001\000\002\001\001" +
    "\000\010\034\u02a7\047\u01a8\241\u01a9\001\001\000\002\001" +
    "\001\000\012\034\u020a\044\u02a9\047\u01a8\241\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\232\u02b0\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\u02bb" +
    "\047\u01a8\241\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\027\u0198" +
    "\177\u01f0\200\u0201\210\u02b4\211\u01f2\212\u01fb\213\u01f9\214" +
    "\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8" +
    "\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\027\u0198\177\u01f0\200\u0201\210\u02b8\211\u01f2\212" +
    "\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3" +
    "\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235" +
    "\u01f7\241\u01ed\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\027\u0198\177\u01f0\200\u0201\210\u02be\211\u01f2\212\u01fb" +
    "\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225" +
    "\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7" +
    "\241\u01ed\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\204" +
    "\u02c9\001\001\000\002\001\001\000\006\205\u02d3\206\u02cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\205" +
    "\u02ce\206\u02cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\u01ba\047\u01a8\063\u02d0\071" +
    "\u01bb\241\u01a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\171\u02d7\220\u02d6\222\u02d9\001\001\000\002\001\001" +
    "\000\004\222\u02dd\001\001\000\004\171\u02db\001\001\000" +
    "\004\171\u02da\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\171\u02df\001\001\000\004\171\u02de\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\200\u0201\215\u02e4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\027\u0198\177\u01f0\200\u0201\210\u02f0" +
    "\211\u01f2\212\u01fb\213\u01f9\214\u01ee\215\u01ff\216\u01fc\223" +
    "\u01fe\224\u01e3\225\u01ea\226\u01f8\227\u01e5\231\u01e8\233\u01fd" +
    "\234\u01e4\235\u01f7\241\u01ed\001\001\000\052\027\u0198\177" +
    "\u01f0\200\u0201\210\u02ed\211\u01f2\212\u01fb\213\u01f9\214\u01ee" +
    "\215\u01ff\216\u01fc\223\u01fe\224\u01e3\225\u01ea\226\u01f8\227" +
    "\u01e5\231\u01e8\233\u01fd\234\u01e4\235\u01f7\241\u01ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\204\u02c9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u02fc\047\u01a8\241" +
    "\u01a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\167" +
    "\u0307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\170\u030d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\134\u030a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\140\u0318\141\u0319\142\u0316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\142\u031a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\143" +
    "\u0321\144\u0320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\u0328\144\u032e\147\u032a\150\u032b" +
    "\151\u0326\161\u0329\162\u0327\245\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\u0328\144\u032e\145\u0336\146\u0338\150" +
    "\u0333\151\u0326\153\u0337\156\u0334\157\u033b\161\u0329\162\u0327" +
    "\245\044\001\001\000\014\033\u0377\041\u03aa\042\u0374\047" +
    "\u034b\161\u034c\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\u0377\041\u0375\042\u0374\047\u034b\161\u034c\001" +
    "\001\000\030\016\u0328\144\u032e\146\u0372\150\u0333\151\u0326" +
    "\153\u0337\156\u0334\157\u033b\161\u0329\162\u0327\245\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\160\u0342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\u0328\144\u032e" +
    "\147\u0346\150\u032b\151\u0326\161\u0329\162\u0327\245\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\u034f\047\u034b\161\u034c\001\001\000\010\033" +
    "\u036e\047\u034b\161\u034c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\u035e\047\u034b\161\u034c\001\001\000\010" +
    "\033\u035c\047\u034b\161\u034c\001\001\000\002\001\001\000" +
    "\010\033\u035b\047\u034b\161\u034c\001\001\000\002\001\001" +
    "\000\010\033\u035a\047\u034b\161\u034c\001\001\000\010\033" +
    "\u0359\047\u034b\161\u034c\001\001\000\010\033\u0358\047\u034b" +
    "\161\u034c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\u0363\047\u034b\161" +
    "\u034c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\u0368\047\u034b\065\u0367\161\u034c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\u036d\047\u034b\161\u034c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\u03a5\042\u03a3\047\u034b\161\u034c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\154\u038d" +
    "\155\u038a\001\001\000\002\001\001\000\012\033\u0377\042" +
    "\u0379\047\u034b\161\u034c\001\001\000\002\001\001\000\012" +
    "\033\u0377\042\u037d\047\u034b\161\u034c\001\001\000\012\033" +
    "\u0377\042\u037c\047\u034b\161\u034c\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\u0389\047\u034b\161\u034c\001" +
    "\001\000\010\033\u0388\047\u034b\161\u034c\001\001\000\010" +
    "\033\u0387\047\u034b\161\u034c\001\001\000\010\033\u0386\047" +
    "\u034b\161\u034c\001\001\000\010\033\u0385\047\u034b\161\u034c" +
    "\001\001\000\010\033\u0384\047\u034b\161\u034c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\u0377\041\u0392\042\u0374\047\u034b\161\u034c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\u0328\144\u032e\147\u0390\150\u032b\151\u0326" +
    "\161\u0329\162\u0327\245\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\154\u0394\155\u038a" +
    "\001\001\000\002\001\001\000\006\154\u039b\155\u038a\001" +
    "\001\000\022\016\u0328\144\u032e\147\u0397\150\u032b\151\u0326" +
    "\161\u0329\162\u0327\245\044\001\001\000\006\154\u039a\155" +
    "\u038a\001\001\000\006\154\u0399\155\u038a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\154" +
    "\u03a2\155\u038a\001\001\000\022\016\u0328\144\u032e\147\u039e" +
    "\150\u032b\151\u0326\161\u0329\162\u0327\245\044\001\001\000" +
    "\006\154\u03a1\155\u038a\001\001\000\006\154\u03a0\155\u038a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\u0328\144\u032e\147\u03ac\150\u032b" +
    "\151\u0326\161\u0329\162\u0327\245\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\u03b3\047\u034b\072\u03b1\152\u03b4\161\u034c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\u03b3\047" +
    "\u034b\152\u03b8\161\u034c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\u03be\047\u034b\067\u03bc\161\u034c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\u03c1\047\u034b\161\u034c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\u03c5\033\u03c6\047\u034b\161\u034c\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\u03cc\003\u03ce\056\u03cd\057\u03c9\060\u03cb\244\u03cf" +
    "\001\001\000\012\002\u03cc\003\u03ce\060\u052c\244\u03cf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0504\001\001" +
    "\000\004\052\u03d5\001\001\000\006\050\u04f5\053\u04f9\001" +
    "\001\000\002\001\001\000\004\027\u03d7\001\001\000\004" +
    "\062\u03d8\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007" +
    "\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9" +
    "\017\u03ec\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245" +
    "\044\001\001\000\004\061\u04d1\001\001\000\004\023\u04d0" +
    "\001\001\000\002\001\001\000\004\062\u04cf\001\001\000" +
    "\004\062\u04ce\001\001\000\014\015\u03f7\031\u0467\037\u04c3" +
    "\040\u0464\047\u03f8\001\001\000\002\001\001\000\010\015" +
    "\u03f7\031\u04c1\047\u03f8\001\001\000\004\062\u04c0\001\001" +
    "\000\014\015\u03f7\031\u0467\037\u0486\040\u0464\047\u03f8\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u047f" +
    "\001\001\000\004\062\u045f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u045a\001\001\000\002\001\001\000\004\144\u0445\001" +
    "\001\000\004\062\u0444\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010" +
    "\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\021\u03eb" +
    "\022\u03da\024\u0416\025\u03ea\245\044\001\001\000\002\001" +
    "\001\000\014\015\u03f7\031\u03f9\036\u03fc\047\u03f8\073\u03f6" +
    "\001\001\000\002\001\001\000\010\015\u03f7\031\u0414\047" +
    "\u03f8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\u03f7" +
    "\031\u03ff\047\u03f8\066\u0402\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\u03f7\031\u0405\047\u03f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\u03f7\031\u0410" +
    "\047\u03f8\001\001\000\010\015\u03f7\031\u040f\047\u03f8\001" +
    "\001\000\010\015\u03f7\031\u040e\047\u03f8\001\001\000\010" +
    "\015\u03f7\031\u040d\047\u03f8\001\001\000\010\015\u03f7\031" +
    "\u040c\047\u03f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u03f7\031\u03f9\036\u0413\047\u03f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\u0427\027\u041a\001\001" +
    "\000\006\026\u0419\027\u041a\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\u03f7\031\u041c\047\u03f8\001\001" +
    "\000\002\001\001\000\010\015\u03f7\031\u041e\047\u03f8\001" +
    "\001\000\004\035\u0420\001\001\000\010\015\u03f7\031\u0426" +
    "\047\u03f8\001\001\000\004\062\u0421\001\001\000\044\004" +
    "\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4" +
    "\013\u03dd\015\u03f0\016\u03e9\017\u0422\020\u03f1\021\u03eb\022" +
    "\u03da\024\u03df\025\u03ea\245\044\001\001\000\002\001\001" +
    "\000\004\030\u0425\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\u03f7\031\u042a\047\u03f8\001\001\000\002\001" +
    "\001\000\010\015\u03f7\031\u0432\047\u03f8\001\001\000\004" +
    "\035\u042d\001\001\000\004\062\u042e\001\001\000\044\004" +
    "\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4" +
    "\013\u03dd\015\u03f0\016\u03e9\017\u042f\020\u03f1\021\u03eb\022" +
    "\u03da\024\u03df\025\u03ea\245\044\001\001\000\002\001\001" +
    "\000\004\030\u0431\001\001\000\002\001\001\000\004\035" +
    "\u0434\001\001\000\004\062\u0439\001\001\000\004\062\u0435" +
    "\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010" +
    "\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u0436" +
    "\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001" +
    "\001\000\002\001\001\000\004\030\u0438\001\001\000\002" +
    "\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010" +
    "\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u043a" +
    "\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001" +
    "\001\000\002\001\001\000\004\030\u043c\001\001\000\002" +
    "\001\001\000\010\015\u03f7\031\u043e\047\u03f8\001\001\000" +
    "\004\035\u043f\001\001\000\004\062\u0440\001\001\000\044" +
    "\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012" +
    "\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u0441\020\u03f1\021\u03eb" +
    "\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\002\001" +
    "\001\000\004\030\u0443\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u0448\001\001\000" +
    "\002\001\001\000\004\023\u044b\001\001\000\004\144\u044e" +
    "\001\001\000\010\015\u03f7\031\u044c\047\u03f8\001\001\000" +
    "\002\001\001\000\004\023\u044d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0452\001\001\000\004\023" +
    "\u0451\001\001\000\002\001\001\000\004\023\u0454\001\001" +
    "\000\010\015\u03f7\031\u0455\047\u03f8\001\001\000\002\001" +
    "\001\000\004\023\u0456\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u0459\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\u03f7\031\u03f9\036\u03fc\047\u03f8" +
    "\073\u045c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1" +
    "\010\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017" +
    "\u0460\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\u03f7\031\u0467\037\u047e\040\u0464\047\u03f8\001\001\000\014" +
    "\015\u03f7\031\u0467\037\u0466\040\u0464\047\u03f8\001\001\000" +
    "\002\001\001\000\012\015\u03f7\031\u047c\040\u047b\047\u03f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\u03f7\031\u0467\040\u046a\047\u03f8\001\001" +
    "\000\002\001\001\000\012\015\u03f7\031\u0467\040\u046e\047" +
    "\u03f8\001\001\000\012\015\u03f7\031\u0467\040\u046d\047\u03f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u03f7\031\u047a\047\u03f8\001\001\000\010\015\u03f7\031\u0479" +
    "\047\u03f8\001\001\000\010\015\u03f7\031\u0478\047\u03f8\001" +
    "\001\000\010\015\u03f7\031\u0477\047\u03f8\001\001\000\010" +
    "\015\u03f7\031\u0476\047\u03f8\001\001\000\010\015\u03f7\031" +
    "\u0475\047\u03f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\u03f7\016\u0482\031\u0484\047\u03f8\051\u0483" +
    "\245\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u04a7\001\001" +
    "\000\002\001\001\000\026\010\u03db\011\u03e8\012\u03e4\015" +
    "\u03f0\016\u03e9\021\u048a\022\u03da\025\u03ea\062\u0489\245\044" +
    "\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010" +
    "\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u048d" +
    "\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001" +
    "\001\000\002\001\001\000\024\010\u03db\011\u03e8\012\u03e4" +
    "\015\u03f0\016\u03e9\021\u048c\022\u03da\025\u03ea\245\044\001" +
    "\001\000\002\001\001\000\004\014\u048f\001\001\000\004" +
    "\062\u04a3\001\001\000\002\001\001\000\014\015\u03f7\031" +
    "\u0467\037\u0491\040\u0464\047\u03f8\001\001\000\004\062\u049b" +
    "\001\001\000\004\062\u0494\001\001\000\004\062\u0497\001" +
    "\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db" +
    "\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u0495\020" +
    "\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001" +
    "\000\004\014\u0496\001\001\000\002\001\001\000\044\004" +
    "\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4" +
    "\013\u03dd\015\u03f0\016\u03e9\017\u0498\020\u03f1\021\u03eb\022" +
    "\u03da\024\u03df\025\u03ea\245\044\001\001\000\004\014\u0499" +
    "\001\001\000\002\001\001\000\004\062\u049e\001\001\000" +
    "\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8" +
    "\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u049c\020\u03f1\021" +
    "\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\004" +
    "\014\u049d\001\001\000\002\001\001\000\044\004\u03dc\005" +
    "\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd" +
    "\015\u03f0\016\u03e9\017\u049f\020\u03f1\021\u03eb\022\u03da\024" +
    "\u03df\025\u03ea\245\044\001\001\000\004\014\u04a0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8" +
    "\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u04a4\020\u03f1\021" +
    "\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\002" +
    "\001\001\000\024\010\u03db\011\u03e8\012\u03e4\015\u03f0\016" +
    "\u03e9\021\u04bd\022\u03da\025\u03ea\245\044\001\001\000\026" +
    "\010\u03db\011\u03e8\012\u03e4\015\u03f0\016\u03e9\021\u04ae\022" +
    "\u03da\025\u03ea\062\u04ad\245\044\001\001\000\044\004\u03dc" +
    "\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013" +
    "\u03dd\015\u03f0\016\u03e9\017\u04a8\020\u03f1\021\u03eb\022\u03da" +
    "\024\u03df\025\u03ea\245\044\001\001\000\004\014\u04a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007" +
    "\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9" +
    "\017\u04b5\020\u03f1\021\u04b4\022\u03da\024\u03df\025\u03ea\245" +
    "\044\001\001\000\002\001\001\000\024\010\u03db\011\u03e8" +
    "\012\u03e4\015\u03f0\016\u03e9\021\u04b0\022\u03da\025\u03ea\245" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u045a\001\001\000" +
    "\004\014\u04b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\u03db\011\u03e8\012\u03e4\015" +
    "\u03f0\016\u03e9\021\u04ba\022\u03da\025\u03ea\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\u03db\011\u03e8\012\u03e4\015\u03f0" +
    "\016\u03e9\021\u04bf\022\u03da\025\u03ea\245\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u04c9\001\001\000\004\062\u04c5\001" +
    "\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db" +
    "\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u04c6\020" +
    "\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8" +
    "\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u04ca\020\u03f1\021" +
    "\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\u03f7\031\u04d3\047\u03f8\001\001\000\002\001" +
    "\001\000\004\062\u04d9\001\001\000\004\062\u04d5\001\001" +
    "\000\006\236\u04d6\237\u0141\001\001\000\004\237\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\u04dc" +
    "\046\u04db\236\u04da\237\u0141\001\001\000\004\237\u0149\001" +
    "\001\000\004\062\u04f0\001\001\000\004\046\u04e7\001\001" +
    "\000\002\001\001\000\004\062\u04e5\001\001\000\004\047" +
    "\u04e1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4" +
    "\013\u03dd\015\u03f0\016\u03e9\017\u04e6\020\u03f1\021\u03eb\022" +
    "\u03da\024\u03df\025\u03ea\245\044\001\001\000\002\001\001" +
    "\000\004\062\u04ee\001\001\000\004\062\u04ec\001\001\000" +
    "\002\001\001\000\004\047\u04e1\001\001\000\002\001\001" +
    "\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011" +
    "\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u04ed\020\u03f1" +
    "\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001\000" +
    "\002\001\001\000\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1" +
    "\010\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017" +
    "\u04ef\020\u03f1\021\u03eb\022\u03da\024\u03df\025\u03ea\245\044" +
    "\001\001\000\002\001\001\000\044\004\u03dc\005\u03e5\006" +
    "\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd\015\u03f0" +
    "\016\u03e9\017\u04f1\020\u03f1\021\u03eb\022\u03da\024\u03df\025" +
    "\u03ea\245\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u04fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u0500\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0503\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u050c\001\001\000\004\062\u0507\001\001\000" +
    "\044\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8" +
    "\012\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u0508\020\u03f1\021" +
    "\u03eb\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u050b\001\001\000" +
    "\002\001\001\000\004\062\u050e\001\001\000\044\004\u03dc" +
    "\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013" +
    "\u03dd\015\u03f0\016\u03e9\017\u0515\020\u03f1\021\u03eb\022\u03da" +
    "\024\u03df\025\u03ea\245\044\001\001\000\044\004\u03dc\005" +
    "\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd" +
    "\015\u03f0\016\u03e9\017\u050f\020\u03f1\021\u03eb\022\u03da\024" +
    "\u03df\025\u03ea\245\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0514\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\u0520\001\001\000" +
    "\004\052\u051a\001\001\000\004\062\u051b\001\001\000\044" +
    "\004\u03dc\005\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012" +
    "\u03e4\013\u03dd\015\u03f0\016\u03e9\017\u051c\020\u03f1\021\u03eb" +
    "\022\u03da\024\u03df\025\u03ea\245\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u051f\001\001\000\002" +
    "\001\001\000\004\062\u0522\001\001\000\044\004\u03dc\005" +
    "\u03e5\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd" +
    "\015\u03f0\016\u03e9\017\u0529\020\u03f1\021\u03eb\022\u03da\024" +
    "\u03df\025\u03ea\245\044\001\001\000\044\004\u03dc\005\u03e5" +
    "\006\u03ee\007\u03e1\010\u03db\011\u03e8\012\u03e4\013\u03dd\015" +
    "\u03f0\016\u03e9\017\u0523\020\u03f1\021\u03eb\022\u03da\024\u03df" +
    "\025\u03ea\245\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0528\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ErrorManager errores;
    private ColeccionInstr instrucciones; 

    public Parser(Lexer lex) { 
        super(lex);   
        errores = new ErrorManager();
        instrucciones = new ColeccionInstr();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"         "+mensaje);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
        }
        errores.agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+sym.terminalNames[s.sym]+">", new Pos(linea,columna));
        System.out.println("No se esperaba un token tipo <"+sym.terminalNames[s.sym]+"> en ("+linea+","+columna+")");
    }

    public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        errores.getErrores().remove(errores.getErrores().size()-1);
        errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= visual java python principal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // visual ::= SEPARADOR_VB espaciosVb metodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visual",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodosVb ::= dclMetodosVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodosVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosVb",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dclMetodosVb ::= dclMetodosVb dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dclMetodosVb ::= dclMetodoVb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosVb",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dclMetodoVb ::= funcionVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion metodoInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 instrucciones.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dclMetodoVb ::= procedimientoVb 
            {
              Object RESULT =null;
		int metodoInstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int metodoInstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion metodoInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 instrucciones.getInstruccionesVb().add(metodoInstr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoVb",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null&&tipo!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(tipo,id,parametros,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb error espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo para la funcion declarada, se esperaba un tipo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionVb ::= publicOpcional FUNCTION error dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END FUNCTION espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para la funcion declarada, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada FUNCTION.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato espaciosVb bloqueVb error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada END.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcionVb ::= publicOpcional FUNCTION ID dclParametrosVb AS tiposDeDato error bloqueVb END FUNCTION 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionVb",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            if(id!=null){
                                                if(parametros==null)parametros = new ArrayList();
                                                if(instrucciones==null)instrucciones = new ArrayList();
                                                RESULT = new MetodoInstr(CONST.VOID,id,parametros,instrucciones,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedimientoVb ::= publicOpcional SUB error dclParametrosVb espaciosVb bloqueVb END SUB espaciosVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el procedimiento declarado, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada SUB.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb espaciosVb bloqueVb error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se seperaba una palabra reservada END.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimientoVb ::= publicOpcional SUB ID dclParametrosVb error bloqueVb END SUB 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un salto de linea.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimientoVb",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloqueVb ::= sentenciasVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloqueVb ::= 
            {
              List<Instruccion> RESULT =null;
		
                                            RESULT = new ArrayList();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueVb",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciasVb ::= sentenciasVb sentenciaVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instruccion = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null)instrucciones = new ArrayList();
                                            if(instruccion!=null) instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciasVb ::= sentenciaVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instruccion = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasVb",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaVb ::= sentenciaIfVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaVb ::= sentenciaForVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaVb ::= sentenciaWhileVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaVb ::= sentenciaDoWhileVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaVb ::= sentenciaSwitchVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaVb ::= sentenciaSimpleVb espaciosVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaVb",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaSimpleVb ::= sentenciaDeclaracionVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = (instrucciones==null)? new ArrayList() : instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaSimpleVb ::= sentenciaAsignacionVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaSimpleVb ::= ingresoDatos 
            {
              List<Instruccion> RESULT =null;
		int accionIngresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionIngresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso accionIngreso = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(accionIngreso!=null) instrucciones.add(new IngresoInstr(accionIngreso, new Pos(accionIngresoleft, accionIngresoright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaSimpleVb ::= sentenciaEscribirVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaSimpleVb ::= llamadaMetodoVb 
            {
              List<Instruccion> RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(llamada!=null) instrucciones.add(new LlamadaInstr(llamada, new Pos(llamadaleft,llamadaright)));
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaSimpleVb ::= sentenciaReturnVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instrucciones = new ArrayList();
                                            if(instruccion!=null)instrucciones.add(instruccion);
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleVb",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,null,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesSinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesSinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instruccionesSino = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccionesSino!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,new SinoInstr(instruccionesSino,new Pos(instruccionesSinoleft,instruccionesSinoright), new Pos(posleft,posright)));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null&&instruccion!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaIfVb ::= IF condicionVb espaciosVb bloqueVb sinoVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaIfVb ::= IF condicionVb THEN espaciosVb sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciaIfVb ::= IF condicionVb THEN sentenciaSimpleVb ELSE sentenciaSimpleVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una palabra reservada IF.",new Pos(eleft,eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb ELSE sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaIfVb ::= IF error THEN espaciosVb bloqueVb sinoVb END IF 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaIfVb ::= IF error THEN sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIfVb ::= IF condicionVb error sentenciaSimpleVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada THEN.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfVb",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sinoVb ::= ELSEIF condicionVb THEN espaciosVb bloqueVb sinoVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sinoVb ::= ELSEIF condicionVb espaciosVb bloqueVb sinoVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new SiInstr(condicion,instrucciones,instruccion,new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sinoVb ::= ELSE espaciosVb bloqueVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&instrucciones!=null){
                                                RESULT = new SinoInstr(instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sinoVb ::= ELSEIF error espaciosVb bloqueVb sinoVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sinoVb ::= ELSEIF error THEN espaciosVb bloqueVb sinoVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sinoVb ::= 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoVb",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expInicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expInicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoAritmetico expInicial = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expFinalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expFinalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoAritmetico expFinal = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expAumentoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expAumentoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expAumento = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&id!=null&&expInicial!=null&&expFinal!=null&&instrucciones!=null){
                                                RESULT = new ForInstr(
                                                    new DeclaracionInstr(tipo, new LugarVariable(id, new Pos(idleft,idright)), new Pos(idleft,idright), false),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(expInicial, new Pos(expInicialleft,expInicialright)), new Pos(idleft,idright)),
                                                    new MenorIgual(new Hoja(new Dato(CONST.ID, id), new Pos(idleft, idright)), expFinal, new Pos(idleft,idright)),
                                                    new AsignacionInstr(new LugarVariable(id, new Pos(idleft,idright)), new AccionExpresion(new Mas(new Hoja(new Dato(CONST.ID, id),new Pos(idleft,idright)),(expAumento!=null)?expAumento:new Hoja(new Dato(CONST.ENTERO,"1"),new Pos(expFinalleft,expFinalright))))),
                                                    new Pos(posleft,posright),
                                                    instrucciones
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaForVb ::= FOR error tipoForVb IGUAL expresionArVb TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaForVb ::= FOR ID tipoForVb error TO expresionArVb aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de inicio.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb error aumentoForVb espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"No se declaro un valor de finalizacion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaForVb ::= FOR ID tipoForVb IGUAL expresionArVb TO expresionArVb error espaciosVb bloqueVb NEXT idNextVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor de aumento para cada ciclo del for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForVb",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoForVb ::= tiposDeDato 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = tipo;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipoForVb ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoForVb",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aumentoForVb ::= STEP expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aumentoForVb ::= 
            {
              NodoAritmetico RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentoForVb",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // idNextVb ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = id;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // idNextVb ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idNextVb",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END WHILE 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaWhileVb ::= WHILE error espaciosVb bloqueVb END WHILE 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaWhileVb ::= WHILE condicionVb espaciosVb bloqueVb END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileVb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE condicionVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&condicion!=null&&instrucciones!=null){
                                                RESULT = new WhileInstr(condicion,instrucciones, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP error condicionVb 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaDoWhileVb ::= DO espaciosVb bloqueVb LOOP WHILE error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileVb",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitchVb END SELECT 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            if(pos!=null&&expresion!=null&&casos!=null){
                                                CaseInstr porDefecto = null;
                                                for(CaseInstr caso : casos){
                                                    if(caso.getValor().getTipo().equals(CONST.VOID)){
                                                        if(porDefecto!=null){
                                                            errores.agregarError("Sintactico","Sin cadena","Ya existe un caso por defecto, solo puede haber uno.", caso.getPosicion());
                                                        }else{
                                                            porDefecto = caso;
                                                        }
                                                    }
                                                }
                                                RESULT = new SwitchInstr(expresion,casos,porDefecto, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaSwitchVb ::= SELECT caseVb error espaciosVb contenidoSwitch END SELECT 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaSwitchVb ::= SELECT caseVb expresionArVb espaciosVb contenidoSwitch END error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada SELECT.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchVb",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caseVb ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caseVb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseVb",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenidoSwitchVb ::= contenidoSwitchVb valorCaseVb espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CaseInstr> casos = (List<CaseInstr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(casos==null) casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenidoSwitchVb ::= contenidoSwitchVb error espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contenidoSwitchVb ::= valorCaseVb espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<CaseInstr> casos = new ArrayList();
                                            if(dato!=null&&instrucciones!=null) casos.add(new CaseInstr(dato,instrucciones, new Pos(datoleft,datoright)));
                                            RESULT = casos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contenidoSwitchVb ::= error espaciosVb bloqueVb 
            {
              List<CaseInstr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un caso .", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchVb",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valorCaseVb ::= CASE valorAtomico 
            {
              Dato RESULT =null;
		 RESULT = valorAtomico; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valorCaseVb ::= CASE error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor primitivo constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valorCaseVb ::= ELSE 
            {
              Dato RESULT =null;
		 RESULT = new Dato(CONST.VOID, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCaseVb",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaDeclaracionVb ::= declaracionVariableVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int masInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int masInstruccionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> masInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(instrucciones==null) instrucciones = new ArrayList();
                                            if(masInstrucciones!=null){
                                                for(Instruccion instruccion = masInstrucciones){
                                                    instrucciones.add(instruccion);
                                                }
                                            }
                                            RESULT = instrucciones;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionVb",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object listadoIds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracionVariableVb ::= DIM listadoId AS tiposDeDato masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listadoidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listadoidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listadoids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null) listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionVariableVb ::= DIM listadoId error 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) declarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariableVb",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato IGUAL expresionArVb masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object listadoIds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null && expresion!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                    if((i+1) == listadoIds.size()) instruccionesRetorno.add(new AsignacionInstr(
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new AccionExpresion(expresion, new Pos(expresionleft,expresionright)),
                                                        new Pos(posleft,posright)
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // masDeclaracionVariableVb ::= COMA listadoId AS tiposDeDato masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listadoIdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listadoIdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listadoIds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listadoVariablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listadoVariablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> listadoVariables = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Instruccion> instruccionesRetorno = new ArrayList();
                                            if(listadoVariables==null)listadoVariables = new ArrayList();
                                            if(pos!=null && listadoIds!=null && tipo!=null){
                                                for(int i = 0; i < listadoIds.size(); i++){
                                                    instruccionesRetorno.add(new DeclaracionInstr(
                                                        tipo,
                                                        new LugarVariable(listadoIds.get(i), new Pos(posleft,posright)),
                                                        new Pos(posleft, posright),
                                                        false
                                                    ));
                                                }
                                                for(Instruccion instruccion : listadoVariables){
                                                    instruccionesRetorno.add(instruccion);
                                                }
                                            }
                                            RESULT = instruccionesRetorno;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // masDeclaracionVariableVb ::= COMA listadoId error masDeclaracionVariableVb 
            {
              List<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo de la(s) variable(s) delcarada(s).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // masDeclaracionVariableVb ::= 
            {
              List<Instruccion> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masDeclaracionVariableVb",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaAsignacionVb ::= ID IGUAL accionAsignacionVb 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int accionAsignacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionAsignacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Accion accionAsignacion = (Accion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null && accionAsignacion!=null){
                                                RESULT = new AsignacionInstr(
                                                    new LugarVariable(id, new Pos(idleft,idright)),
                                                    accionAsignacion,
                                                    new Pos(idleft,idright)
                                                );
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaAsignacionVb ::= ID error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignacion ( = expresion).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaAsignacionVb ::= ID IGUAL error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e, "Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionVb",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // accionAsignacionVb ::= ingresoDatos 
            {
              Accion RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AccionIngreso accion = (AccionIngreso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = accion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // accionAsignacionVb ::= expresionArVb 
            {
              Accion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccionExpresion(expresion, new Pos(expresionleft,expresionright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionVb",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaEscribirVb ::= MENSAJE PAR_A mensajesVb PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                RESULT = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaEscribirVb ::= MENSAJELN PAR_A mensajesVb PAR_C 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mensajesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mensajesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Concat mensajes = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(pos!=null && mensajes!=null){
                                                MensajeInstr instruccion = new MensajeInstr(mensajes, new Pos(posleft,posright));
                                                instruccion.getMensaje().getMensajes().add(new Hoja(new Dato(CONST.CADENA,"\\n"), new Pos()));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaEscribirVb ::= MENSAJE PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaEscribirVb ::= MENSAJELN PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico","<Sin cadena>","Se esperaba un mensaje para mostrar a pantalla (al menos 1).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirVb",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mensajesVb ::= mensajesVb AMPERSON mensajeVb 
            {
              Concat RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Concat concat = (Concat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(concat==null) new Concat(new Pos(concatleft,concatright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                            RESULT = concat;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mensajesVb ::= mensajeVb 
            {
              Concat RESULT =null;
		int mensajeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mensajeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico mensaje = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Concat concat = new Concat(new Pos(mensajeleft,mensajeright));
                                            if(mensaje!=null) concat.getMensajes().add(mensaje);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesVb",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mensajeVb ::= CADENA 
            {
              NodoAritmetico RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(cadena!=null) RESULT = new Hoja(new Dato(CONST.CADENA, cadena), new Pos());
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mensajeVb ::= expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = expresion;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mensajeVb ::= error 
            {
              NodoAritmetico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajeVb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaReturnVb ::= RETURN expresionArVb 
            {
              Instruccion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                RESULT = new ReturnInstr(expresion, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaReturnVb ::= RETURN error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnVb",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dclParametrosVb ::= PAR_A listadoParametrosVb PAR_C 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (parametros!=null) parametros : new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // dclParametrosVb ::= PAR_A PAR_C 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dclParametrosVb ::= 
            {
              List<Dato> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosVb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // listadoParametrosVb ::= listadoParametrosVb COMA parametroVb 
            {
              List<Dato> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Dato> parametros = (List<Dato>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato parametro = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(parametros==null) parametros = new ArrayList();
                                            if(parametro!=null) parametros.add(parametro);
                                            RESULT = parametros;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // listadoParametrosVb ::= parametroVb 
            {
              List<Dato> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato parametro = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            List<Dato> datos = new ArrayList();
                                            if(parametro!=null) datos.add(parametro);
                                            RESULT = datos;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosVb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametroVb ::= BYVAL ID AS tiposDeDato 
            {
              Dato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(tipo, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametroVb ::= ID AS tiposDeDato 
            {
              Dato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(tipo, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametroVb ::= ID error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametroVb ::= BYVAL ID error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametroVb ::= error 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una declaracion de variable.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroVb",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionArVb ::= expresionArVb MAS expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionArVb ::= expresionArVb MENOS expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionArVb ::= expresionArVb DIV expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionArVb ::= expresionArVb POR expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionArVb ::= expresionArVb MOD expresionArVb 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionArVb ::= PAR_A expresionArVb PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionArVb ::= llamadaMetodoVb 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionArVb ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArVb",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condicionVb ::= PAR_A expresionBoolVb PAR_C 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // condicionVb ::= expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano condicion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionVb",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionBoolVb ::= expresionArVb DISTINTO expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionBoolVb ::= expresionArVb IGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresionBoolVb ::= expresionArVb MENOR expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresionBoolVb ::= expresionArVb MENORIGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresionBoolVb ::= expresionArVb MAYOR expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionBoolVb ::= expresionArVb MAYORIGUAL expresionArVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionBoolVb ::= expresionBoolVb AND expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresionBoolVb ::= expresionBoolVb OR expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresionBoolVb ::= NOT expresionBoolVb 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolVb",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // llamadaMetodoVb ::= ID PAR_A listadoParametrosEnviadosVb PAR_C 
            {
              Llamada RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // llamadaMetodoVb ::= ID PAR_A PAR_C 
            {
              Llamada RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoVb",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA expresionArVb 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // listadoParametrosEnviadosVb ::= listadoParametrosEnviadosVb COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // listadoParametrosEnviadosVb ::= expresionArVb 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // listadoParametrosEnviadosVb ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosVb",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // espaciosVb ::= espaciosVb FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // espaciosVb ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espaciosVb",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // java ::= SEPARADOR_JAVA clasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // clasesJv ::= dclClasesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // clasesJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesJv",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // dclClasesJv ::= dclClasesJv dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // dclClasesJv ::= dclClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClasesJv",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // dclClaseJv ::= publicOpcional CLASS ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // dclClaseJv ::= publicOpcional error ID LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra clave Class", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // dclClaseJv ::= publicOpcional CLASS error LLAVE_A contenidoClaseJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el identificador para la clase, se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dclClaseJv ::= publicOpcional CLASS ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo (contenido de la clase).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclClaseJv",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // contenidoClaseJv ::= sentenciasDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // contenidoClaseJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoClaseJv",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentenciasDeClaseJv ::= sentenciasDeClaseJv sentenciaDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentenciasDeClaseJv ::= sentenciaDeClaseJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasDeClaseJv",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentenciaDeClaseJv ::= sentenciaDeclaracionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentenciaDeClaseJv ::= dclMetodoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeClaseJv",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dclMetodoJv ::= publicOpcional error ID PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del procedimiento/funcion declarado", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dclMetodoJv ::= publicOpcional tiposDeMetodo error PAR_A dclParametrosJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 agregarError("Sintactico",(String) e,"No se especifico un identificador para el metodo, se esperaba un identificador", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un listado de parametros (lleno o vacio) dentro de parentesis.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dclMetodoJv ::= publicOpcional tiposDeMetodo ID PAR_A dclParametrosJv PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoJv",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dclParametrosJv ::= listadoParametrosJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dclParametrosJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosJv",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // listadoParametrosJv ::= tiposDeDato ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // listadoParametrosJv ::= listadoParametrosJv COMA error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // listadoParametrosJv ::= listadoParametrosJv COMA tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // listadoParametrosJv ::= tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"No se utilizo un identificador en la declaracion del parametro.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // listadoParametrosJv ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"No se especifico el tipo del parametro declarado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosJv",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bloqueJv ::= sentenciasJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bloqueJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueJv",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentenciasJv ::= sentenciasJv sentenciaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentenciasJv ::= sentenciaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasJv",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentenciaJv ::= sentenciaIfJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentenciaJv ::= sentenciaForJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentenciaJv ::= sentenciaWhileJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentenciaJv ::= sentenciaSwitchJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentenciaJv ::= sentenciaDoWhileJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentenciaJv ::= sentenciaSimpleJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaJv",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentenciaSimpleJv ::= sentenciaDeclaracionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaSimpleJv ::= sentenciaAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentenciaSimpleJv ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaSimpleJv ::= sentenciaEscribirJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentenciaSimpleJv ::= llamadaMetodoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentenciaSimpleJv ::= sentenciaReturnJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentenciaSimpleJv ::= sentenciaBreakJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimpleJv",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C sentenciaSimpleJv FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentenciaIfJv ::= IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sentenciaIfJv ::= IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sentenciaIfJv ::= IF PAR_A expresionBoolJv PAR_C error sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo o una sentencia simple", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfJv",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sinoJv ::= ELSE LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sinoJv ::= ELSE IF PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // sinoJv ::= ELSE IF error LLAVE_A bloqueJv LLAVE_C sinoJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sinoJv ::= ELSE IF PAR_A expresionBoolJv PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // sinoJv ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una llave con bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sinoJv ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoJv",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se asignó un valor de inicio para el ciclo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // sentenciaForJv ::= FOR PAR_A tiposDeDato error FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		 agregarError("Sintactico",(String) e,"No se declaro el identificador a evaluar con cada iteracion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA error FIN_LINEA ID modificadorForJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sentenciaForJv ::= FOR error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sentenciaForJv ::= FOR PAR_A tiposDeDato ID IGUAL expresionArJv FIN_LINEA expresionBoolJv FIN_LINEA ID modificadorForJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForJv",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // modificadorForJv ::= IGUAL expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // modificadorForJv ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // modificadorForJv ::= DISMINUCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // modificadorForJv ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una asignación o un modificador (++, --).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorForJv",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // sentenciaWhileJv ::= WHILE error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sentenciaWhileJv ::= WHILE PAR_A error PAR_C LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sentenciaWhileJv ::= WHILE PAR_A expresionBoolJv error LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhileJv",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv PAR_C LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // sentenciaSwitchJv ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // sentenciaSwitchJv ::= SWITCH PAR_A error PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // sentenciaSwitchJv ::= SWITCH PAR_A expresionArJv error LLAVE_A contenidoSwitchJv LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitchJv",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // contenidoSwitchJv ::= contenidoSwitchJv valorSwitchJv DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // contenidoSwitchJv ::= valorSwitchJv DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // contenidoSwitchJv ::= contenidoSwitchJv error DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // contenidoSwitchJv ::= error DOS_PUNTOS bloqueSwichJv 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un valor constante.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitchJv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // valorSwitchJv ::= CASE ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // valorSwitchJv ::= CASE FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // valorSwitchJv ::= CASE CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // valorSwitchJv ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitchJv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // bloqueSwichJv ::= LLAVE_A bloqueJv LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwichJv",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // bloqueSwichJv ::= bloqueJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueSwichJv",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A expresionBoolJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C WHILE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sentenciaDoWhileJv ::= DO LLAVE_A bloqueJv LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la palabra reservada WHILE.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhileJv",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // sentenciaDeclaracionJv ::= tiposDeDato listadoAsignacionesJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionJv",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // listadoAsignacionesJv ::= listadoAsignacionesJv asignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // listadoAsignacionesJv ::= asignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoAsignacionesJv",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // asignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // asignacionJv ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionJv",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // sentenciaAsignacionJv ::= ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // sentenciaAsignacionJv ::= THIS ID IGUAL accionAsignacionJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionJv",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // accionAsignacionJv ::= expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // accionAsignacionJv ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionAsignacionJv",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // sentenciaEscribirJv ::= MENSAJE PAR_A expresionMensajeJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // sentenciaEscribirJv ::= MENSAJE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sentenciaEscribirJv ::= MENSAJE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // sentenciaEscribirJv ::= MENSAJELN PAR_A expresionMensajeJv error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // sentenciaEscribirJv ::= MENSAJELN PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje a pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // sentenciaEscribirJv ::= MENSAJELN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribirJv",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expresionMensajeJv ::= expresionMensajeJv MAS expresionMensajeJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expresionMensajeJv ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expresionMensajeJv ::= expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expresionMensajeJv ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una cadena o una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionMensajeJv",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sentenciaReturnJv ::= RETURN expresionArJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // sentenciaReturnJv ::= RETURN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturnJv",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // sentenciaBreakJv ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreakJv",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expresionArJv ::= expresionArJv MAS expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expresionArJv ::= expresionArJv MENOS expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expresionArJv ::= expresionArJv DIV expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expresionArJv ::= expresionArJv POR expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expresionArJv ::= expresionArJv MOD expresionArJv 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expresionArJv ::= PAR_A expresionArJv PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expresionArJv ::= llamadaMetodoJv 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expresionArJv ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expresionArJv ::= THIS ID 
            {
              NodoAritmetico RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(id!=null){
                                                RESULT = new Hoja(new Dato(CONST.ID_GLOBAL,id), new Pos(idleft,idright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArJv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expresionBoolJv ::= expresionArJv DISTINTO expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expresionBoolJv ::= expresionArJv COMPARADOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expresionBoolJv ::= expresionArJv MENOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expresionBoolJv ::= expresionArJv MENORIGUAL expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expresionBoolJv ::= expresionArJv MAYOR expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expresionBoolJv ::= expresionArJv MAYORIGUAL expresionArJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expresionBoolJv ::= expresionBoolJv AND expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expresionBoolJv ::= expresionBoolJv OR expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expresionBoolJv ::= NOT expresionBoolJv 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolJv",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // llamadaMetodoJv ::= ID PAR_A listadoParametrosEnviadosJv PAR_C 
            {
              Object RESULT =null;
		int expresionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodoAritmetico> expresiones = (List<NodoAritmetico>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (expresiones==null)? new ArrayList() : expresiones; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // llamadaMetodoJv ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoJv",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA expresionArJv 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // listadoParametrosEnviadosJv ::= expresionArJv 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // listadoParametrosEnviadosJv ::= listadoParametrosEnviadosJv COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // listadoParametrosEnviadosJv ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosJv",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // python ::= SEPARADOR_PY NEWLINE metodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("python",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // metodosPy ::= dclMetodosPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // metodosPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodosPy",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // dclMetodosPy ::= dclMetodosPy dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // dclMetodosPy ::= dclMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodosPy",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // dclMetodoPy ::= DEF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para la declaracion del metodo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // dclMetodoPy ::= DEF ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // dclMetodoPy ::= DEF ID PAR_A dclParametrosPy PAR_C DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclMetodoPy",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // dclParametrosPy ::= listadoId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // dclParametrosPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclParametrosPy",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // listadoId ::= listadoId COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // listadoId ::= listadoId COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // listadoId ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoId",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // sentenciasPy ::= sentenciasPy sentenciaPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // sentenciasPy ::= sentenciaPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPy",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // sentenciaPy ::= sentenciaIfPy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // sentenciaPy ::= sentenciaForPy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // sentenciaPy ::= sentenciaWhilePy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // sentenciaPy ::= sentenciaSimplePy NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // sentenciaPy ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaPy",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // bloquePy ::= NEWLINE IDENT sentenciasPy DEDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // bloquePy ::= sentenciaSimplePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquePy",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // sentenciaSimplePy ::= asignacionVarPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // sentenciaSimplePy ::= escribirPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // sentenciaSimplePy ::= ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // sentenciaSimplePy ::= llamadaMetodoPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimplePy",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // escribirPy ::= MENSAJE PAR_A mensajesPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // escribirPy ::= MENSAJE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un mensaje para mostrar en pantalla.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // escribirPy ::= MENSAJE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // escribirPy ::= MENSAJE PAR_A mensajesPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,".", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribirPy",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // mensajesPy ::= mensajesPy COMA mensajePy 
            {
              Concat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // mensajesPy ::= mensajePy 
            {
              Concat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajesPy",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // mensajePy ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // mensajePy ::= expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensajePy",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // listadoExpresionesArPy ::= listadoExpresionesArPy COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // listadoExpresionesArPy ::= expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // listadoExpresionesArPy ::= error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresionesArPy",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // sentenciaIfPy ::= IF condicionPy DOS_PUNTOS error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // sentenciaIfPy ::= IF condicionPy error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // sentenciaIfPy ::= IF error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfPy",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS bloquePy elseIfPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // elseIfPy ::= ELSEIF condicionPy DOS_PUNTOS error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // elseIfPy ::= ELSEIF condicionPy error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // elseIfPy ::= ELSEIF error elseIfPy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // elseIfPy ::= elsePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // elseIfPy ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIfPy",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // elsePy ::= ELSE DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // elsePy ::= ELSE DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // elsePy ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsePy",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // sentenciaWhilePy ::= WHILE condicionPy bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // sentenciaWhilePy ::= WHILE condicionPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhilePy",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS bloquePy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // sentenciaForPy ::= FOR ID IN rangePy DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un bloque de codigo.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // sentenciaForPy ::= FOR ID IN rangePy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token dos puntos.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // sentenciaForPy ::= FOR ID IN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba la funcion range.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // sentenciaForPy ::= FOR ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba el token 'in'.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // sentenciaForPy ::= FOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un identificador para el ciclo for.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaForPy",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // rangePy ::= RANGE PAR_A expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // rangePy ::= RANGE PAR_A expresionArPy COMA expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // rangePy ::= RANGE PAR_A expresionArPy COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // rangePy ::= RANGE PAR_A expresionArPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una coma.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // rangePy ::= RANGE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion aritmetica.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // rangePy ::= RANGE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangePy",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // condicionPy ::= PAR_A expresionBoolPy PAR_C 
            {
              NodoBooleano RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // condicionPy ::= PAR_A expresionBoolPy error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis abierto.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // condicionPy ::= PAR_A error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se espraba una expresion booleana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // condicionPy ::= expresionBoolPy 
            {
              NodoBooleano RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // condicionPy ::= error 
            {
              NodoBooleano RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una expresion boolana.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionPy",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expresionArPy ::= expresionArPy MAS expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // expresionArPy ::= expresionArPy MENOS expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // expresionArPy ::= expresionArPy DIV expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // expresionArPy ::= expresionArPy POR expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expresionArPy ::= expresionArPy MOD expresionArPy 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expresionArPy ::= PAR_A expresionArPy PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expresionArPy ::= llamadaMetodoPy 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // expresionArPy ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionArPy",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // llamadaMetodoPy ::= ID PAR_A listadoParametrosEnviadosPy error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un parentesis cerrado.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // llamadaMetodoPy ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodoPy",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // asignacionVarPy ::= listadoId IGUAL listadoExpresionesArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // asignacionVarPy ::= listadoId error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba un token igual (=).", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // asignacionVarPy ::= ID IGUAL ingresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // asignacionVarPy ::= ID IGUAL expresionArPy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVarPy",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // listadoParametrosEnviadosPy ::= listadoParametrosEnviadosPy COMA expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // listadoParametrosEnviadosPy ::= expresionArPy 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviadosPy",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // expresionBoolPy ::= expresionArPy DISTINTO expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // expresionBoolPy ::= expresionArPy COMPARADOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // expresionBoolPy ::= expresionArPy MENOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // expresionBoolPy ::= expresionArPy MENORIGUAL expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // expresionBoolPy ::= expresionArPy MAYOR expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // expresionBoolPy ::= expresionArPy MAYORIGUAL expresionArPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expresionBoolPy ::= expresionBoolPy AND expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // expresionBoolPy ::= expresionBoolPy OR expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // expresionBoolPy ::= NOT expresionBoolPy 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBoolPy",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // principal ::= SEPARADOR_PROGRAMA secLibrerias secConstantes secVariables codigoMain 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // secLibrerias ::= dclLibrerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // secLibrerias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secLibrerias",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // dclLibrerias ::= dclLibrerias dclLibreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // dclLibrerias ::= dclLibreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibrerias",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // dclLibreria ::= HASHTAG INCLUDE libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // dclLibreria ::= HASHTAG INCLUDE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una libreria", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // dclLibreria ::= HASHTAG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String) e,"Se esperaba una palabra reservada include.", eleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclLibreria",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // libreria ::= JAVA PUNTO valorTextoLibreriaJv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // libreria ::= JAVA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba las clases a importar.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // libreria ::= PY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // libreria ::= VB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // libreria ::= MENOR libreriaC MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // libreria ::= MENOR libreriaC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '>'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // libreria ::= MENOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba el formato de una libreria de C.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // libreriaC ::= libreriaC PUNTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // libreriaC ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaC",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // valorTextoLibreriaJv ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // valorTextoLibreriaJv ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTextoLibreriaJv",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // secConstantes ::= dclConstantes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // secConstantes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secConstantes",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // dclConstantes ::= dclConstantes dclConstante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // dclConstantes ::= dclConstante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstantes",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // dclConstante ::= CONST tiposDeDato ID IGUAL expresionAr error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // dclConstante ::= CONST tiposDeDato ID IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion para asignar a la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // dclConstante ::= CONST tiposDeDato ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // dclConstante ::= CONST tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // dclConstante ::= CONST error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un tipo de dato para la variable declarada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclConstante",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // secVariables ::= dclVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // secVariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secVariables",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // dclVariables ::= dclVariables sentenciaDeclaracionInicial 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // dclVariables ::= sentenciaDeclaracionInicial 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dclVariables",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // sentenciaDeclaracionInicial ::= sentenciaDeclaracion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token fin de linea ';'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracionInicial",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // sentenciaDeclaracion ::= tiposDeDato listadoDeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // sentenciaDeclaracion ::= JAVA PUNTO ID listadoDeclaracionesClases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // sentenciaDeclaracion ::= tiposDeDato arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // sentenciaDeclaracion ::= tiposDeDato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de identificadores o la estructura de un arreglo.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // sentenciaDeclaracion ::= JAVA PUNTO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador referente a una clase declarada en la seccion de java.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // sentenciaDeclaracion ::= JAVA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token punto '.'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDeclaracion",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // arreglo ::= ID listDimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // listDimensiones ::= listDimensiones COR_A expresionAr COR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // listDimensiones ::= COR_A expresionAr COR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // listDimensiones ::= COR_A error COR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // listDimensiones ::= listDimensiones COR_A error COR_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDimensiones",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // listadoDeclaraciones ::= listadoDeclaraciones COMA ID asignacionValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // listadoDeclaraciones ::= ID asignacionValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // listadoDeclaraciones ::= listadoDeclaraciones COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaraciones",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // asignacionValor ::= IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // asignacionValor ::= IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // asignacionValor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionValor",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA ID asignacionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // listadoDeclaracionesClases ::= ID asignacionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // listadoDeclaracionesClases ::= listadoDeclaracionesClases COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un identificador",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoDeclaracionesClases",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // asignacionConstructor ::= accionConstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // asignacionConstructor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionConstructor",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // accionConstructor ::= PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // accionConstructor ::= PAR_A listadoParametrosEnviados error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accionConstructor",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // codigoMain ::= VOID MAIN PAR_A PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // codigoMain ::= VOID MAIN PAR_A PAR_C error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // codigoMain ::= VOID MAIN PAR_A error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // codigoMain ::= VOID MAIN error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // codigoMain ::= VOID error bloque 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada 'main'.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigoMain",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // bloque ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // sentencia ::= sentenciaSimple FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // sentenciaSimple ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // sentenciaSimple ::= sentenciaDeclaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // sentenciaSimple ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // sentenciaSimple ::= sentenciaIngresoDatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // sentenciaSimple ::= sentenciaLimpiarPantalla 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // sentenciaSimple ::= sentenciaEsperarTecla 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // sentenciaSimple ::= llamadaMetodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // sentenciaSimple ::= sentenciaBreak 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSimple",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // sentenciaAsignacion ::= lugarAsignacion IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // sentenciaAsignacion ::= lugarAsignacion IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion arimetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // sentenciaAsignacion ::= lugarAsignacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '='.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // lugarAsignacion ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // lugarAsignacion ::= arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // lugarAsignacion ::= JAVA PUNTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lugarAsignacion",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // sentenciaEscribir ::= PRINTF PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba contenido para mostrar en pantalla.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // sentenciaEscribir ::= PRINTF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA listadoExpresiones error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // sentenciaEscribir ::= PRINTF PAR_A expresionCadena COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un listado de expresiones.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // expresionCadena ::= expresionCadena valorCadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // expresionCadena ::= valorCadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadena",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // listadoExpresiones ::= listadoExpresiones COMA expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // listadoExpresiones ::= expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // listadoExpresiones ::= AMPERSON expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // listadoExpresiones ::= AMPERSON error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresiona aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // listadoExpresiones ::= listadoExpresiones COMA AMPERSON error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // listadoExpresiones ::= listadoExpresiones COMA error 
            {
              List<NodoAritmetico> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoExpresiones",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // expresionCadenaEntrada ::= valorTexto comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // expresionCadenaEntrada ::= comodin valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // expresionCadenaEntrada ::= valorTexto comodin valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // expresionCadenaEntrada ::= comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // expresionCadenaEntrada ::= valorTexto error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // expresionCadenaEntrada ::= error valorTexto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // expresionCadenaEntrada ::= valorTexto error valorTexto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // expresionCadenaEntrada ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un comodin.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionCadenaEntrada",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // valorCadena ::= valorTexto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // valorCadena ::= comodin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCadena",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // valorTexto ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // valorTexto ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorTexto",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // comodin ::= COMODIN_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // comodin ::= COMODIN_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // comodin ::= COMODIN_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comodin",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON lugarAsignacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA AMPERSON error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un lugar para asignar el valor leido.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un token '&'",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // sentenciaIngresoDatos ::= SCANF PAR_A expresionCadenaEntrada error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una coma.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // sentenciaIngresoDatos ::= SCANF PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena para ingresar texto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // sentenciaIngresoDatos ::= SCANF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIngresoDatos",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // sentenciaLimpiarPantalla ::= LIMPIAR_PANTALLA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaLimpiarPantalla",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // sentenciaEsperarTecla ::= ESPERAR_TECLA PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // sentenciaEsperarTecla ::= ESPERAR_TECLA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaEsperarTecla",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // sentenciaBreak ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaBreak",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // sentenciaIf ::= IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // sentenciaIf ::= IF PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // sentenciaIf ::= IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // sentenciaIf ::= IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // sentenciaIf ::= IF error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // sino ::= ELSE LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // sino ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // sino ::= ELSE IF PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // sino ::= ELSE IF PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // sino ::= ELSE IF PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // sino ::= ELSE IF PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // sino ::= ELSE IF error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // sino ::= ELSE LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // sino ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esparaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID modificadorFor error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // sentenciaFor ::= FOR PAR_A tiposDeDato ID expresionAr FIN_LINEA expresionBool FIN_LINEA ID error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // modificadorFor ::= IGUAL expresionAr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // modificadorFor ::= IGUAL error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion aritmetica",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // modificadorFor ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // modificadorFor ::= DISMINUCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // modificadorFor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un modificador para la variable.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadorFor",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // sentenciaWhile ::= WHILE PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave abierta.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // sentenciaWhile ::= WHILE PAR_A expresionBool error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // sentenciaWhile ::= WHILE PAR_A error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // sentenciaWhile ::= WHILE error LLAVE_A bloque LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C FIN_LINEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool PAR_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un fin de linea.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A expresionBool error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE PAR_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion booleana.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C WHILE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // sentenciaDoWhile ::= DO LLAVE_A bloque LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba la palabra reservada while.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // sentenciaDoWhile ::= DO LLAVE_A bloque error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A contenidoSwitch error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una llave cerrada.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // sentenciaSwitch ::= SWITCH PAR_A expresionAr PAR_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaban casos.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // sentenciaSwitch ::= SWITCH PAR_A expresionAr error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // sentenciaSwitch ::= SWITCH PAR_A error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una expresion.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // sentenciaSwitch ::= SWITCH error LLAVE_A contenidoSwitch LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // contenidoSwitch ::= contenidoSwitch valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // contenidoSwitch ::= valorSwitch DOS_PUNTOS bloqueSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // contenidoSwitch ::= valorSwitch DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // contenidoSwitch ::= contenidoSwitch valorSwitch DOS_PUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un bloque de switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidoSwitch",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // valorSwitch ::= CASE ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // valorSwitch ::= CASE FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // valorSwitch ::= CASE CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // valorSwitch ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // valorSwitch ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un valor para un caso de un switch.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorSwitch",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // expresionAr ::= expresionAr MAS expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mas(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // expresionAr ::= expresionAr MENOS expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menos(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // expresionAr ::= expresionAr DIV expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Div(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // expresionAr ::= expresionAr POR expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Por(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // expresionAr ::= expresionAr MOD expresionAr 
            {
              NodoAritmetico RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mod(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // expresionAr ::= PAR_A expresionAr PAR_C 
            {
              NodoAritmetico RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAritmetico expresion = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(expresion!=null&&pos!=null){
                                                RESULT = expresion;
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // expresionAr ::= llamadaMetodo 
            {
              NodoAritmetico RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(llamada!=null){
                                                RESULT = new Hoja(new Dato(CONST.LLAMADA, llamada), new Pos(llamadaleft, llamadaright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // expresionAr ::= valorAtomico 
            {
              NodoAritmetico RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(dato!=null){
                                                RESULT = new Hoja(dato, new Pos(datoleft,datoright)):
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionAr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // expresionBool ::= expresionAr DISTINTO expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Distinto(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // expresionBool ::= expresionAr COMPARADOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Igual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // expresionBool ::= expresionAr MENOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Menor(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // expresionBool ::= expresionAr MENORIGUAL expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MenorIgual(expresionI, expresionD, new Pos(posleft, posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // expresionBool ::= expresionAr MAYOR expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Mayor(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // expresionBool ::= expresionAr MAYORIGUAL expresionAr 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoAritmetico expresionI = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAritmetico expresionD = (NodoAritmetico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new MayorIgual(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new And(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBooleano RESULT =null;
		int expresionIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expresionIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBooleano expresionI = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresionD = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(expresionI!=null&&pos!=null&&expresionD!=null){
                                                RESULT = new Or(expresionI, expresionD, new Pos(posleft,posright));
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // expresionBool ::= NOT expresionBool 
            {
              NodoBooleano RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBooleano expresion = (NodoBooleano)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if(pos!=null&&expresion!=null){
                                                if(expresion instanceof Not){
                                                    RESULT = ((Not)expresion).getHijo();
                                                }else{
                                                    RESULT = expresion;
                                                }
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // llamadaMetodo ::= JAVA PUNTO ID PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // llamadaMetodo ::= PY PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // llamadaMetodo ::= VB PUNTO ID PAR_A listadoParametrosEnviados PAR_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // listadoParametrosEnviados ::= parametrosEnviados 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // listadoParametrosEnviados ::= 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadoParametrosEnviados",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // parametrosEnviados ::= parametrosEnviados COMA expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // parametrosEnviados ::= expresionAr 
            {
              List<NodoAritmetico> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosEnviados",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // ingresoDatos ::= ingreso PAR_A CADENA PAR_C 
            {
              AccionIngreso RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ingreso = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            RESULT = new AccionIngreso(new Hoja(new Dato(CONST.CADENA, cadena),new Pos(cadenaleft,cadenaright)),ingreso,new Pos(ingresoleft,ingresoright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // ingresoDatos ::= ingreso PAR_A PAR_C 
            {
              AccionIngreso RESULT =null;
		int ingresoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ingresoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ingreso = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            RESULT = new AccionIngreso(null,ingreso, new Pos(ingresoleft,ingresoright));
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // ingresoDatos ::= ingreso PAR_A CADENA error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis cerrado.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 2 with the actual generated action code for actions 600 to 900. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000002(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // ingresoDatos ::= ingreso PAR_A error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba una cadena, o que estuviese vacio.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // ingresoDatos ::= ingreso error 
            {
              AccionIngreso RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 agregarError("Sintactico",(String)e,"Se esperaba un parentesis abierto.",eleft,eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingresoDatos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // ingreso ::= INTINPUT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // ingreso ::= CHARINPUT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // ingreso ::= FLOATINPUT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ingreso",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // tiposDeDato ::= PR_ENTERO 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // tiposDeDato ::= PR_FLOTANTE 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // tiposDeDato ::= PR_CARACTER 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeDato",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // valorAtomico ::= ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // valorAtomico ::= FLOTANTE 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.FLOTANTE,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // valorAtomico ::= CARACTER 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.CARACTER,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // valorAtomico ::= MENOS ENTERO 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ENTERO,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // valorAtomico ::= ID 
            {
              Dato RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dato(CONST.ID,valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorAtomico",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // tiposDeMetodo ::= VOID 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // tiposDeMetodo ::= tiposDeDato 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = valor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposDeMetodo",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // publicOpcional ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // publicOpcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("publicOpcional",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 600 < #action < 900. . . . . . . . . . . .*/
          case 2: 
              return CUP$Parser$do_action_part00000002(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
